"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useWalletConnectConnector = void 0;
var react_1 = require("react");
var constants_1 = require("../constants");
var use_contractkit_1 = require("../use-contractkit");
var connectors_1 = require("./connectors");
function useWalletConnectConnector(onSubmit, autoOpen, getDeeplinkUrl) {
    var _this = this;
    var _a = use_contractkit_1.useContractKitInternal(), network = _a.network, dapp = _a.dapp, destroy = _a.destroy, initConnector = _a.initConnector;
    var _b = react_1.useState(''), uri = _b[0], setUri = _b[1];
    react_1.useEffect(function () {
        var mounted = true;
        var initialiseConnection = function () { return __awaiter(_this, void 0, void 0, function () {
            var isMainnet, relayProvider, connector;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        isMainnet = network.name === constants_1.CeloMainnet.name;
                        relayProvider = isMainnet
                            ? 'wss://walletconnect.celo.org'
                            : 'wss://walletconnect.celo-networks-dev.org';
                        connector = new connectors_1.WalletConnectConnector(network, {
                            connect: {
                                metadata: {
                                    name: dapp.name,
                                    description: dapp.description,
                                    url: dapp.url,
                                    icons: [dapp.icon],
                                },
                            },
                            init: {
                                relayProvider: relayProvider,
                                logger: 'error',
                            },
                        }, autoOpen && isMainnet, getDeeplinkUrl);
                        connector.onUri(function (newUri) {
                            if (mounted) {
                                setUri(newUri);
                            }
                        });
                        connector.onClose(function () { return void destroy(); });
                        return [4 /*yield*/, initConnector(connector)];
                    case 1:
                        _a.sent();
                        onSubmit(connector);
                        return [2 /*return*/];
                }
            });
        }); };
        initialiseConnection()
            .then(function () { return console.info('WalletConnect connection initialised'); })
            // TODO surface error to user here
            .catch(function (reason) {
            return console.error('Failed to initialise WalletConnect connection', reason);
        });
        return function () {
            mounted = false;
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    return uri;
}
exports.useWalletConnectConnector = useWalletConnectConnector;
//# sourceMappingURL=useWalletConnectConnector.js.map