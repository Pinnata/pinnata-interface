"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValoraConnector = exports.WalletConnectConnector = exports.CeloExtensionWalletConnector = exports.MetaMaskConnector = exports.InjectedConnector = exports.UnsupportedChainIdError = exports.LedgerConnector = exports.PrivateKeyConnector = exports.UnauthenticatedConnector = void 0;
var contractkit_1 = require("@celo/contractkit");
var wallet_local_1 = require("@celo/wallet-local");
var wallet_walletconnect_1 = require("@celo/wallet-walletconnect");
var bignumber_js_1 = require("bignumber.js");
var dappkit_wallet_1 = require("../dappkit-wallet");
var constants_1 = require("../constants");
var types_1 = require("../types");
var helpers_1 = require("../utils/helpers");
/**
 * Connectors are our link between a DApp and the users wallet. Each
 * wallet has different semantics and these classes attempt to unify
 * them and present a workable API.
 */
var UnauthenticatedConnector = /** @class */ (function () {
    function UnauthenticatedConnector(n) {
        this.initialised = true;
        this.type = constants_1.WalletTypes.Unauthenticated;
        this.account = null;
        this.kit = contractkit_1.newKit(n.rpcUrl);
    }
    UnauthenticatedConnector.prototype.initialise = function () {
        this.initialised = true;
        return this;
    };
    UnauthenticatedConnector.prototype.close = function () {
        helpers_1.clearPreviousConfig();
        return;
    };
    return UnauthenticatedConnector;
}());
exports.UnauthenticatedConnector = UnauthenticatedConnector;
var PrivateKeyConnector = /** @class */ (function () {
    function PrivateKeyConnector(n, privateKey) {
        var _a;
        this.initialised = true;
        this.type = constants_1.WalletTypes.PrivateKey;
        this.account = null;
        localStorage.setItem(constants_1.localStorageKeys.lastUsedWalletType, constants_1.WalletTypes.PrivateKey);
        localStorage.setItem(constants_1.localStorageKeys.lastUsedWalletArguments, JSON.stringify([privateKey]));
        localStorage.setItem(constants_1.localStorageKeys.lastUsedNetwork, n.name);
        var wallet = new wallet_local_1.LocalWallet();
        wallet.addAccount(privateKey);
        this.kit = contractkit_1.newKit(n.rpcUrl, wallet);
        this.kit.defaultAccount = wallet.getAccounts()[0];
        this.account = (_a = this.kit.defaultAccount) !== null && _a !== void 0 ? _a : null;
    }
    PrivateKeyConnector.prototype.initialise = function () {
        this.initialised = true;
        return this;
    };
    PrivateKeyConnector.prototype.close = function () {
        helpers_1.clearPreviousConfig();
        return;
    };
    return PrivateKeyConnector;
}());
exports.PrivateKeyConnector = PrivateKeyConnector;
var LedgerConnector = /** @class */ (function () {
    function LedgerConnector(network, index) {
        this.network = network;
        this.index = index;
        this.initialised = false;
        this.type = constants_1.WalletTypes.Ledger;
        this.account = null;
        localStorage.setItem(constants_1.localStorageKeys.lastUsedWalletType, constants_1.WalletTypes.Ledger);
        localStorage.setItem(constants_1.localStorageKeys.lastUsedWalletArguments, JSON.stringify([index]));
        localStorage.setItem(constants_1.localStorageKeys.lastUsedNetwork, network.name);
        this.kit = contractkit_1.newKit(network.rpcUrl);
    }
    LedgerConnector.prototype.initialise = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var TransportUSB, newLedgerWalletWithSetup, transport, wallet;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.resolve().then(function () { return __importStar(require('@ledgerhq/hw-transport-webusb')); })];
                    case 1:
                        TransportUSB = (_b.sent()).default;
                        return [4 /*yield*/, Promise.resolve().then(function () { return __importStar(require('@celo/wallet-ledger')); })];
                    case 2:
                        newLedgerWalletWithSetup = (_b.sent()).newLedgerWalletWithSetup;
                        return [4 /*yield*/, TransportUSB.create()];
                    case 3:
                        transport = _b.sent();
                        return [4 /*yield*/, newLedgerWalletWithSetup(transport, [this.index])];
                    case 4:
                        wallet = _b.sent();
                        this.kit = contractkit_1.newKit(this.network.rpcUrl, wallet);
                        this.kit.defaultAccount = wallet.getAccounts()[0];
                        this.initialised = true;
                        this.account = (_a = this.kit.defaultAccount) !== null && _a !== void 0 ? _a : null;
                        return [2 /*return*/, this];
                }
            });
        });
    };
    LedgerConnector.prototype.close = function () {
        helpers_1.clearPreviousConfig();
        return;
    };
    return LedgerConnector;
}());
exports.LedgerConnector = LedgerConnector;
var UnsupportedChainIdError = /** @class */ (function (_super) {
    __extends(UnsupportedChainIdError, _super);
    function UnsupportedChainIdError(chainID) {
        var _this = _super.call(this, "Unsupported chain ID: " + chainID) || this;
        _this.chainID = chainID;
        _this.name = UnsupportedChainIdError.NAME;
        return _this;
    }
    UnsupportedChainIdError.NAME = 'UnsupportedChainIdError';
    return UnsupportedChainIdError;
}(Error));
exports.UnsupportedChainIdError = UnsupportedChainIdError;
var InjectedConnector = /** @class */ (function () {
    function InjectedConnector(network, defaultType) {
        if (defaultType === void 0) { defaultType = constants_1.WalletTypes.Injected; }
        this.initialised = false;
        this.type = constants_1.WalletTypes.CeloExtensionWallet;
        this.account = null;
        this.type = defaultType;
        localStorage.setItem(constants_1.localStorageKeys.lastUsedWalletType, defaultType);
        localStorage.setItem(constants_1.localStorageKeys.lastUsedWalletArguments, JSON.stringify([]));
        localStorage.setItem(constants_1.localStorageKeys.lastUsedNetwork, network.name);
        this.kit = contractkit_1.newKit(network.rpcUrl);
    }
    InjectedConnector.prototype.initialise = function () {
        return __awaiter(this, void 0, void 0, function () {
            var Web3, ethereum, web3, chainId, defaultAccount;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.resolve().then(function () { return __importStar(require('web3')); })];
                    case 1:
                        Web3 = (_a.sent()).default;
                        ethereum = window.ethereum;
                        if (!ethereum) {
                            throw new Error('Ethereum wallet not installed');
                        }
                        this.type = constants_1.WalletTypes.Injected;
                        web3 = new Web3(ethereum);
                        return [4 /*yield*/, ethereum.request({ method: 'eth_requestAccounts' })];
                    case 2:
                        void (_a.sent());
                        return [4 /*yield*/, web3.eth.getChainId()];
                    case 3:
                        chainId = _a.sent();
                        if (!Object.values(types_1.ChainId).includes(chainId)) {
                            throw new UnsupportedChainIdError(chainId);
                        }
                        ethereum.on('chainChanged', function (chainIdHex) {
                            if (_this.onNetworkChangeCallback) {
                                var chainId_1 = parseInt(chainIdHex, 16);
                                _this.onNetworkChangeCallback(chainId_1);
                            }
                        });
                        ethereum.on('accountsChanged', function (accounts) {
                            var _a;
                            if (_this.onAddressChangeCallback) {
                                _this.kit.defaultAccount = accounts[0];
                                _this.onAddressChangeCallback((_a = accounts[0]) !== null && _a !== void 0 ? _a : null);
                            }
                        });
                        this.kit = contractkit_1.newKitFromWeb3(web3);
                        return [4 /*yield*/, this.kit.web3.eth.getAccounts()];
                    case 4:
                        defaultAccount = (_a.sent())[0];
                        this.kit.defaultAccount = defaultAccount;
                        this.account = defaultAccount !== null && defaultAccount !== void 0 ? defaultAccount : null;
                        this.initialised = true;
                        return [2 /*return*/, this];
                }
            });
        });
    };
    InjectedConnector.prototype.onNetworkChange = function (callback) {
        this.onNetworkChangeCallback = callback;
    };
    InjectedConnector.prototype.onAddressChange = function (callback) {
        this.onAddressChangeCallback = callback;
    };
    InjectedConnector.prototype.close = function () {
        helpers_1.clearPreviousConfig();
        this.onNetworkChangeCallback = undefined;
        this.onAddressChangeCallback = undefined;
        return;
    };
    return InjectedConnector;
}());
exports.InjectedConnector = InjectedConnector;
var MetaMaskConnector = /** @class */ (function (_super) {
    __extends(MetaMaskConnector, _super);
    function MetaMaskConnector(network) {
        return _super.call(this, network, constants_1.WalletTypes.MetaMask) || this;
    }
    return MetaMaskConnector;
}(InjectedConnector));
exports.MetaMaskConnector = MetaMaskConnector;
var CeloExtensionWalletConnector = /** @class */ (function () {
    function CeloExtensionWalletConnector(network) {
        this.initialised = false;
        this.type = constants_1.WalletTypes.CeloExtensionWallet;
        this.account = null;
        localStorage.setItem(constants_1.localStorageKeys.lastUsedWalletType, constants_1.WalletTypes.CeloExtensionWallet);
        localStorage.setItem(constants_1.localStorageKeys.lastUsedWalletArguments, JSON.stringify([]));
        localStorage.setItem(constants_1.localStorageKeys.lastUsedNetwork, network.name);
        this.kit = contractkit_1.newKit(network.rpcUrl);
    }
    CeloExtensionWalletConnector.prototype.initialise = function () {
        return __awaiter(this, void 0, void 0, function () {
            var Web3, celo, web3, defaultAccount;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.resolve().then(function () { return __importStar(require('web3')); })];
                    case 1:
                        Web3 = (_a.sent()).default;
                        celo = window.celo;
                        if (!celo) {
                            throw new Error('Celo Extension Wallet not installed');
                        }
                        web3 = new Web3(celo);
                        return [4 /*yield*/, celo.enable()];
                    case 2:
                        _a.sent();
                        web3.currentProvider.publicConfigStore.on('update', function (_a) {
                            var networkVersion = _a.networkVersion;
                            if (_this.onNetworkChangeCallback) {
                                _this.onNetworkChangeCallback(networkVersion);
                            }
                        });
                        this.kit = contractkit_1.newKitFromWeb3(web3);
                        return [4 /*yield*/, this.kit.web3.eth.getAccounts()];
                    case 3:
                        defaultAccount = (_a.sent())[0];
                        this.kit.defaultAccount = defaultAccount;
                        this.account = defaultAccount !== null && defaultAccount !== void 0 ? defaultAccount : null;
                        this.initialised = true;
                        return [2 /*return*/, this];
                }
            });
        });
    };
    CeloExtensionWalletConnector.prototype.onNetworkChange = function (callback) {
        this.onNetworkChangeCallback = callback;
    };
    CeloExtensionWalletConnector.prototype.close = function () {
        helpers_1.clearPreviousConfig();
        return;
    };
    return CeloExtensionWalletConnector;
}());
exports.CeloExtensionWalletConnector = CeloExtensionWalletConnector;
var WalletConnectConnector = /** @class */ (function () {
    function WalletConnectConnector(network, options, autoOpen, getDeeplinkUrl) {
        if (autoOpen === void 0) { autoOpen = false; }
        this.network = network;
        this.autoOpen = autoOpen;
        this.getDeeplinkUrl = getDeeplinkUrl;
        this.initialised = false;
        this.type = constants_1.WalletTypes.WalletConnect;
        this.account = null;
        localStorage.setItem(constants_1.localStorageKeys.lastUsedWalletType, constants_1.WalletTypes.WalletConnect);
        localStorage.setItem(constants_1.localStorageKeys.lastUsedWalletArguments, JSON.stringify([options]));
        localStorage.setItem(constants_1.localStorageKeys.lastUsedNetwork, network.name);
        var wallet = new wallet_walletconnect_1.WalletConnectWallet(options);
        this.kit = contractkit_1.newKit(network.rpcUrl, wallet);
    }
    WalletConnectConnector.prototype.onUri = function (callback) {
        this.onUriCallback = callback;
    };
    WalletConnectConnector.prototype.onClose = function (callback) {
        this.onCloseCallback = callback;
    };
    WalletConnectConnector.prototype.initialise = function () {
        return __awaiter(this, void 0, void 0, function () {
            var wallet, uri, deepLink, address, defaultAccount;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        wallet = this.kit.getWallet();
                        if (this.onCloseCallback) {
                            wallet.onPairingDeleted = function () { var _a; return (_a = _this.onCloseCallback) === null || _a === void 0 ? void 0 : _a.call(_this); };
                            wallet.onSessionDeleted = function () { var _a; return (_a = _this.onCloseCallback) === null || _a === void 0 ? void 0 : _a.call(_this); };
                        }
                        return [4 /*yield*/, wallet.getUri()];
                    case 1:
                        uri = _a.sent();
                        if (uri && this.onUriCallback) {
                            this.onUriCallback(uri);
                        }
                        if (uri && this.autoOpen) {
                            deepLink = this.getDeeplinkUrl ? this.getDeeplinkUrl(uri) : uri;
                            location.href = deepLink;
                        }
                        return [4 /*yield*/, wallet.init()];
                    case 2:
                        _a.sent();
                        address = wallet.getAccounts()[0];
                        return [4 /*yield*/, this.fetchWalletAddressForAccount(address)];
                    case 3:
                        defaultAccount = _a.sent();
                        this.kit.defaultAccount = defaultAccount;
                        this.account = defaultAccount !== null && defaultAccount !== void 0 ? defaultAccount : null;
                        this.initialised = true;
                        return [2 /*return*/, this];
                }
            });
        });
    };
    WalletConnectConnector.prototype.fetchWalletAddressForAccount = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var accounts, walletAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!address) {
                            return [2 /*return*/, undefined];
                        }
                        return [4 /*yield*/, this.kit.contracts.getAccounts()];
                    case 1:
                        accounts = _a.sent();
                        return [4 /*yield*/, accounts.getWalletAddress(address)];
                    case 2:
                        walletAddress = _a.sent();
                        return [2 /*return*/, new bignumber_js_1.BigNumber(walletAddress).isZero() ? address : walletAddress];
                }
            });
        });
    };
    WalletConnectConnector.prototype.close = function () {
        helpers_1.clearPreviousConfig();
        var wallet = this.kit.getWallet();
        return wallet.close();
    };
    return WalletConnectConnector;
}());
exports.WalletConnectConnector = WalletConnectConnector;
var ValoraConnector = /** @class */ (function () {
    function ValoraConnector(network, dappName) {
        this.network = network;
        this.initialised = false;
        this.type = constants_1.WalletTypes.Valora;
        localStorage.setItem(constants_1.localStorageKeys.lastUsedWalletType, constants_1.WalletTypes.Valora);
        localStorage.setItem(constants_1.localStorageKeys.lastUsedWalletArguments, JSON.stringify([dappName]));
        this.wallet = new dappkit_wallet_1.DappKitWallet(dappName);
        this.kit = contractkit_1.newKit(network.rpcUrl, this.wallet);
        this.wallet.setKit(this.kit);
    }
    Object.defineProperty(ValoraConnector.prototype, "account", {
        get: function () {
            var storedConfig = localStorage.getItem(dappkit_wallet_1.dappKitConfigKey);
            var dappKitConfig = storedConfig ? JSON.parse(storedConfig) : null;
            if (dappKitConfig) {
                return dappKitConfig.phoneNumber;
            }
            return null;
        },
        enumerable: false,
        configurable: true
    });
    ValoraConnector.prototype.initialise = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.wallet.init()];
                    case 1:
                        _a.sent();
                        this.kit = contractkit_1.newKit(this.network.rpcUrl, this.wallet);
                        this.kit.defaultAccount = this.wallet.getAccounts()[0];
                        this.wallet.setKit(this.kit);
                        this.initialised = true;
                        return [2 /*return*/, this];
                }
            });
        });
    };
    ValoraConnector.prototype.close = function () {
        localStorage.removeItem(dappkit_wallet_1.dappKitConfigKey);
        return;
    };
    return ValoraConnector;
}());
exports.ValoraConnector = ValoraConnector;
//# sourceMappingURL=connectors.js.map