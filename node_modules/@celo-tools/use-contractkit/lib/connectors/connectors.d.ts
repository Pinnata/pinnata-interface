import { ContractKit } from '@celo/contractkit';
import { WalletConnectWalletOptions } from '@celo/wallet-walletconnect';
import { DappKitWallet } from '../dappkit-wallet';
import { WalletTypes } from '../constants';
import { Connector, Network } from '../types';
/**
 * Connectors are our link between a DApp and the users wallet. Each
 * wallet has different semantics and these classes attempt to unify
 * them and present a workable API.
 */
export declare class UnauthenticatedConnector implements Connector {
    initialised: boolean;
    type: WalletTypes;
    kit: ContractKit;
    account: string | null;
    constructor(n: Network);
    initialise(): this;
    close(): void;
}
export declare class PrivateKeyConnector implements Connector {
    initialised: boolean;
    type: WalletTypes;
    kit: ContractKit;
    account: string | null;
    constructor(n: Network, privateKey: string);
    initialise(): this;
    close(): void;
}
export declare class LedgerConnector implements Connector {
    private network;
    private index;
    initialised: boolean;
    type: WalletTypes;
    kit: ContractKit;
    account: string | null;
    constructor(network: Network, index: number);
    initialise(): Promise<this>;
    close(): void;
}
export declare class UnsupportedChainIdError extends Error {
    readonly chainID: number;
    static readonly NAME: string;
    constructor(chainID: number);
}
export declare class InjectedConnector implements Connector {
    initialised: boolean;
    type: WalletTypes;
    kit: ContractKit;
    account: string | null;
    private onNetworkChangeCallback?;
    private onAddressChangeCallback?;
    constructor(network: Network, defaultType?: WalletTypes);
    initialise(): Promise<this>;
    onNetworkChange(callback: (chainId: number) => void): void;
    onAddressChange(callback: (address: string | null) => void): void;
    close(): void;
}
export declare class MetaMaskConnector extends InjectedConnector {
    constructor(network: Network);
}
export declare class CeloExtensionWalletConnector implements Connector {
    initialised: boolean;
    type: WalletTypes;
    kit: ContractKit;
    account: string | null;
    private onNetworkChangeCallback?;
    constructor(network: Network);
    initialise(): Promise<this>;
    onNetworkChange(callback: (chainId: number) => void): void;
    close(): void;
}
export declare class WalletConnectConnector implements Connector {
    private network;
    readonly autoOpen: boolean;
    readonly getDeeplinkUrl?: ((uri: string) => string) | undefined;
    initialised: boolean;
    type: WalletTypes;
    kit: ContractKit;
    account: string | null;
    private onUriCallback?;
    private onCloseCallback?;
    constructor(network: Network, options: WalletConnectWalletOptions, autoOpen?: boolean, getDeeplinkUrl?: ((uri: string) => string) | undefined);
    onUri(callback: (uri: string) => void): void;
    onClose(callback: () => void): void;
    initialise(): Promise<this>;
    private fetchWalletAddressForAccount;
    close(): Promise<void>;
}
export declare class ValoraConnector implements Connector {
    private network;
    initialised: boolean;
    type: WalletTypes;
    kit: ContractKit;
    wallet: DappKitWallet;
    get account(): string | null;
    constructor(network: Network, dappName: string);
    initialise(): Promise<this>;
    close(): void;
}
//# sourceMappingURL=connectors.d.ts.map