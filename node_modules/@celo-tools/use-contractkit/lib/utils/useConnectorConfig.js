"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useConnectorConfig = void 0;
var react_1 = require("react");
var connectors_1 = require("../connectors");
var constants_1 = require("../constants");
/**
 * Loads previous user configuration from local storage.
 */
var loadPreviousConfig = function () {
    var _a;
    var _b;
    var lastUsedNetworkName = constants_1.Mainnet.name;
    var lastUsedAddress = null;
    var lastUsedWalletType = constants_1.WalletTypes.Unauthenticated;
    var lastUsedWalletArguments = [];
    if (typeof localStorage !== 'undefined') {
        var localLastUsedNetworkName = localStorage.getItem(constants_1.localStorageKeys.lastUsedNetwork);
        if (localLastUsedNetworkName) {
            lastUsedNetworkName = localLastUsedNetworkName;
        }
        var localLastUsedAddress = localStorage.getItem(constants_1.localStorageKeys.lastUsedAddress);
        if (localLastUsedAddress) {
            lastUsedAddress = localLastUsedAddress;
        }
        var localLastUsedWalletType = localStorage.getItem(constants_1.localStorageKeys.lastUsedWalletType);
        if (localLastUsedWalletType) {
            lastUsedWalletType = localLastUsedWalletType;
        }
        var localLastUsedWalletArguments = localStorage.getItem(constants_1.localStorageKeys.lastUsedWalletArguments);
        if (localLastUsedWalletArguments) {
            try {
                lastUsedWalletArguments = JSON.parse(localLastUsedWalletArguments);
            }
            catch (e) {
                lastUsedWalletArguments = [];
            }
        }
    }
    var lastUsedNetwork = (_b = constants_1.DEFAULT_NETWORKS.find(function (n) { return n.name === lastUsedNetworkName; })) !== null && _b !== void 0 ? _b : constants_1.Mainnet;
    var initialConnector;
    if (lastUsedWalletType) {
        try {
            initialConnector = new ((_a = connectors_1.CONNECTOR_TYPES[lastUsedWalletType]).bind.apply(_a, __spreadArray([void 0, lastUsedNetwork], lastUsedWalletArguments)))();
        }
        catch (e) {
            initialConnector = new connectors_1.UnauthenticatedConnector(lastUsedNetwork);
        }
    }
    else {
        initialConnector = new connectors_1.UnauthenticatedConnector(lastUsedNetwork);
    }
    return {
        lastUsedNetworkName: lastUsedNetworkName,
        lastUsedAddress: lastUsedAddress,
        lastUsedWalletType: lastUsedWalletType,
        lastUsedWalletArguments: lastUsedWalletArguments,
        lastUsedNetwork: lastUsedNetwork,
        initialConnector: initialConnector,
    };
};
var useConnectorConfig = function (_a) {
    var _b;
    var networks = _a.networks;
    var _c = react_1.useState(loadPreviousConfig())[0], lastUsedAddress = _c.lastUsedAddress, lastUsedNetworkName = _c.lastUsedNetworkName, initialConnector = _c.initialConnector;
    var _d = react_1.useState(lastUsedAddress), address = _d[0], setAddress = _d[1];
    var initialNetwork = (_b = networks.find(function (n) { return n.name === lastUsedNetworkName; })) !== null && _b !== void 0 ? _b : networks[0];
    if (!initialNetwork) {
        throw new Error('Invalid network configuration');
    }
    var _e = react_1.useState(initialNetwork), network = _e[0], updateNetwork = _e[1];
    var _f = react_1.useState(initialConnector), connector = _f[0], setConnector = _f[1];
    var _g = react_1.useState(null), connectionCallback = _g[0], setConnectionCallback = _g[1];
    // Update address whenever connector kit account changes
    react_1.useEffect(function () {
        var account = connector === null || connector === void 0 ? void 0 : connector.kit.defaultAccount;
        if (account) {
            setAddress(account);
            localStorage.setItem(constants_1.localStorageKeys.lastUsedAddress, account);
        }
    }, [connector === null || connector === void 0 ? void 0 : connector.kit]);
    // Destroys the connector.
    var destroy = react_1.useCallback(function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, connector.close()];
                case 1:
                    _a.sent();
                    localStorage.removeItem(constants_1.localStorageKeys.lastUsedAddress);
                    localStorage.removeItem(constants_1.localStorageKeys.lastUsedWalletType);
                    localStorage.removeItem(constants_1.localStorageKeys.lastUsedWalletArguments);
                    setAddress(null);
                    setConnector(new connectors_1.UnauthenticatedConnector(network));
                    return [2 /*return*/];
            }
        });
    }); }, [network, connector]);
    react_1.useEffect(function () {
        if (localStorage.getItem(constants_1.localStorageKeys.lastUsedNetwork) === network.name) {
            return;
        }
        localStorage.setItem(constants_1.localStorageKeys.lastUsedNetwork, network.name);
        var ConnectorConstructor = connectors_1.CONNECTOR_TYPES[connector.type];
        if (!ConnectorConstructor) {
            return;
        }
        setConnector(function () {
            try {
                var lastUsedWalletArguments = JSON.parse(localStorage.getItem(constants_1.localStorageKeys.lastUsedWalletArguments) || '[]');
                return new (ConnectorConstructor.bind.apply(ConnectorConstructor, __spreadArray([void 0, network], lastUsedWalletArguments)))();
            }
            catch (e) {
                return new ConnectorConstructor(network);
            }
        });
    }, [connector, network]);
    var connect = react_1.useCallback(function () { return __awaiter(void 0, void 0, void 0, function () {
        var connectionResultPromise, connector;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    connectionResultPromise = new Promise(function (resolve) {
                        var connectionResultCallback = function (x) { return resolve(x); };
                        // has to be like this and not like setConnectionCallback(connectionResultCallback)
                        // as React will try to run any function passed to set state
                        setConnectionCallback(function () { return connectionResultCallback; });
                    });
                    return [4 /*yield*/, connectionResultPromise];
                case 1:
                    connector = _a.sent();
                    if (connector === false) {
                        // dismissed
                        setConnectionCallback(null);
                        throw new Error('Connection cancelled');
                    }
                    if (connector.onNetworkChange) {
                        connector.onNetworkChange(function (chainId) {
                            var network = networks === null || networks === void 0 ? void 0 : networks.find(function (n) { return n.chainId === chainId; });
                            network && updateNetwork(network);
                        });
                    }
                    setConnector(connector);
                    setConnectionCallback(null);
                    return [2 /*return*/, connector];
            }
        });
    }); }, [networks]);
    return {
        address: address,
        network: network,
        updateNetwork: updateNetwork,
        connector: connector,
        connectionCallback: connectionCallback,
        connect: connect,
        destroy: destroy,
    };
};
exports.useConnectorConfig = useConnectorConfig;
//# sourceMappingURL=useConnectorConfig.js.map