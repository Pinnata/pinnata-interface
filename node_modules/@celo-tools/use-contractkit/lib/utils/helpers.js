"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadPreviousConfig = void 0;
var connectors_1 = require("../connectors");
var constants_1 = require("../constants");
var loadPreviousConfig = function () {
    var _a;
    var _b;
    var lastUsedNetworkName = constants_1.Mainnet.name;
    var lastUsedAddress = null;
    var lastUsedWalletType = constants_1.WalletTypes.Unauthenticated;
    var lastUsedWalletArguments = [];
    if (typeof localStorage !== 'undefined') {
        var localLastUsedNetworkName = localStorage.getItem(constants_1.localStorageKeys.lastUsedNetwork);
        if (localLastUsedNetworkName) {
            lastUsedNetworkName = localLastUsedNetworkName;
        }
        lastUsedAddress = localStorage.getItem(constants_1.localStorageKeys.lastUsedAddress);
        var localLastUsedWalletType = localStorage.getItem(constants_1.localStorageKeys.lastUsedWalletType);
        if (localLastUsedWalletType && localLastUsedWalletType in constants_1.WalletTypes) {
            lastUsedWalletType = localLastUsedWalletType;
        }
        var localLastUsedWalletArguments = localStorage.getItem(constants_1.localStorageKeys.lastUsedWalletArguments);
        if (localLastUsedWalletArguments) {
            try {
                lastUsedWalletArguments = JSON.parse(localLastUsedWalletArguments);
            }
            catch (e) {
                lastUsedWalletArguments = [];
            }
        }
    }
    var lastUsedNetwork = (_b = constants_1.DEFAULT_NETWORKS.find(function (n) { return n.name === lastUsedNetworkName; })) !== null && _b !== void 0 ? _b : constants_1.Mainnet;
    var initialConnector;
    if (lastUsedWalletType) {
        try {
            initialConnector = new ((_a = connectors_1.CONNECTOR_TYPES[lastUsedWalletType]).bind.apply(_a, __spreadArray([void 0, lastUsedNetwork], lastUsedWalletArguments)))();
        }
        catch (e) {
            initialConnector = new connectors_1.UnauthenticatedConnector(lastUsedNetwork);
        }
    }
    else {
        initialConnector = new connectors_1.UnauthenticatedConnector(lastUsedNetwork);
    }
    return {
        address: lastUsedAddress,
        network: lastUsedNetwork,
        connector: initialConnector,
    };
};
exports.loadPreviousConfig = loadPreviousConfig;
//# sourceMappingURL=helpers.js.map