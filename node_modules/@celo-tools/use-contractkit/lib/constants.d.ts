import React from 'react';
import { ChainId, Provider } from './types';
export declare const localStorageKeys: {
    lastUsedAddress: string;
    lastUsedNetwork: string;
    lastUsedWalletType: string;
    lastUsedWalletArguments: string;
};
export declare enum SupportedProviders {
    CeloExtensionWallet = "Celo Extension Wallet",
    CeloTerminal = "Celo Terminal",
    CeloWallet = "Celo Wallet",
    Injected = "Injected",
    Ledger = "Ledger",
    MetaMask = "MetaMask",
    PrivateKey = "Private key",
    Valora = "Valora",
    WalletConnect = "WalletConnect"
}
export declare const PROVIDERS: {
    [K in SupportedProviders]: Provider;
};
export declare const images: {
    readonly Valora: React.FC<React.SVGProps<SVGSVGElement>>;
    readonly MetaMask: React.FC<React.SVGProps<SVGSVGElement>>;
    readonly WalletConnect: React.FC<React.SVGProps<SVGSVGElement>>;
    readonly Ledger: React.FC<React.SVGProps<SVGSVGElement>>;
    readonly "Celo Wallet": React.FC<React.SVGProps<SVGSVGElement>>;
    readonly "Celo Terminal": React.FC<React.SVGProps<SVGSVGElement>>;
    readonly "Celo Extension Wallet": React.FC<React.SVGProps<SVGSVGElement>>;
    readonly "Private key": React.FC<React.SVGProps<SVGSVGElement>>;
};
export declare enum NetworkNames {
    Alfajores = "Alfajores",
    Baklava = "Baklava",
    Mainnet = "Mainnet"
}
export declare const Alfajores: {
    readonly name: NetworkNames.Alfajores;
    readonly rpcUrl: "https://alfajores-forno.celo-testnet.org";
    readonly graphQl: "https://alfajores-blockscout.celo-testnet.org/graphiql";
    readonly explorer: "https://alfajores-blockscout.celo-testnet.org";
    readonly chainId: ChainId.Alfajores;
};
export declare const Baklava: {
    readonly name: NetworkNames.Baklava;
    readonly rpcUrl: "https://baklava-forno.celo-testnet.org";
    readonly graphQl: "https://baklava-blockscout.celo-testnet.org/graphiql";
    readonly explorer: "https://baklava-blockscout.celo-testnet.org";
    readonly chainId: ChainId.Baklava;
};
export declare const Mainnet: {
    readonly name: NetworkNames.Mainnet;
    readonly rpcUrl: "https://forno.celo.org";
    readonly graphQl: "https://explorer.celo.org/graphiql";
    readonly explorer: "https://explorer.celo.org";
    readonly chainId: ChainId.Mainnet;
};
export declare enum WalletTypes {
    Valora = "Valora",
    MetaMask = "MetaMask",
    WalletConnect = "WalletConnect",
    CeloWallet = "CeloWallet",
    CeloTerminal = "CeloTerminal",
    CeloExtensionWallet = "CeloExtensionWallet",
    Ledger = "Ledger",
    Injected = "Injected",
    PrivateKey = "PrivateKey",
    Unauthenticated = "Unauthenticated"
}
/**
 * Gets the provider associated with a wallet type.
 * @param wallet
 * @returns
 */
export declare const getProviderForWallet: (wallet: WalletTypes) => SupportedProviders | null;
/**
 * Default networks to connect to.
 */
export declare const DEFAULT_NETWORKS: ({
    readonly name: NetworkNames.Alfajores;
    readonly rpcUrl: "https://alfajores-forno.celo-testnet.org";
    readonly graphQl: "https://alfajores-blockscout.celo-testnet.org/graphiql";
    readonly explorer: "https://alfajores-blockscout.celo-testnet.org";
    readonly chainId: ChainId.Alfajores;
} | {
    readonly name: NetworkNames.Mainnet;
    readonly rpcUrl: "https://forno.celo.org";
    readonly graphQl: "https://explorer.celo.org/graphiql";
    readonly explorer: "https://explorer.celo.org";
    readonly chainId: ChainId.Mainnet;
})[];
/**
 * Chain ID of a default network.
 */
export declare type DefaultChainId = ChainId.Mainnet | ChainId.Alfajores;
//# sourceMappingURL=constants.d.ts.map