"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.contractKitReducer = void 0;
var connectors_1 = require("./connectors");
var constants_1 = require("./constants");
function contractKitReducer(state, action) {
    var _a;
    var _b;
    switch (action.type) {
        case 'decrementPendingActionCount':
            return __assign(__assign({}, state), { pendingActionCount: state.pendingActionCount - 1 });
        case 'setAddress':
            if (action.payload) {
                localStorage.setItem(constants_1.localStorageKeys.lastUsedAddress, action.payload);
            }
            else {
                localStorage.removeItem(constants_1.localStorageKeys.lastUsedAddress);
            }
            return __assign(__assign({}, state), { address: action.payload });
        case 'setNetwork':
            if (action.payload.name !== state.network.name) {
                var ConnectorConstructor = connectors_1.CONNECTOR_TYPES[state.connector.type];
                var connectorArgs = JSON.parse(localStorage.getItem(constants_1.localStorageKeys.lastUsedWalletArguments) || '[]');
                var connector = new (ConnectorConstructor.bind.apply(ConnectorConstructor, __spreadArray([void 0, action.payload], connectorArgs)))();
                return __assign(__assign({}, state), { network: action.payload, connector: connector });
            }
            else {
                return state;
            }
        case 'setConnector':
            localStorage.removeItem(constants_1.localStorageKeys.lastUsedAddress);
            return __assign(__assign({}, state), { connector: action.payload, connectorInitError: null, address: null });
        case 'initialisedConnector': {
            var address = (_b = action.payload.kit.defaultAccount) !== null && _b !== void 0 ? _b : null;
            if (address) {
                localStorage.setItem(constants_1.localStorageKeys.lastUsedAddress, address);
            }
            return __assign(__assign({}, state), { connector: action.payload, address: address });
        }
        case 'destroy':
            localStorage.removeItem(constants_1.localStorageKeys.lastUsedAddress);
            localStorage.removeItem(constants_1.localStorageKeys.lastUsedWalletType);
            localStorage.removeItem(constants_1.localStorageKeys.lastUsedWalletArguments);
            return __assign(__assign({}, state), { address: null, connector: new connectors_1.UnauthenticatedConnector(state.network) });
        default:
            // This checks to see if the action type is `set<fieldname>`
            if (action.type.slice(0, 3) === 'set') {
                // This builds the proper camel-case field name from the action type
                // e.g., setFieldName -> fieldName
                var key = "" + action.type.charAt(3).toLowerCase() + action.type.slice(4);
                return __assign(__assign({}, state), (_a = {}, _a[key] = action.payload, _a));
            }
            else {
                console.error(new Error("Unrecognized action type " + action.type + " in contractKitReducer"));
            }
            return state;
    }
}
exports.contractKitReducer = contractKitReducer;
//# sourceMappingURL=contract-kit-reducer.js.map