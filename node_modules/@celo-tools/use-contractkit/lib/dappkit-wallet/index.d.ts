/// <reference types="node" />
import { CeloTx, EncodedTransaction, Signer } from '@celo/connect';
import { ContractKit } from '@celo/contractkit';
import { EIP712TypedData } from '@celo/utils/lib/sign-typed-data-utils';
import { RemoteWallet } from '@celo/wallet-remote';
export declare const dappKitConfigKey = "use-contractkit/dappkitconfig";
export declare class DappKitSigner implements Signer {
    protected account: string;
    constructor(account: string);
    signTransaction(): Promise<{
        v: number;
        r: Buffer;
        s: Buffer;
    }>;
    signTypedData(_: EIP712TypedData): Promise<{
        v: number;
        r: Buffer;
        s: Buffer;
    }>;
    signPersonalMessage(_data: string): Promise<{
        v: number;
        r: Buffer;
        s: Buffer;
    }>;
    getNativeKey: () => string;
    decrypt(_ciphertext: Buffer): Promise<Buffer>;
    computeSharedSecret(_publicKey: string): Promise<Buffer>;
}
export declare class DappKitWallet extends RemoteWallet<DappKitSigner> {
    protected dappName: string;
    private kit?;
    constructor(dappName: string);
    loadAccountSigners(): Promise<Map<string, DappKitSigner>>;
    setKit(kit: ContractKit): void;
    /**
     * Override hasAccount for the DappKit wallet as we
     * want to always send users to Valora
     */
    hasAccount: () => boolean;
    /**
     * Gets the signer based on the 'from' field in the tx body
     * @param txParams Transaction to sign
     * @dev overrides WalletBase.signTransaction
     */
    signTransaction(txParams: CeloTx): Promise<EncodedTransaction>;
}
//# sourceMappingURL=index.d.ts.map