"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decrypt = exports.encrypt = exports.sha256 = exports.deriveSharedKey = exports.generateRandomBytes32 = exports.generateKeyPair = void 0;
const tslib_1 = require("tslib");
const ecies25519 = tslib_1.__importStar(require("ecies-25519"));
const encUtils = tslib_1.__importStar(require("enc-utils"));
function generateKeyPair() {
    const keyPair = ecies25519.generateKeyPair();
    return {
        privateKey: encUtils.arrayToHex(keyPair.privateKey),
        publicKey: encUtils.arrayToHex(keyPair.publicKey),
    };
}
exports.generateKeyPair = generateKeyPair;
function generateRandomBytes32() {
    return encUtils.arrayToHex(ecies25519.randomBytes(32));
}
exports.generateRandomBytes32 = generateRandomBytes32;
function deriveSharedKey(privateKeyA, publicKeyB) {
    const sharedKey = ecies25519.derive(encUtils.hexToArray(privateKeyA), encUtils.hexToArray(publicKeyB));
    return encUtils.arrayToHex(sharedKey);
}
exports.deriveSharedKey = deriveSharedKey;
function sha256(msg) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const hash = yield ecies25519.sha256(encUtils.hexToArray(msg));
        return encUtils.arrayToHex(hash);
    });
}
exports.sha256 = sha256;
function encrypt(params) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const msg = encUtils.utf8ToArray(params.message);
        const sharedKey = encUtils.hexToArray(params.sharedKey);
        const publicKey = encUtils.hexToArray(params.publicKey);
        const iv = typeof params.iv !== "undefined" ? encUtils.hexToArray(params.iv) : undefined;
        const encrypted = yield ecies25519.encryptWithSharedKey(msg, sharedKey, publicKey, iv);
        return encUtils.arrayToHex(encrypted);
    });
}
exports.encrypt = encrypt;
function decrypt(params) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const encrypted = encUtils.hexToArray(params.encrypted);
        const sharedKey = encUtils.hexToArray(params.sharedKey);
        const msg = yield ecies25519.decryptWithSharedKey(encrypted, sharedKey);
        return encUtils.arrayToUtf8(msg);
    });
}
exports.decrypt = decrypt;
//# sourceMappingURL=crypto.js.map