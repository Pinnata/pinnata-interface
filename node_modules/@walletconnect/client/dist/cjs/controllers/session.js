"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Session = void 0;
const tslib_1 = require("tslib");
const events_1 = require("events");
const pino_utils_1 = require("@pedrouid/pino-utils");
const types_1 = require("@walletconnect/types");
const utils_1 = require("@walletconnect/utils");
const utils_2 = require("@json-rpc-tools/utils");
const subscription_1 = require("./subscription");
const history_1 = require("./history");
const constants_1 = require("../constants");
class Session extends types_1.ISession {
    constructor(client, logger) {
        super(client, logger);
        this.client = client;
        this.logger = logger;
        this.events = new events_1.EventEmitter();
        this.context = constants_1.SESSION_CONTEXT;
        this.logger = pino_utils_1.generateChildLogger(logger, this.context);
        this.pending = new subscription_1.Subscription(client, this.logger, constants_1.SESSION_STATUS.pending, true);
        this.settled = new subscription_1.Subscription(client, this.logger, constants_1.SESSION_STATUS.settled, true);
        this.history = new history_1.JsonRpcHistory(client, this.logger);
        this.registerEventListeners();
    }
    init() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.logger.trace(`Initialized`);
            yield this.pending.init();
            yield this.settled.init();
            yield this.history.init();
        });
    }
    get(topic) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return this.settled.get(topic);
        });
    }
    ping(topic, timeout) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const request = { method: constants_1.SESSION_JSONRPC.ping, params: {} };
            return this.request({ topic, request, timeout: timeout || constants_1.THIRTY_SECONDS * 1000 });
        });
    }
    send(topic, payload, chainId) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const session = yield this.settled.get(topic);
            const encryptKeys = {
                sharedKey: session.sharedKey,
                publicKey: session.self.publicKey,
            };
            if (utils_2.isJsonRpcRequest(payload)) {
                if (!Object.values(constants_1.SESSION_JSONRPC).includes(payload.method)) {
                    if (!session.permissions.jsonrpc.methods.includes(payload.method)) {
                        const error = utils_1.getError(utils_1.ERROR.UNAUTHORIZED_JSON_RPC_METHOD, {
                            method: payload.method,
                        });
                        this.logger.error(error.message);
                        throw new Error(error.message);
                    }
                    if (typeof chainId !== "undefined" &&
                        !session.permissions.blockchain.chains.includes(chainId)) {
                        const error = utils_1.getError(utils_1.ERROR.UNAUTHORIZED_TARGET_CHAIN, { chainId });
                        this.logger.error(error.message);
                        throw new Error(error.message);
                    }
                    yield this.history.set(topic, payload, chainId);
                    payload = utils_2.formatJsonRpcRequest(constants_1.SESSION_JSONRPC.payload, {
                        chainId,
                        request: { method: payload.method, params: payload.params },
                    }, payload.id);
                }
            }
            else {
                yield this.history.update(topic, payload);
            }
            yield this.client.relayer.publish(session.topic, payload, {
                relay: session.relay,
                encryptKeys,
            });
        });
    }
    get length() {
        return this.settled.length;
    }
    get topics() {
        return this.settled.topics;
    }
    get values() {
        return this.settled.values.map(x => x.data);
    }
    create(params) {
        return new Promise((resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Create Session`);
            this.logger.trace({ type: "method", method: "create", params });
            const maxTimeout = (params === null || params === void 0 ? void 0 : params.timeout) || constants_1.FIVE_MINUTES * 1000;
            const timeout = setTimeout(() => {
                const error = utils_1.getError(utils_1.ERROR.SETTLE_TIMEOUT, {
                    context: this.context,
                    timeout: maxTimeout,
                });
                this.logger.error(error.message);
                reject(error.message);
            }, maxTimeout);
            let pending;
            try {
                pending = yield this.propose(params);
            }
            catch (e) {
                clearTimeout(timeout);
                return reject(e);
            }
            this.pending.on(constants_1.SUBSCRIPTION_EVENTS.updated, (updatedEvent) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                if (pending.topic !== updatedEvent.data.topic)
                    return;
                if (utils_1.isSessionResponded(updatedEvent.data)) {
                    const outcome = updatedEvent.data.outcome;
                    clearTimeout(timeout);
                    if (utils_1.isSessionFailed(outcome)) {
                        try {
                            yield this.pending.delete(pending.topic, outcome.reason);
                        }
                        catch (e) {
                            return reject(e);
                        }
                        reject(new Error(outcome.reason.message));
                    }
                    else {
                        try {
                            const session = yield this.settled.get(outcome.topic);
                            const reason = utils_1.getError(utils_1.ERROR.SETTLED, { context: this.context });
                            yield this.pending.delete(pending.topic, reason);
                            resolve(session);
                        }
                        catch (e) {
                            return reject(e);
                        }
                    }
                }
            }));
        }));
    }
    respond(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Respond Session`);
            this.logger.trace({ type: "method", method: "respond", params });
            const paramsValidation = utils_1.validateSessionRespondParams(params);
            if (utils_1.isValidationInvalid(paramsValidation)) {
                this.logger.error(paramsValidation.error.message);
                throw new Error(paramsValidation.error.message);
            }
            const { approved, proposal, response } = params;
            const { relay } = proposal;
            const self = utils_1.generateKeyPair();
            const pairing = yield this.client.pairing.get(proposal.signal.params.topic);
            const decryptKeys = {
                sharedKey: pairing.sharedKey,
            };
            if (approved) {
                try {
                    const responder = {
                        publicKey: self.publicKey,
                        metadata: response.metadata,
                    };
                    const expiry = Date.now() + proposal.ttl * 1000;
                    const state = {
                        accounts: params.response.state.accounts,
                    };
                    const controller = proposal.proposer.controller
                        ? { publicKey: proposal.proposer.publicKey }
                        : { publicKey: self.publicKey };
                    const session = yield this.settle({
                        relay,
                        self,
                        peer: proposal.proposer,
                        permissions: Object.assign(Object.assign({}, proposal.permissions), { controller }),
                        ttl: proposal.ttl,
                        expiry,
                        state,
                    });
                    const outcome = {
                        topic: session.topic,
                        relay: session.relay,
                        state: session.state,
                        responder,
                        expiry,
                    };
                    const pending = {
                        status: constants_1.SESSION_STATUS.responded,
                        topic: proposal.topic,
                        relay: proposal.relay,
                        self,
                        proposal,
                        outcome,
                    };
                    yield this.pending.set(pending.topic, pending, { relay: pending.relay, decryptKeys });
                    return pending;
                }
                catch (e) {
                    const reason = utils_1.getError(utils_1.ERROR.GENERIC, { message: e.message });
                    const outcome = { reason };
                    const pending = {
                        status: constants_1.SESSION_STATUS.responded,
                        topic: proposal.topic,
                        relay: proposal.relay,
                        self,
                        proposal,
                        outcome,
                    };
                    yield this.pending.set(pending.topic, pending, { relay: pending.relay, decryptKeys });
                    return pending;
                }
            }
            else {
                const defaultReason = utils_1.getError(utils_1.ERROR.NOT_APPROVED, { context: this.context });
                const outcome = { reason: (params === null || params === void 0 ? void 0 : params.reason) || defaultReason };
                const pending = {
                    status: constants_1.SESSION_STATUS.responded,
                    topic: proposal.topic,
                    relay: proposal.relay,
                    self,
                    proposal,
                    outcome,
                };
                yield this.pending.set(pending.topic, pending, { relay: pending.relay, decryptKeys });
                return pending;
            }
        });
    }
    upgrade(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Upgrade Session`);
            this.logger.trace({ type: "method", method: "upgrade", params });
            const session = yield this.settled.get(params.topic);
            const participant = { publicKey: session.self.publicKey };
            const upgrade = yield this.handleUpgrade(params.topic, params, participant);
            const request = utils_2.formatJsonRpcRequest(constants_1.SESSION_JSONRPC.upgrade, upgrade);
            yield this.send(session.topic, request);
            return session;
        });
    }
    update(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Update Session`);
            this.logger.trace({ type: "method", method: "update", params });
            const session = yield this.settled.get(params.topic);
            const participant = { publicKey: session.self.publicKey };
            const update = yield this.handleUpdate(params.topic, params, participant);
            const request = utils_2.formatJsonRpcRequest(constants_1.SESSION_JSONRPC.update, update);
            yield this.send(session.topic, request);
            return session;
        });
    }
    request(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {
                const request = utils_2.formatJsonRpcRequest(params.request.method, params.request.params);
                const maxTimeout = (params === null || params === void 0 ? void 0 : params.timeout) || constants_1.FIVE_MINUTES * 1000;
                const timeout = setTimeout(() => {
                    const error = utils_1.getError(utils_1.ERROR.JSONRPC_REQUEST_TIMEOUT, {
                        method: request.method,
                        timeout: maxTimeout,
                    });
                    this.logger.error(error.message);
                    reject(error.message);
                }, maxTimeout);
                this.events.on(constants_1.SESSION_EVENTS.response, (responseEvent) => {
                    if (params.topic !== responseEvent.topic)
                        return;
                    const response = responseEvent.response;
                    if (response.id !== request.id)
                        return;
                    clearTimeout(timeout);
                    if (utils_2.isJsonRpcError(response)) {
                        const errorMessage = response.error.message;
                        this.logger.error(errorMessage);
                        return reject(new Error(errorMessage));
                    }
                    return resolve(response.result);
                });
                try {
                    yield this.send(params.topic, request, params.chainId);
                }
                catch (e) {
                    clearTimeout(timeout);
                    return reject(e);
                }
            }));
        });
    }
    delete(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Delete Session`);
            this.logger.trace({ type: "method", method: "delete", params });
            this.settled.delete(params.topic, params.reason);
        });
    }
    notify(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const session = yield this.settled.get(params.topic);
            if (session.self.publicKey !== session.permissions.controller.publicKey &&
                !session.permissions.notifications.types.includes(params.type)) {
                const error = utils_1.getError(utils_1.ERROR.UNAUTHORIZED_NOTIFICATION_TYPE, { type: params.type });
                this.logger.error(error.message);
                throw new Error(error.message);
            }
            const notification = { type: params.type, data: params.data };
            const request = utils_2.formatJsonRpcRequest(constants_1.SESSION_JSONRPC.notification, notification);
            yield this.send(params.topic, request);
        });
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.once(event, listener);
    }
    off(event, listener) {
        this.events.off(event, listener);
    }
    removeListener(event, listener) {
        this.events.removeListener(event, listener);
    }
    propose(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Propose Session`);
            this.logger.trace({ type: "method", method: "propose", params });
            const paramsValidation = utils_1.validateSessionProposeParams(params);
            if (utils_1.isValidationInvalid(paramsValidation)) {
                this.logger.error(paramsValidation.error.message);
                throw new Error(paramsValidation.error.message);
            }
            if (params.signal.method !== constants_1.SESSION_SIGNAL_METHOD_PAIRING) {
                throw new Error(`Session proposal signal unsupported`);
            }
            const pairing = yield this.client.pairing.settled.get(params.signal.params.topic);
            const signal = {
                method: constants_1.SESSION_SIGNAL_METHOD_PAIRING,
                params: { topic: pairing.topic },
            };
            const decryptKeys = {
                sharedKey: pairing.sharedKey,
            };
            const topic = utils_1.generateRandomBytes32();
            const self = utils_1.generateKeyPair();
            const proposer = {
                publicKey: self.publicKey,
                metadata: params.metadata,
                controller: this.client.controller,
            };
            const proposal = {
                topic,
                relay: params.relay,
                proposer,
                signal,
                permissions: params.permissions,
                ttl: params.ttl || constants_1.SESSION_DEFAULT_TTL,
            };
            const pending = {
                status: constants_1.SESSION_STATUS.proposed,
                topic: proposal.topic,
                relay: proposal.relay,
                self,
                proposal,
            };
            yield this.pending.set(pending.topic, pending, { relay: pending.relay, decryptKeys });
            return pending;
        });
    }
    settle(params) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.logger.info(`Settle Session`);
            this.logger.trace({ type: "method", method: "settle", params });
            const sharedKey = utils_1.deriveSharedKey(params.self.privateKey, params.peer.publicKey);
            const topic = yield utils_1.sha256(sharedKey);
            const session = {
                topic,
                relay: params.relay,
                sharedKey,
                self: params.self,
                peer: params.peer,
                permissions: params.permissions,
                expiry: params.expiry,
                state: params.state,
            };
            const decryptKeys = {
                sharedKey,
            };
            yield this.settled.set(session.topic, session, {
                relay: session.relay,
                expiry: session.expiry,
                decryptKeys,
            });
            return session;
        });
    }
    onResponse(payloadEvent) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { topic, payload } = payloadEvent;
            this.logger.info(`Receiving Session response`);
            this.logger.trace({ type: "method", method: "onResponse", topic, payload });
            const request = payload;
            const pending = yield this.pending.get(topic);
            const pairing = yield this.client.pairing.get(pending.proposal.signal.params.topic);
            const encryptKeys = {
                sharedKey: pairing.sharedKey,
                publicKey: pairing.self.publicKey,
            };
            let error;
            if (!utils_1.isSessionFailed(request.params)) {
                try {
                    const controller = pending.proposal.proposer.controller
                        ? { publicKey: pending.proposal.proposer.publicKey }
                        : { publicKey: request.params.responder.publicKey };
                    const session = yield this.settle({
                        relay: pending.relay,
                        self: pending.self,
                        peer: request.params.responder,
                        permissions: Object.assign(Object.assign({}, pending.proposal.permissions), { controller }),
                        ttl: pending.proposal.ttl,
                        expiry: request.params.expiry,
                        state: request.params.state,
                    });
                    yield this.pending.update(topic, {
                        status: constants_1.SESSION_STATUS.responded,
                        outcome: {
                            topic: session.topic,
                            relay: session.relay,
                            responder: session.peer,
                            expiry: session.expiry,
                            state: session.state,
                        },
                    });
                }
                catch (e) {
                    this.logger.error(e);
                    error = utils_1.getError(utils_1.ERROR.GENERIC, { message: e.message });
                    yield this.pending.update(topic, {
                        status: constants_1.SESSION_STATUS.responded,
                        outcome: { reason: error },
                    });
                }
                const response = typeof error === "undefined"
                    ? utils_2.formatJsonRpcResult(request.id, true)
                    : utils_2.formatJsonRpcError(request.id, error);
                yield this.client.relayer.publish(pending.topic, response, {
                    relay: pending.relay,
                    encryptKeys,
                });
            }
            else {
                this.logger.error(request.params.reason);
                yield this.pending.update(topic, {
                    status: constants_1.SESSION_STATUS.responded,
                    outcome: { reason: request.params.reason },
                });
            }
        });
    }
    onAcknowledge(payloadEvent) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { topic, payload } = payloadEvent;
            this.logger.info(`Receiving Session acknowledge`);
            this.logger.trace({ type: "method", method: "onAcknowledge", topic, payload });
            const response = payload;
            const pending = yield this.pending.get(topic);
            if (!utils_1.isSessionResponded(pending))
                return;
            if (utils_2.isJsonRpcError(response) && !utils_1.isSessionFailed(pending.outcome)) {
                yield this.settled.delete(pending.outcome.topic, response.error);
            }
            const reason = utils_1.getError(utils_1.ERROR.RESPONSE_ACKNOWLEDGED, { context: this.context });
            yield this.pending.delete(topic, reason);
        });
    }
    onMessage(payloadEvent) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { topic, payload } = payloadEvent;
            this.logger.debug(`Receiving Session message`);
            this.logger.trace({ type: "method", method: "onMessage", topic, payload });
            if (utils_2.isJsonRpcRequest(payload)) {
                const request = payload;
                const session = yield this.settled.get(payloadEvent.topic);
                let error;
                switch (request.method) {
                    case constants_1.SESSION_JSONRPC.payload:
                        yield this.onPayload(payloadEvent);
                        break;
                    case constants_1.SESSION_JSONRPC.update:
                        yield this.onUpdate(payloadEvent);
                        break;
                    case constants_1.SESSION_JSONRPC.upgrade:
                        yield this.onUpgrade(payloadEvent);
                        break;
                    case constants_1.SESSION_JSONRPC.notification:
                        yield this.onNotification(payloadEvent);
                        break;
                    case constants_1.SESSION_JSONRPC.delete:
                        yield this.settled.delete(session.topic, request.params.reason);
                        break;
                    case constants_1.SESSION_JSONRPC.ping:
                        yield this.send(session.topic, utils_2.formatJsonRpcResult(request.id, false));
                        break;
                    default:
                        error = utils_1.getError(utils_1.ERROR.UNKNOWN_JSONRPC_METHOD, { method: request.method });
                        this.logger.error(error.message);
                        yield this.send(session.topic, utils_2.formatJsonRpcError(request.id, error));
                        break;
                }
            }
            else {
                this.onPayloadEvent(payloadEvent);
            }
        });
    }
    onPayload(payloadEvent) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { topic, payload } = payloadEvent;
            if (utils_2.isJsonRpcRequest(payload)) {
                const { id, params } = payload;
                const request = utils_2.formatJsonRpcRequest(params.request.method, params.request.params, id);
                const session = yield this.settled.get(topic);
                if (!session.permissions.jsonrpc.methods.includes(request.method)) {
                    const error = utils_1.getError(utils_1.ERROR.UNAUTHORIZED_JSON_RPC_METHOD, {
                        method: request.method,
                    });
                    this.logger.error(error.message);
                    throw new Error(error.message);
                }
                const sessionPayloadEvent = {
                    topic,
                    payload: request,
                    chainId: params.chainId,
                };
                this.logger.debug(`Receiving Session payload`);
                this.logger.trace(Object.assign({ type: "method", method: "onPayload" }, sessionPayloadEvent));
                this.onPayloadEvent(sessionPayloadEvent);
            }
            else {
                const sessionPayloadEvent = {
                    topic,
                    payload,
                };
                this.logger.debug(`Receiving Session payload`);
                this.logger.trace(Object.assign({ type: "method", method: "onPayload" }, sessionPayloadEvent));
                this.onPayloadEvent(sessionPayloadEvent);
            }
        });
    }
    onUpdate(payloadEvent) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { topic, payload } = payloadEvent;
            this.logger.debug(`Receiving Session update`);
            this.logger.trace({ type: "method", method: "onUpdate", topic, payload });
            const request = payloadEvent.payload;
            const session = yield this.settled.get(payloadEvent.topic);
            try {
                const participant = { publicKey: session.peer.publicKey };
                yield this.handleUpdate(topic, request.params, participant);
                const response = utils_2.formatJsonRpcResult(request.id, true);
                yield this.send(session.topic, response);
            }
            catch (e) {
                this.logger.error(e);
                const response = utils_2.formatJsonRpcError(request.id, e.message);
                yield this.send(session.topic, response);
            }
        });
    }
    onUpgrade(payloadEvent) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { topic, payload } = payloadEvent;
            this.logger.debug(`Receiving Session upgrade`);
            this.logger.trace({ type: "method", method: "onUpgrade", topic, payload });
            const request = payloadEvent.payload;
            const session = yield this.settled.get(payloadEvent.topic);
            try {
                const participant = { publicKey: session.peer.publicKey };
                yield this.handleUpgrade(topic, request.params, participant);
                const response = utils_2.formatJsonRpcResult(request.id, true);
                yield this.send(session.topic, response);
            }
            catch (e) {
                this.logger.error(e);
                const response = utils_2.formatJsonRpcError(request.id, e.message);
                yield this.send(session.topic, response);
            }
        });
    }
    handleUpdate(topic, params, participant) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const session = yield this.settled.get(topic);
            let update;
            if (typeof params.state !== "undefined") {
                const state = session.state;
                if (participant.publicKey !== session.permissions.controller.publicKey) {
                    const error = utils_1.getError(utils_1.ERROR.UNAUTHORIZED_UPDATE_REQUEST, { context: this.context });
                    this.logger.error(error.message);
                    throw new Error(error.message);
                }
                state.accounts = params.state.accounts || state.accounts;
                update = { state };
            }
            else {
                const error = utils_1.getError(utils_1.ERROR.INVALID_UPDATE_REQUEST, { context: this.context });
                this.logger.error(error.message);
                throw new Error(error.message);
            }
            yield this.settled.update(session.topic, session);
            return update;
        });
    }
    handleUpgrade(topic, params, participant) {
        var _a, _b, _c, _d;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const session = yield this.settled.get(topic);
            let upgrade = { permissions: {} };
            if (participant.publicKey !== session.permissions.controller.publicKey) {
                const error = utils_1.getError(utils_1.ERROR.UNAUTHORIZED_UPGRADE_REQUEST, { context: this.context });
                this.logger.error(error.message);
                throw new Error(error.message);
            }
            const permissions = {
                blockchain: {
                    chains: [
                        ...session.permissions.blockchain.chains,
                        ...(((_a = params.permissions.blockchain) === null || _a === void 0 ? void 0 : _a.chains) || []),
                    ],
                },
                jsonrpc: {
                    methods: [
                        ...session.permissions.jsonrpc.methods,
                        ...(((_b = params.permissions.jsonrpc) === null || _b === void 0 ? void 0 : _b.methods) || []),
                    ],
                },
                notifications: {
                    types: [
                        ...(_c = session.permissions.notifications) === null || _c === void 0 ? void 0 : _c.types,
                        ...(((_d = params.permissions.notifications) === null || _d === void 0 ? void 0 : _d.types) || []),
                    ],
                },
            };
            upgrade = { permissions };
            session.permissions = Object.assign(Object.assign({}, permissions), { controller: session.permissions.controller });
            yield this.settled.update(session.topic, session);
            return upgrade;
        });
    }
    onNotification(event) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const notification = event.payload.params;
            const notificationEvent = {
                topic: event.topic,
                type: notification.type,
                data: notification.data,
            };
            this.logger.info(`Emitting ${constants_1.SESSION_EVENTS.notification}`);
            this.logger.debug({ type: "event", event: constants_1.SESSION_EVENTS.notification, notificationEvent });
            this.events.emit(constants_1.SESSION_EVENTS.notification, notificationEvent);
        });
    }
    shouldIgnorePayloadEvent(payloadEvent) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { topic, payload } = payloadEvent;
            if (!this.settled.subscriptions.has(topic))
                return true;
            let exists = false;
            try {
                exists = yield this.history.exists(topic, payload.id);
            }
            catch (e) {
            }
            return exists;
        });
    }
    onPayloadEvent(payloadEvent) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { topic, payload, chainId } = payloadEvent;
            if (utils_2.isJsonRpcRequest(payload)) {
                if (yield this.shouldIgnorePayloadEvent(payloadEvent))
                    return;
                yield this.history.set(topic, payload, chainId);
            }
            else {
                yield this.history.update(topic, payload);
            }
            if (utils_2.isJsonRpcRequest(payload)) {
                const requestEvent = { topic, request: payload, chainId };
                this.logger.info(`Emitting ${constants_1.SESSION_EVENTS.request}`);
                this.logger.debug({ type: "event", event: constants_1.SESSION_EVENTS.request, data: requestEvent });
                this.events.emit(constants_1.SESSION_EVENTS.request, requestEvent);
            }
            else {
                const responseEvent = { topic, response: payload, chainId };
                this.logger.info(`Emitting ${constants_1.SESSION_EVENTS.response}`);
                this.logger.debug({ type: "event", event: constants_1.SESSION_EVENTS.response, data: responseEvent });
                this.events.emit(constants_1.SESSION_EVENTS.response, responseEvent);
            }
        });
    }
    onPendingPayloadEvent(event) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (utils_2.isJsonRpcRequest(event.payload)) {
                switch (event.payload.method) {
                    case constants_1.SESSION_JSONRPC.approve:
                    case constants_1.SESSION_JSONRPC.reject:
                        this.onResponse(event);
                        break;
                    default:
                        break;
                }
            }
            else {
                this.onAcknowledge(event);
            }
        });
    }
    onPendingStatusEvent(event) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const pending = event.data;
            if (utils_1.isSessionResponded(pending)) {
                this.logger.info(`Emitting ${constants_1.SESSION_EVENTS.responded}`);
                this.logger.debug({ type: "event", event: constants_1.SESSION_EVENTS.responded, data: pending });
                this.events.emit(constants_1.SESSION_EVENTS.responded, pending);
                if (!utils_1.isSubscriptionUpdatedEvent(event)) {
                    const pairing = yield this.client.pairing.get(pending.proposal.signal.params.topic);
                    const encryptKeys = {
                        sharedKey: pairing.sharedKey,
                        publicKey: pairing.self.publicKey,
                    };
                    const method = !utils_1.isSessionFailed(pending.outcome)
                        ? constants_1.SESSION_JSONRPC.approve
                        : constants_1.SESSION_JSONRPC.reject;
                    const request = utils_2.formatJsonRpcRequest(method, pending.outcome);
                    yield this.client.relayer.publish(pending.topic, request, {
                        relay: pending.relay,
                        encryptKeys,
                    });
                }
            }
            else {
                this.logger.info(`Emitting ${constants_1.SESSION_EVENTS.proposed}`);
                this.logger.debug({ type: "event", event: constants_1.SESSION_EVENTS.proposed, data: pending });
                this.events.emit(constants_1.SESSION_EVENTS.proposed, pending);
                const request = utils_2.formatJsonRpcRequest(constants_1.SESSION_JSONRPC.propose, pending.proposal);
                yield this.client.pairing.send(pending.proposal.signal.params.topic, request);
            }
        });
    }
    registerEventListeners() {
        this.pending.on(constants_1.SUBSCRIPTION_EVENTS.payload, (payloadEvent) => this.onPendingPayloadEvent(payloadEvent));
        this.pending.on(constants_1.SUBSCRIPTION_EVENTS.created, (createdEvent) => this.onPendingStatusEvent(createdEvent));
        this.pending.on(constants_1.SUBSCRIPTION_EVENTS.updated, (updatedEvent) => this.onPendingStatusEvent(updatedEvent));
        this.settled.on(constants_1.SUBSCRIPTION_EVENTS.payload, (payloadEvent) => this.onMessage(payloadEvent));
        this.settled.on(constants_1.SUBSCRIPTION_EVENTS.created, (createdEvent) => {
            const { data: session } = createdEvent;
            this.logger.info(`Emitting ${constants_1.SESSION_EVENTS.settled}`);
            this.logger.debug({ type: "event", event: constants_1.SESSION_EVENTS.settled, data: session });
            this.events.emit(constants_1.SESSION_EVENTS.settled, session);
        });
        this.settled.on(constants_1.SUBSCRIPTION_EVENTS.updated, (updatedEvent) => {
            const { data: session, update } = updatedEvent;
            this.logger.info(`Emitting ${constants_1.SESSION_EVENTS.updated}`);
            this.logger.debug({ type: "event", event: constants_1.SESSION_EVENTS.updated, data: session, update });
            this.events.emit(constants_1.SESSION_EVENTS.updated, session, update);
        });
        this.settled.on(constants_1.SUBSCRIPTION_EVENTS.deleted, (deletedEvent) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { data: session, reason } = deletedEvent;
            this.logger.info(`Emitting ${constants_1.SESSION_EVENTS.deleted}`);
            this.logger.debug({ type: "event", event: constants_1.SESSION_EVENTS.deleted, data: session, reason });
            this.events.emit(constants_1.SESSION_EVENTS.deleted, session, reason);
            const request = utils_2.formatJsonRpcRequest(constants_1.SESSION_JSONRPC.delete, { reason });
            yield this.history.delete(session.topic);
            const encryptKeys = {
                sharedKey: session.sharedKey,
                publicKey: session.self.publicKey,
            };
            yield this.client.relayer.publish(session.topic, request, {
                relay: session.relay,
                encryptKeys,
            });
        }));
        this.settled.on(constants_1.SUBSCRIPTION_EVENTS.sync, () => this.events.emit(constants_1.SESSION_EVENTS.sync));
        this.settled.on(constants_1.SUBSCRIPTION_EVENTS.enabled, () => this.events.emit(constants_1.SESSION_EVENTS.enabled));
        this.settled.on(constants_1.SUBSCRIPTION_EVENTS.disabled, () => this.events.emit(constants_1.SESSION_EVENTS.disabled));
    }
}
exports.Session = Session;
//# sourceMappingURL=session.js.map