[{"/Users/robertleifke/code/dahlia-interface/src/index.tsx":"1","/Users/robertleifke/code/dahlia-interface/src/serviceWorker.ts":"2","/Users/robertleifke/code/dahlia-interface/src/App.tsx":"3","/Users/robertleifke/code/dahlia-interface/src/state/index.ts":"4","/Users/robertleifke/code/dahlia-interface/src/theme/index.ts":"5","/Users/robertleifke/code/dahlia-interface/src/components/Header.tsx":"6","/Users/robertleifke/code/dahlia-interface/src/components/Footer.tsx":"7","/Users/robertleifke/code/dahlia-interface/src/pages/Earn/Earn.tsx":"8","/Users/robertleifke/code/dahlia-interface/src/pages/Farm/Farm.tsx":"9","/Users/robertleifke/code/dahlia-interface/src/pages/Position/Add/add.tsx":"10","/Users/robertleifke/code/dahlia-interface/src/pages/Position/Remove/remove.tsx":"11","/Users/robertleifke/code/dahlia-interface/src/pages/Position/Position.tsx":"12","/Users/robertleifke/code/dahlia-interface/src/pages/Farm/newFarm/NewFarm.tsx":"13","/Users/robertleifke/code/dahlia-interface/src/pages/Earn/Withdraw/index.tsx":"14","/Users/robertleifke/code/dahlia-interface/src/pages/Earn/Supply/index.tsx":"15","/Users/robertleifke/code/dahlia-interface/src/config.ts":"16","/Users/robertleifke/code/dahlia-interface/src/utils/token.ts":"17","/Users/robertleifke/code/dahlia-interface/src/hooks/useAsyncState.ts":"18","/Users/robertleifke/code/dahlia-interface/src/components/StyledLink.tsx":"19","/Users/robertleifke/code/dahlia-interface/src/components/Logo.tsx":"20","/Users/robertleifke/code/dahlia-interface/src/components/ConnectWallet.tsx":"21","/Users/robertleifke/code/dahlia-interface/src/components/SimpleTable.tsx":"22","/Users/robertleifke/code/dahlia-interface/src/pages/Earn/EarnEntry.tsx":"23","/Users/robertleifke/code/dahlia-interface/src/pages/Farm/FarmEntry.tsx":"24","/Users/robertleifke/code/dahlia-interface/src/pages/Position/Add/borrow.tsx":"25","/Users/robertleifke/code/dahlia-interface/src/pages/Position/Add/supply.tsx":"26","/Users/robertleifke/code/dahlia-interface/src/pages/Position/Add/confirm.tsx":"27","/Users/robertleifke/code/dahlia-interface/src/pages/Position/Remove/removeTokens.tsx":"28","/Users/robertleifke/code/dahlia-interface/src/pages/Position/Remove/payback.tsx":"29","/Users/robertleifke/code/dahlia-interface/src/pages/Position/Remove/confirm.tsx":"30","/Users/robertleifke/code/dahlia-interface/src/pages/Farm/newFarm/confirm.tsx":"31","/Users/robertleifke/code/dahlia-interface/src/pages/Farm/newFarm/borrow.tsx":"32","/Users/robertleifke/code/dahlia-interface/src/pages/Farm/newFarm/supply.tsx":"33","/Users/robertleifke/code/dahlia-interface/src/pages/Position/PositionEntry.tsx":"34","/Users/robertleifke/code/dahlia-interface/src/state/global/index.ts":"35","/Users/robertleifke/code/dahlia-interface/src/utils/address.ts":"36","/Users/robertleifke/code/dahlia-interface/src/utils/number.ts":"37","/Users/robertleifke/code/dahlia-interface/src/components/TokenInfo.tsx":"38","/Users/robertleifke/code/dahlia-interface/src/hooks/useERCmulti.ts":"39","/Users/robertleifke/code/dahlia-interface/src/hooks/useERC.ts":"40","/Users/robertleifke/code/dahlia-interface/src/components/BlockText.tsx":"41","/Users/robertleifke/code/dahlia-interface/src/utils/toastTx.tsx":"42","/Users/robertleifke/code/dahlia-interface/src/components/FarmInfo.tsx":"43","/Users/robertleifke/code/dahlia-interface/src/components/TokenInputForm.tsx":"44","/Users/robertleifke/code/dahlia-interface/src/components/TokenSlider.tsx":"45","/Users/robertleifke/code/dahlia-interface/src/components/TokenAmountInfo.tsx":"46","/Users/robertleifke/code/dahlia-interface/src/utils/eth.ts":"47","/Users/robertleifke/code/dahlia-interface/src/hooks/useSafeBox.ts":"48","/Users/robertleifke/code/dahlia-interface/src/components/TokenBorrowInfo.tsx":"49","/Users/robertleifke/code/dahlia-interface/src/components/BoxTokenAmountInfo.tsx":"50","/Users/robertleifke/code/dahlia-interface/src/components/DahliaTokenInfo.tsx":"51","/Users/robertleifke/code/dahlia-interface/src/components/BlockscoutTxLink.tsx":"52","/Users/robertleifke/code/dahlia-interface/src/components/PoolIcon.tsx":"53"},{"size":2179,"mtime":1633668686417,"results":"54","hashOfConfig":"55"},{"size":5332,"mtime":1633593957859,"results":"56","hashOfConfig":"55"},{"size":1995,"mtime":1633593957365,"results":"57","hashOfConfig":"55"},{"size":368,"mtime":1633593957861,"results":"58","hashOfConfig":"55"},{"size":5759,"mtime":1633668686426,"results":"59","hashOfConfig":"55"},{"size":2036,"mtime":1633668686411,"results":"60","hashOfConfig":"55"},{"size":1357,"mtime":1633668686411,"results":"61","hashOfConfig":"55"},{"size":1450,"mtime":1633668686417,"results":"62","hashOfConfig":"55"},{"size":1475,"mtime":1633593957797,"results":"63","hashOfConfig":"55"},{"size":1878,"mtime":1633593957800,"results":"64","hashOfConfig":"55"},{"size":1688,"mtime":1633593957853,"results":"65","hashOfConfig":"55"},{"size":3595,"mtime":1633668686423,"results":"66","hashOfConfig":"55"},{"size":1606,"mtime":1633593957798,"results":"67","hashOfConfig":"55"},{"size":5364,"mtime":1633668686418,"results":"68","hashOfConfig":"55"},{"size":4779,"mtime":1633593957796,"results":"69","hashOfConfig":"55"},{"size":5304,"mtime":1633668686414,"results":"70","hashOfConfig":"55"},{"size":1273,"mtime":1633593957864,"results":"71","hashOfConfig":"55"},{"size":525,"mtime":1633593957783,"results":"72","hashOfConfig":"55"},{"size":315,"mtime":1633593957708,"results":"73","hashOfConfig":"55"},{"size":542,"mtime":1633668686412,"results":"74","hashOfConfig":"55"},{"size":767,"mtime":1633593957705,"results":"75","hashOfConfig":"55"},{"size":288,"mtime":1633593957708,"results":"76","hashOfConfig":"55"},{"size":3565,"mtime":1633668686418,"results":"77","hashOfConfig":"55"},{"size":4366,"mtime":1633668686419,"results":"78","hashOfConfig":"55"},{"size":10714,"mtime":1633668686422,"results":"79","hashOfConfig":"55"},{"size":6857,"mtime":1633593957844,"results":"80","hashOfConfig":"55"},{"size":10366,"mtime":1633668686422,"results":"81","hashOfConfig":"55"},{"size":5544,"mtime":1633593957853,"results":"82","hashOfConfig":"55"},{"size":8168,"mtime":1633668686425,"results":"83","hashOfConfig":"55"},{"size":6704,"mtime":1633668686424,"results":"84","hashOfConfig":"55"},{"size":9779,"mtime":1633668686421,"results":"85","hashOfConfig":"55"},{"size":9443,"mtime":1633668686420,"results":"86","hashOfConfig":"55"},{"size":4461,"mtime":1633593957799,"results":"87","hashOfConfig":"55"},{"size":7966,"mtime":1633668686424,"results":"88","hashOfConfig":"55"},{"size":696,"mtime":1633593957860,"results":"89","hashOfConfig":"55"},{"size":276,"mtime":1633593957862,"results":"90","hashOfConfig":"55"},{"size":564,"mtime":1633593957863,"results":"91","hashOfConfig":"55"},{"size":570,"mtime":1633668686413,"results":"92","hashOfConfig":"55"},{"size":1282,"mtime":1633593957784,"results":"93","hashOfConfig":"55"},{"size":1091,"mtime":1633593957784,"results":"94","hashOfConfig":"55"},{"size":203,"mtime":1633593957703,"results":"95","hashOfConfig":"55"},{"size":328,"mtime":1633593957863,"results":"96","hashOfConfig":"55"},{"size":720,"mtime":1633593957705,"results":"97","hashOfConfig":"55"},{"size":1460,"mtime":1633593957709,"results":"98","hashOfConfig":"55"},{"size":1054,"mtime":1633593957709,"results":"99","hashOfConfig":"55"},{"size":749,"mtime":1633668686412,"results":"100","hashOfConfig":"55"},{"size":222,"mtime":1633593957863,"results":"101","hashOfConfig":"55"},{"size":860,"mtime":1633593957784,"results":"102","hashOfConfig":"55"},{"size":629,"mtime":1633593957709,"results":"103","hashOfConfig":"55"},{"size":561,"mtime":1633593957704,"results":"104","hashOfConfig":"55"},{"size":478,"mtime":1633593957705,"results":"105","hashOfConfig":"55"},{"size":453,"mtime":1633593957704,"results":"106","hashOfConfig":"55"},{"size":602,"mtime":1633593957707,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},"18lgm88",{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/robertleifke/code/dahlia-interface/src/index.tsx",["220"],"import \"react-app-polyfill/stable\";\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport \"src/index.css\";\n\nimport { ContractKitProvider, Alfajores } from \"@celo-tools/use-contractkit\";\nimport * as Sentry from \"@sentry/react\";\nimport { Integrations } from \"@sentry/tracing\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"src/state\";\nimport theme from \"src/theme\";\nimport { ThemeProvider } from \"theme-ui\";\nimport { HashRouter as Router } from \"react-router-dom\";\nimport { RecoilRoot } from \"recoil\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nif (process.env.REACT_APP_SENTRY_DSN) {\n  const sentryCfg = {\n    environment: `${process.env.REACT_APP_VERCEL_ENV ?? \"unknown\"}`,\n    release: `${\n      process.env.REACT_APP_VERCEL_GIT_COMMIT_REF?.replace(/\\//g, \"--\") ??\n      \"unknown\"\n    }-${process.env.REACT_APP_VERCEL_GIT_COMMIT_SHA ?? \"unknown\"}`,\n  };\n  Sentry.init({\n    dsn: process.env.REACT_APP_SENTRY_DSN,\n    integrations: [new Integrations.BrowserTracing()],\n    tracesSampleRate: 0.2,\n    ...sentryCfg,\n  });\n  console.log(\n    `Initializing Sentry environment at release ${sentryCfg.release} in environment ${sentryCfg.environment}`\n  );\n} else {\n  console.warn(`REACT_APP_SENTRY_DSN not found. Sentry will not be loaded.`);\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContractKitProvider\n      dapp={{\n        icon: \"\",\n        name: \"Dahlia\",\n        description: \"Leverage yield farming protocol\",\n        url: \"https://dahlia.finance\",\n      }}\n    >\n      <ThemeProvider theme={theme}>\n        <Provider store={store}>\n          <Router>\n            <RecoilRoot>\n              <App />\n            </RecoilRoot>\n          </Router>\n        </Provider>\n      </ThemeProvider>\n    </ContractKitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","/Users/robertleifke/code/dahlia-interface/src/serviceWorker.ts",[],"/Users/robertleifke/code/dahlia-interface/src/App.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/state/index.ts",[],"/Users/robertleifke/code/dahlia-interface/src/theme/index.ts",[],"/Users/robertleifke/code/dahlia-interface/src/components/Header.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/components/Footer.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/pages/Earn/Earn.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/pages/Farm/Farm.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/pages/Position/Add/add.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/pages/Position/Remove/remove.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/pages/Position/Position.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/pages/Farm/newFarm/NewFarm.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/pages/Earn/Withdraw/index.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/pages/Earn/Supply/index.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/config.ts",[],"/Users/robertleifke/code/dahlia-interface/src/utils/token.ts",[],"/Users/robertleifke/code/dahlia-interface/src/hooks/useAsyncState.ts",[],"/Users/robertleifke/code/dahlia-interface/src/components/StyledLink.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/components/Logo.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/components/ConnectWallet.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/components/SimpleTable.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/pages/Earn/EarnEntry.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/pages/Farm/FarmEntry.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/pages/Position/Add/borrow.tsx",["221"],"import React from \"react\";\nimport {\n  Button,\n  Card,\n  Flex,\n  Heading,\n  Text,\n} from \"theme-ui\";\nimport { CaretLeft } from \"phosphor-react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { atom, useSetRecoilState, useRecoilState } from 'recoil';\nimport { BlockText } from \"src/components/BlockText\";\nimport { Token } from \"src/utils/token\";\nimport { lpToken } from \"src/config\";\nimport { TokenAmountInfo } from \"src/components/TokenAmountInfo\";\nimport { fromWei, toWei, toBN, AbiItem } from \"web3-utils\";\nimport { TokenSlider } from \"src/components/TokenSlider\";\nimport BANK_ABI from \"src/abis/dahlia_contracts/HomoraBank.json\";\nimport PROXYORACLE_ABI from \"src/abis/dahlia_contracts/ProxyOracle.json\";\nimport COREORACLE_ABI from \"src/abis/dahlia_contracts/CoreOracle.json\";\nimport { HomoraBank } from \"src/generated/HomoraBank\";\nimport { ProxyOracle } from \"src/generated/ProxyOracle\";\nimport { CoreOracle } from \"src/generated/CoreOracle\";\nimport { Bank } from \"src/config\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\nimport { humanFriendlyNumber } from \"src/utils/number\";\nimport BN from 'bn.js';\nimport { addPageState, addPage, addPositionState} from \"src/pages/Position/Add/add\";\nimport { addSupplyState } from \"src/pages/Position/Add/supply\";\nimport { poolState } from \"src/pages/Farm/newFarm/NewFarm\";\nimport { CErc20Immutable } from \"src/generated/CErc20Immutable\";\nimport CERC20_ABI from \"src/abis/fountain_of_youth/CErc20Immutable.json\";\n\ninterface borrowProps {\n  tokenBorrow: BN[] | null;\n  supplyValue: number | null;\n  borrowValue: number | null;\n  debtRatio: number | null;\n  lever: number | null;\n}\n\nconst emptyBorrowState : borrowProps = {\n  tokenBorrow: null,\n  supplyValue: null,\n  borrowValue: null,\n  debtRatio: null,\n  lever: null,\n}\n\nexport const addBorrowState = atom({\n  key: 'addBorrowState',\n  default: emptyBorrowState\n})\n\nexport const Borrow: React.FC = () => {\n  const scale = toBN(2).pow(toBN(112)); \n  const [pool] = useRecoilState(poolState);\n  const setPage = useSetRecoilState(addPageState)\n  const zeroAdd = \"0x0000000000000000000000000000000000000000\"\n  const [init, setInit] = React.useState(false)\n  const [supply] = useRecoilState(addSupplyState);\n  const [position] = useRecoilState(addPositionState); \n  const setBorrow = useSetRecoilState(addBorrowState); \n\n  const lpTok: Token = new Token({\n    ...lpToken,\n    address: pool.lp,\n  });\n\n  const { kit, network } = useContractKit();\n  const [amounts, setAmounts] = React.useState<(String[] | null)>(null)\n\n  const bank = React.useMemo(() => (new kit.web3.eth.Contract(\n    BANK_ABI.abi as AbiItem[],\n    getAddress(Bank[network.chainId])\n  ) as unknown) as HomoraBank, [kit, network]); \n\n  const call = React.useCallback(async () => {\n    try {\n        const factors : {\n          borrowFactor: string;\n          collateralFactor: string;\n          liqIncentive: string;\n          0: string;\n          1: string;\n          2: string;\n        }[] = [];\n        const prices: BN[] = [];\n        const availableBorrows: BN[] = [];\n        const oracle = await bank.methods.oracle().call();\n        const proxyOracle = (new kit.web3.eth.Contract(\n          PROXYORACLE_ABI.abi as AbiItem[],\n          oracle,\n        ) as unknown) as ProxyOracle;\n        const source = await proxyOracle.methods.source().call();\n        const coreOracle = (new kit.web3.eth.Contract(\n          COREORACLE_ABI.abi as AbiItem[],\n          source,\n        ) as unknown) as CoreOracle;\n        for (let token of pool.tokens) {\n          const bankInfo =  await bank.methods.getBankInfo(token.address).call();\n          const cToken = (new kit.web3.eth.Contract(\n            CERC20_ABI as AbiItem[],\n            bankInfo.cToken,\n          ) as unknown) as CErc20Immutable;\n          const totalSupply = toBN(await cToken.methods.totalSupply().call());\n          const totalBorrows = toBN(await cToken.methods.totalBorrows().call());\n          const totalReserves = toBN(await cToken.methods.totalReserves().call());\n          availableBorrows.push(totalSupply.sub(totalBorrows).sub(totalReserves)); \n          const factor = await proxyOracle.methods.tokenFactors(token.address).call();\n          factors.push(factor);\n          const price = await coreOracle.methods.getCELOPx(token.address).call();\n          prices.push(toBN(price));\n        }\n        const lpPrice = await coreOracle.methods.getCELOPx(pool.lp).call(); \n        const lpFactor = await proxyOracle.methods.tokenFactors(pool.lp).call();\n\n        const existingCollateral = toBN(await bank.methods.getCollateralCELOValue(position.positionId!).call()); \n        const existingBorrow = toBN(await bank.methods.getBorrowCELOValue(position.positionId!).call()); \n\n        const weightedSuppliedCollateralValue = supply.tokenSupply!.map((x, i) => Number(fromWei(x))\n          * (Number(fromWei(prices[i]!)) / Number(fromWei(scale))) * (Number(lpFactor.collateralFactor) / 10000))\n          .reduce((sum, current) => sum + current, 0) + Number(fromWei(supply.lpSupply!))\n          * (Number(fromWei(lpPrice)) / Number(fromWei(scale))) * (Number(lpFactor.collateralFactor) / 10000) + Number(fromWei(existingCollateral)) - Number(fromWei(existingBorrow));\n\n        const borrowMax = prices.map((x, i) => weightedSuppliedCollateralValue / \n          ((Number(fromWei(x)) / Number(fromWei(scale))) * ((Number(factors[i]?.borrowFactor) - Number(lpFactor.collateralFactor)) / 10000)))\n\n        const maxAmounts = borrowMax.map((x, index) => String(Math.min(x, Number(fromWei(availableBorrows[index]!)))));\n\n        if (!init) {\n          setInit(true)\n          setAmounts(maxAmounts.map((x) => String((Number(x) / 3).toFixed(3))));\n        }\n  \n        return {\n          tokenFactor: factors,\n          celoPrices: prices,\n          lpPrice,\n          lpFactor,\n          maxAmounts,\n          existingCollateral, \n          existingBorrow,\n        };\n    } catch (error) {\n        console.log(error)\n    }\n    \n}, [bank.methods, kit.web3.eth.Contract, pool.lp, pool.tokens, init, scale, supply, position])\n\nconst [info] = useAsyncState(null, call);\n\nif (!amounts!) return null; \n\nconst borrowValue = info ? amounts!.map((x, i) => Number(x) * (Number(fromWei(info?.celoPrices[i]!)) / Number(fromWei(scale)))).reduce((sum, current) => sum + current, 0) : 0; \nconst supplyValue = info ? supply.tokenSupply!.map((x, i) => Number(fromWei(x)) * (Number(fromWei(info?.celoPrices[i]!)) / Number(fromWei(scale)))).reduce((sum, current) => sum + current, 0) : 0; \nconst lever =  1 + (borrowValue / supplyValue)\n\n//TODO: add lp values\nconst numer = info ? amounts!.map((x, i) => Number(x) * (Number(fromWei(info?.celoPrices[i]!)) / Number(fromWei(scale)))\n  * (Number(info.tokenFactor[i]?.borrowFactor) / 10000))\n  .reduce((sum, current) => sum + current, 0) + Number(fromWei(info.existingBorrow)) : 0; \nconst denom = info && supply ? amounts!.map((x, i) => (Number(x) + Number(fromWei(supply.tokenSupply![i]!)))\n  * (Number(fromWei(info?.celoPrices[i]!)) / Number(fromWei(scale))) * (Number(info.lpFactor?.collateralFactor) / 10000))\n  .reduce((sum, current) => sum + current, 0) + Number(fromWei(info.existingCollateral)) : 1; \nconst debtRatio =  (numer/denom) * 100; \n\nconst continueButton = (\n  <Button\n    onClick={() => {\n      setBorrow({\n        tokenBorrow: amounts!.map((x) => toBN(toWei(String(x)))),\n        lever: lever, \n        debtRatio,\n        borrowValue,\n        supplyValue,\n        });\n      setPage(addPage.Confirm); \n    }}\n    >\n      Continue\n    </Button>\n)\n\n  return (\n    <Flex sx={{ alignItems: \"center\", flexDirection: \"column\" }}>\n      <Card sx={{ width: \"100%\", maxWidth: \"800px\" }} py={4} px={3}>\n        <Flex\n          onClick={() => {\n            setPage(addPage.Supply);\n          }}\n          sx={{ alignItems: \"center\", cursor: \"pointer\" }}\n          mb={4}\n        >\n          <CaretLeft size={28} />\n          <Text>Back</Text>\n        </Flex>\n        <Flex mb={4}>\n          <Heading as=\"h2\" mr={2}>\n            Farm\n          </Heading>\n        </Flex>\n        <Flex sx={{flexDirection: \"column\", gap: \"25px\", mb: 10}}>\n          <BlockText variant=\"primary\">My position has</BlockText>\n          <Flex sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\"}}>\n            {pool && position && pool.tokens.map((tok, index) => \n            <Flex\n            sx={{\n              alignItems: \"center\",\n              mr: 4,\n              padding:2,\n              borderStyle: \"solid\",\n              borderRadius: \"10px\",\n            }}\n          >\n              <TokenAmountInfo key={tok.address} token={tok} amount={fromWei(supply.existingBalance![index]!)} />       \n            </Flex>\n          )}\n          </Flex>\n        </Flex>\n        <Flex sx={{flexDirection: \"column\", gap: \"25px\", mb: 10}}>\n          <BlockText variant=\"primary\">I'm Supplying</BlockText>\n          <Flex sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\"}}>\n            {pool.tokens.map((tok, index) => \n            <Flex\n            sx={{\n              alignItems: \"center\",\n              mr: 4,\n              padding:2,\n              borderStyle: \"solid\",\n              borderRadius: \"10px\",\n            }}\n          >\n              <TokenAmountInfo key={tok.address} token={tok} amount={fromWei(supply.tokenSupply![index]!)} />       \n            </Flex>\n          )}\n            <Flex\n            sx={{\n              alignItems: \"center\",\n              mr: 4,\n              padding:2,\n              borderStyle: \"solid\",\n              borderRadius: \"10px\",\n            }}\n            >\n              <TokenAmountInfo key={lpTok.address} token={lpTok} amount={fromWei(supply.lpSupply!)} />       \n            </Flex>\n          </Flex>\n        </Flex>\n        <Flex sx={{mb: 2, mt: \"25px\"}}>\n          <BlockText variant=\"primary\">I'd like to borrow</BlockText>\n        </Flex>\n        <BlockText mb={2}>{\"Est. Debt Ratio: \".concat(humanFriendlyNumber(debtRatio)).concat(\"/100\")}</BlockText>\n        <BlockText mb={2}>{\"Leverage: \".concat(humanFriendlyNumber(lever)).concat(\"x\")}</BlockText>\n          {info && pool.tokens.map((tok, index) => \n            <TokenSlider key={tok.address} token={tok} amount={String(amounts![index])}\n            setAmount={(s: string) => setAmounts(amounts!.map((x, i) => i === index ? s : x))} \n            max={info!.maxAmounts[index]!}\n             />\n          )}\n        <Flex sx={{ justifyContent: \"center\", mt: 6 }}>\n          {\n          (debtRatio > 99) ? (\n            <Button disabled={true}>Debt ratio too high</Button>\n          ) : (\n            continueButton\n          )}\n        </Flex>\n      </Card>\n    </Flex>\n  );\n};","/Users/robertleifke/code/dahlia-interface/src/pages/Position/Add/supply.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/pages/Position/Add/confirm.tsx",["222"],"import React from \"react\";\nimport {\n  Button,\n  Card,\n  Flex,\n  Heading,\n  Text,\n  Spinner,\n} from \"theme-ui\";\nimport { DEFAULT_GAS_PRICE } from \"src/config\";\nimport { CaretLeft } from \"phosphor-react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { useERC } from \"src/hooks/useERC\";\nimport { useERCmulti } from \"src/hooks/useERCmulti\";\nimport { useSetRecoilState, useRecoilState } from 'recoil';\nimport { BlockText } from \"src/components/BlockText\";\nimport { Token } from \"src/utils/token\";\nimport { lpToken, Bank } from \"src/config\";\nimport { TokenAmountInfo } from \"src/components/TokenAmountInfo\";\nimport { fromWei, AbiItem } from \"web3-utils\";\nimport { toastTx } from \"src/utils/toastTx\";\nimport { toast } from \"react-toastify\";\nimport BANK_ABI from \"src/abis/dahlia_contracts/HomoraBank.json\";\nimport UNI_SPELL from \"src/abis/dahlia_contracts/UniswapV2SpellV1.json\";\nimport { HomoraBank } from \"src/generated/HomoraBank\";\nimport { UniswapV2SpellV1 } from \"src/generated/UniswapV2SpellV1\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { MaxUint256 } from \"@ethersproject/constants\";\nimport ERC20_ABI from \"src/abis/fountain_of_youth/ERC20.json\";\nimport { ERC20 } from \"src/generated/ERC20\";\nimport { humanFriendlyNumber } from \"src/utils/number\";\nimport { addPageState, addPage, addPositionState } from \"src/pages/Position/Add/add\";\nimport { addSupplyState } from \"./supply\";\nimport { addBorrowState } from \"./borrow\";\nimport { poolState } from \"src/pages/Farm/newFarm/NewFarm\";\nimport { useHistory } from \"react-router\";\n\n\n\nexport const Confirm: React.FC = () => {\n  const { getConnectedKit, network } = useContractKit();\n  const [approveLoading, setApproveLoading] = React.useState(false);\n  const [confirmLoading, setConfirmLoading] = React.useState(false);\n  const [buttonLoading, setButtonLoading] = React.useState(true); \n  const [done, setDone] = React.useState(false); \n  const [pool] = useRecoilState(poolState);\n  const setPage = useSetRecoilState(addPageState)\n  const [supply] = useRecoilState(addSupplyState);\n  const [position] = useRecoilState(addPositionState); \n  const [borrow] = useRecoilState(addBorrowState); \n  const history = useHistory(); \n\n  const lpTok: Token = new Token({\n    ...lpToken,\n    address: pool.lp,\n  });\n  \n  const [tokenStates, refetchTokenStates] = useERCmulti(pool.tokens)\n  const [erc, refetchERC] = useERC(lpTok.address, Bank[network.chainId]);\n\n  const approveButton = (token: Token): any => {\n    return (\n    <Button\n      onClick={async () => {\n        const kit = await getConnectedKit();\n        // kit is connected to a wallet\n        try {\n          setApproveLoading(true);\n          const ERCToken = (new kit.web3.eth.Contract(\n            ERC20_ABI as AbiItem[],\n            token.address!,\n          ) as unknown) as ERC20; \n          const tx = await ERCToken.methods\n            .approve(Bank[network.chainId], MaxUint256.toString())\n            .send({\n              from: kit.defaultAccount,\n              gasPrice: DEFAULT_GAS_PRICE,\n            });\n          toastTx(tx.transactionHash);\n          refetchERC();\n          refetchTokenStates();\n        } catch (e) {\n          toast(e.message);\n        } finally {\n          setApproveLoading(false);\n        }\n      }}\n    >\n      {\"Approve \".concat(token.symbol)}\n    </Button>\n  )};\n\n  const confirmButton = (\n    <Button\n      onClick={async () => {\n        const kit = await getConnectedKit();\n        // kit is connected to a wallet\n        try {\n          setConfirmLoading(true);\n          const bank = (new kit.web3.eth.Contract(\n            BANK_ABI.abi as AbiItem[],\n            getAddress(Bank[network.chainId])\n            ) as unknown) as HomoraBank;\n          const spell = (new kit.web3.eth.Contract(\n            UNI_SPELL.abi as AbiItem[],\n            getAddress(pool.spell),\n          ) as unknown) as UniswapV2SpellV1;\n          const bytes = spell.methods.addLiquidityWStakingRewards(\n            pool.tokens[0]!.address, \n            pool.tokens[1]!.address, \n            [\n              supply.tokenSupply![0]!.toString(),\n              supply.tokenSupply![1]!.toString(), \n              supply.lpSupply!.toString(), \n              borrow.tokenBorrow![0]!.toString(), \n              borrow.tokenBorrow![1]!.toString(), \n              0, \n              0, \n              0\n            ],\n            pool.wrapper,\n          ).encodeABI()\n          const tx = await bank.methods\n            .execute(\n                position.positionId!,\n                pool.spell,\n                bytes,\n            ).send({\n              from: kit.defaultAccount,\n              gasPrice: DEFAULT_GAS_PRICE,\n              gas: 10000000,\n            });\n          toastTx(tx.transactionHash);\n          refetchERC();\n        } catch (e) {\n          toast(e.message);\n        } finally {\n          setConfirmLoading(false);\n          setDone(true); \n        }\n      }}\n    >\n      Confirm\n    </Button>\n  );\n  \n  const loading = approveLoading || confirmLoading || buttonLoading;\n  const button = React.useMemo(() => {\n    let b: any[] = []\n    if (done) { \n      b = [(<Button onClick={() => {\n      history.push('/positions');\n      setPage(addPage.Supply); \n    }}>Return</Button>)]\n    } else {\n      if (tokenStates) {\n        for (let i = 0; i < tokenStates.length; i += 1) {\n          if (tokenStates[i] ){\n            const amountBN = supply.tokenSupply![i]!\n            if (amountBN.gt(tokenStates[i]?.allowance!)) {\n              b.push(approveButton(pool.tokens![i]!));\n              if (buttonLoading) setButtonLoading(false);\n            }\n          }\n        }\n        if (b.length === 0) {\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          b = [confirmButton]; \n          if (buttonLoading) setButtonLoading(false);\n        }\n      }\n      if (erc) {\n        const amountBN = supply.lpSupply!;\n        if (amountBN.gt(erc.allowance)) {\n          b.push(approveButton(lpTok))\n        }\n        if (buttonLoading) setButtonLoading(false)\n      }\n    }\n    return b; \n  }, [tokenStates, supply.tokenSupply, pool.tokens, erc, supply.lpSupply])\n\n  return (\n    <Flex sx={{ alignItems: \"center\", flexDirection: \"column\" }}>\n      <Card sx={{ width: \"100%\", maxWidth: \"800px\" }} py={4} px={3}>\n        <Flex\n          onClick={() => {\n            setPage(addPage.Borrow);\n          }}\n          sx={{ alignItems: \"center\", cursor: \"pointer\" }}\n          mb={4}\n        >\n          <CaretLeft size={28} />\n          <Text>Back</Text>\n        </Flex>\n        <Flex mb={4}>\n          <Heading as=\"h2\" mr={2}>\n            Position Breakdown\n          </Heading>\n        </Flex>\n        <Flex sx={{flexDirection: \"column\", gap: \"25px\", mb: 10}}>\n          <BlockText variant=\"primary\">My position has</BlockText>\n          <Flex sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\"}}>\n            {supply.existingBalance && pool.tokens.map((tok, index) => \n            <Flex\n            sx={{\n              alignItems: \"center\",\n              mr: 4,\n              padding:2,\n              borderStyle: \"solid\",\n              borderRadius: \"10px\",\n            }}\n          >\n              <TokenAmountInfo key={tok.address} token={tok} amount={fromWei(supply.existingBalance![index]!)} />       \n            </Flex>\n          )}\n          </Flex>\n        </Flex>\n        <Flex sx={{flexDirection: \"column\", gap: \"25px\", mb: 10}}>\n          <BlockText variant=\"primary\">I'm Supplying</BlockText>\n          <Flex sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\"}}>\n            {supply.tokenSupply && pool.tokens.map((tok, index) => \n            <Flex\n            sx={{\n              alignItems: \"center\",\n              mr: 4,\n              padding:2,\n              borderStyle: \"solid\",\n              borderRadius: \"10px\",\n            }}\n          >\n              <TokenAmountInfo key={tok.address} token={tok} amount={fromWei(supply.tokenSupply![index]!)} />       \n            </Flex>\n          )}\n            <Flex\n            sx={{\n              alignItems: \"center\",\n              mr: 4,\n              padding:2,\n              borderStyle: \"solid\",\n              borderRadius: \"10px\",\n            }}\n            >\n              {supply.lpSupply && <TokenAmountInfo key={lpTok.address} token={lpTok} amount={fromWei(supply.lpSupply!)} /> }     \n            </Flex>\n          </Flex>\n        </Flex>\n        <Flex sx={{flexDirection: \"column\", gap: \"25px\", mb: 10}}>\n          <BlockText variant=\"primary\">I'm Borrowing</BlockText>\n          <Flex sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\"}}>\n            {borrow.tokenBorrow && pool.tokens.map((tok, index) => \n            <Flex\n            sx={{\n              alignItems: \"center\",\n              mr: 4,\n              padding:2,\n              borderStyle: \"solid\",\n              borderRadius: \"10px\",\n            }}\n          >\n              <TokenAmountInfo key={tok.address} token={tok} amount={fromWei(borrow.tokenBorrow![index]!)} />       \n            </Flex>\n          )}\n          </Flex>\n        </Flex>\n        <Flex sx={{flexDirection: \"column\", gap: \"25px\", mb: 10}}>\n          <BlockText variant=\"primary\">Position Statistics</BlockText>\n          <Flex sx={{ justifyContent: \"left\", gap: \"8px\", flexDirection: \"column\"}}>\n            <BlockText>{\"Est. Debt Ratio: \".concat(humanFriendlyNumber(borrow.debtRatio!)).concat(\"/100\")}</BlockText>\n              <BlockText>{\"Leverage: \".concat(humanFriendlyNumber(borrow.lever!)).concat(\"x\")}</BlockText>\n              {/* change this to usd value */}\n              <BlockText>{\"Supply Value: \".concat(\" \").concat(humanFriendlyNumber(borrow.supplyValue!)).concat(\" Celo\")}</BlockText>\n              <BlockText>{\"Borrow Value: \".concat(\" \").concat(humanFriendlyNumber(borrow.borrowValue!)).concat(\" Celo\")}</BlockText>\n              <BlockText>{\"Position Value: \".concat(\" \").concat(humanFriendlyNumber(borrow.supplyValue! + borrow.borrowValue!)).concat(\" Celo\")}</BlockText>\n          </Flex>\n        </Flex>\n        <Flex sx={{ justifyContent: \"center\", mt: 6 }}>\n            {loading ? (\n              <Spinner />\n            ) : (\n              <Flex sx={{ justifyContent: \"center\", gap: \"6px\"}} >\n                {button[0]}\n              </Flex>                \n            )}\n        </Flex>\n      </Card>\n    </Flex>\n  );\n};\n","/Users/robertleifke/code/dahlia-interface/src/pages/Position/Remove/removeTokens.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/pages/Position/Remove/payback.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/pages/Position/Remove/confirm.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/pages/Farm/newFarm/confirm.tsx",["223"],"import React from \"react\";\nimport {\n  Button,\n  Card,\n  Flex,\n  Heading,\n  Text,\n  Spinner,\n} from \"theme-ui\";\nimport { DEFAULT_GAS_PRICE } from \"src/config\";\nimport { CaretLeft } from \"phosphor-react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { useERC } from \"src/hooks/useERC\";\nimport { useERCmulti } from \"src/hooks/useERCmulti\";\nimport { useSetRecoilState, useRecoilState } from 'recoil';\nimport { farmPageState, farmPage, poolState } from \"src/pages/Farm/newFarm/NewFarm\";\nimport { BlockText } from \"src/components/BlockText\";\nimport { Token } from \"src/utils/token\";\nimport { lpToken, Bank } from \"src/config\";\nimport { TokenAmountInfo } from \"src/components/TokenAmountInfo\";\nimport { newSupplyState } from \"src/pages/Farm/newFarm/supply\";\nimport { newBorrowState } from \"./borrow\";\nimport { fromWei, AbiItem } from \"web3-utils\";\nimport { toastTx } from \"src/utils/toastTx\";\nimport { toast } from \"react-toastify\";\nimport BANK_ABI from \"src/abis/dahlia_contracts/HomoraBank.json\";\nimport UNI_SPELL from \"src/abis/dahlia_contracts/UniswapV2SpellV1.json\";\nimport { HomoraBank } from \"src/generated/HomoraBank\";\nimport { UniswapV2SpellV1 } from \"src/generated/UniswapV2SpellV1\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { MaxUint256 } from \"@ethersproject/constants\";\nimport ERC20_ABI from \"src/abis/fountain_of_youth/ERC20.json\";\nimport { ERC20 } from \"src/generated/ERC20\";\nimport { humanFriendlyNumber } from \"src/utils/number\";\nimport { useHistory } from \"react-router\";\n\n\nexport const Confirm: React.FC = () => {\n  const { getConnectedKit, network } = useContractKit();\n  const [approveLoading, setApproveLoading] = React.useState(false);\n  const [confirmLoading, setConfirmLoading] = React.useState(false);\n  const [buttonLoading, setButtonLoading] = React.useState(true);\n  const [done, setDone] = React.useState(false);  \n  const [pool] = useRecoilState(poolState);\n  const setPage = useSetRecoilState(farmPageState)\n  const [supply] = useRecoilState(newSupplyState); \n  const [borrow] = useRecoilState(newBorrowState);\n  const history = useHistory();\n\n\n  const lpTok: Token = new Token({\n    ...lpToken,\n    address: pool.lp,\n  });\n  \n  const [tokenStates, refetchTokenStates] = useERCmulti(pool.tokens)\n  const [erc, refetchERC] = useERC(lpTok.address, Bank[network.chainId]);\n\n  const approveButton = (token: Token): any => {\n    return (\n    <Button\n      onClick={async () => {\n        const kit = await getConnectedKit();\n        // kit is connected to a wallet\n        try {\n          setApproveLoading(true);\n          const ERCToken = (new kit.web3.eth.Contract(\n            ERC20_ABI as AbiItem[],\n            token.address!,\n          ) as unknown) as ERC20; \n          const tx = await ERCToken.methods\n            .approve(Bank[network.chainId], MaxUint256.toString())\n            .send({\n              from: kit.defaultAccount,\n              gasPrice: DEFAULT_GAS_PRICE,\n            });\n          toastTx(tx.transactionHash);\n          refetchERC();\n          refetchTokenStates();\n        } catch (e) {\n          toast(e.message);\n        } finally {\n          setApproveLoading(false);\n        }\n      }}\n    >\n      {\"Approve \".concat(token.symbol)}\n    </Button>\n  )};\n\n  const confirmButton = (\n    <Button\n      onClick={async () => {\n        const kit = await getConnectedKit();\n        // kit is connected to a wallet\n        try {\n          setConfirmLoading(true);\n          const bank = (new kit.web3.eth.Contract(\n            BANK_ABI.abi as AbiItem[],\n            getAddress(Bank[network.chainId])\n            ) as unknown) as HomoraBank;\n          const spell = (new kit.web3.eth.Contract(\n            UNI_SPELL.abi as AbiItem[],\n            getAddress(pool.spell),\n          ) as unknown) as UniswapV2SpellV1;\n          const bytes = spell.methods.addLiquidityWStakingRewards(\n            pool.tokens[0]!.address, \n            pool.tokens[1]!.address, \n            [\n              supply.tokenSupply![0]!.toString(),\n              supply.tokenSupply![1]!.toString(), \n              supply.lpSupply!.toString(), \n              borrow.tokenBorrow![0]!.toString(), \n              borrow.tokenBorrow![1]!.toString(), \n              0, \n              0, \n              0\n            ],\n            pool.wrapper,\n          ).encodeABI()\n          const tx = await bank.methods\n            .execute(\n                0,\n                pool.spell,\n                bytes,\n            ).send({\n              from: kit.defaultAccount,\n              gasPrice: DEFAULT_GAS_PRICE,\n              gas: 10000000,\n            });\n          toastTx(tx.transactionHash);\n          refetchERC();\n        } catch (e) {\n          toast(e.message);\n        } finally {\n          setConfirmLoading(false);\n          setDone(true); \n        }\n      }}\n    >\n      Confirm\n    </Button>\n  );\n  \n  const loading = approveLoading || confirmLoading || buttonLoading;\n  const button = React.useMemo(() => {\n    let b: any[] = []\n    if (done) { \n      b = [(<Button onClick={() => {\n      history.push('/positions');\n      setPage(farmPage.Supply); \n    }}>Return</Button>)]\n    } else {\n        if (tokenStates) {\n        for (let i = 0; i < tokenStates.length; i += 1) {\n          if (tokenStates[i]!){\n            console.log(tokenStates[i]!.allowance.toString())\n            const amountBN = supply.tokenSupply![i]!\n            console.log(amountBN.toString())\n            console.log(3)\n            if (amountBN.gt(tokenStates[i]?.allowance!)) {\n              b.push(approveButton(pool.tokens![i]!));\n              if (buttonLoading) setButtonLoading(false);\n            }\n          }\n        }\n        if (b.length === 0) {\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          b = [confirmButton]; \n          if (buttonLoading) setButtonLoading(false);\n        }\n      }\n      if (erc) {\n        const amountBN = supply.lpSupply!;\n        if (amountBN.gt(erc.allowance)) {\n          b.push(approveButton(lpTok))\n        }\n        if (buttonLoading) setButtonLoading(false)\n      }\n    }\n    return b; \n  }, [tokenStates, erc, supply.tokenSupply, supply.lpSupply, pool.tokens, buttonLoading, confirmButton, lpTok]);\n\n  return (\n    <Flex sx={{ alignItems: \"center\", flexDirection: \"column\" }}>\n      <Card sx={{ width: \"100%\", maxWidth: \"800px\" }} py={4} px={3}>\n        <Flex\n          onClick={() => {\n            setPage(farmPage.Borrow);\n          }}\n          sx={{ alignItems: \"center\", cursor: \"pointer\" }}\n          mb={4}\n        >\n          <CaretLeft size={28} />\n          <Text>Back</Text>\n        </Flex>\n        <Flex mb={4}>\n          <Heading as=\"h2\" mr={2}>\n            Position Breakdown\n          </Heading>\n        </Flex>\n        <Flex sx={{flexDirection: \"column\", gap: \"25px\", mb: 10}}>\n          <BlockText variant=\"primary\">I'm Supplying</BlockText>\n          <Flex sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\"}}>\n            {pool.tokens.map((tok, index) => \n            <Flex\n            sx={{\n              alignItems: \"center\",\n              mr: 4,\n              padding:2,\n              borderStyle: \"solid\",\n              borderRadius: \"10px\",\n            }}\n          >\n              <TokenAmountInfo key={tok.address} token={tok} amount={fromWei(supply.tokenSupply![index]!)} />       \n            </Flex>\n          )}\n            <Flex\n            sx={{\n              alignItems: \"center\",\n              mr: 4,\n              padding:2,\n              borderStyle: \"solid\",\n              borderRadius: \"10px\",\n            }}\n            >\n              <TokenAmountInfo key={lpTok.address} token={lpTok} amount={fromWei(supply.lpSupply!)} />       \n            </Flex>\n          </Flex>\n        </Flex>\n        <Flex sx={{flexDirection: \"column\", gap: \"25px\", mb: 10}}>\n          <BlockText variant=\"primary\">I'm Borrowing</BlockText>\n          <Flex sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\"}}>\n            {pool.tokens.map((tok, index) => \n            <Flex\n            sx={{\n              alignItems: \"center\",\n              mr: 4,\n              padding:2,\n              borderStyle: \"solid\",\n              borderRadius: \"10px\",\n            }}\n          >\n              <TokenAmountInfo key={tok.address} token={tok} amount={fromWei(borrow.tokenBorrow![index]!)} />       \n            </Flex>\n          )}\n          </Flex>\n        </Flex>\n        <Flex sx={{flexDirection: \"column\", gap: \"25px\", mb: 10}}>\n          <BlockText variant=\"primary\">Position Statistics</BlockText>\n          <Flex sx={{ justifyContent: \"left\", gap: \"8px\", flexDirection: \"column\"}}>\n              <BlockText>{\"Est. Debt Ratio: \".concat(humanFriendlyNumber(borrow.debtRatio!)).concat(\"/100\")}</BlockText>\n              <BlockText>{\"Leverage: \".concat(humanFriendlyNumber(borrow.lever!)).concat(\"x\")}</BlockText>\n              {/* change this to usd value */}\n              <BlockText>{\"Supply Value: \".concat(\" \").concat(humanFriendlyNumber(borrow.supplyValue!)).concat(\" Celo\")}</BlockText>\n              <BlockText>{\"Borrow Value: \".concat(\" \").concat(humanFriendlyNumber(borrow.borrowValue!)).concat(\" Celo\")}</BlockText>\n              <BlockText>{\"Position Value: \".concat(\" \").concat(humanFriendlyNumber(borrow.supplyValue! + borrow.borrowValue!)).concat(\" Celo\")}</BlockText>\n              <BlockText>Farming APY: {humanFriendlyNumber(borrow.lever! * Number(pool.apy))}%</BlockText>\n          </Flex>\n        </Flex>\n        <Flex sx={{ justifyContent: \"center\", mt: 6 }}>\n            {loading ? (\n              <Spinner />\n            ) : (\n              <Flex sx={{ justifyContent: \"center\", gap: \"6px\"}} >\n                {button[0]}\n              </Flex>                \n            )}\n        </Flex>\n      </Card>\n    </Flex>\n  );\n};\n","/Users/robertleifke/code/dahlia-interface/src/pages/Farm/newFarm/borrow.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/pages/Farm/newFarm/supply.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/pages/Position/PositionEntry.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/state/global/index.ts",[],"/Users/robertleifke/code/dahlia-interface/src/utils/address.ts",[],"/Users/robertleifke/code/dahlia-interface/src/utils/number.ts",[],"/Users/robertleifke/code/dahlia-interface/src/components/TokenInfo.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/hooks/useERCmulti.ts",["224"],"import React from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport IERC20_ABI from \"src/abis/dahlia_contracts/IERC20.json\"\nimport { IERC20 } from \"src/generated/IERC20\";\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\nimport { isAddress, toBN, AbiItem } from \"web3-utils\";\nimport { Bank } from \"src/config\";\nimport { Token } from \"src/utils/token\";\n\n\nexport const useERCmulti = (tokens: Token[]) => {\n  const { kit , address, network } = useContractKit();\n  const userAddress = address; \n  const call = React.useCallback(async () => {\n      let arr = [];\n      for (let token of tokens) {\n        const address = token.address;\n        if (!address || !isAddress(address) || !userAddress) {\n            arr.push(null);\n        };\n        const ERCToken = (new kit.web3.eth.Contract(\n            IERC20_ABI.abi as AbiItem[],\n            address,\n          ) as unknown) as IERC20;\n          const allowance = toBN(\n            await ERCToken.methods.allowance(userAddress!, Bank[network.chainId]).call()\n          );\n          const balance = toBN(await ERCToken.methods.balanceOf(userAddress!).call());\n          arr.push({allowance, balance});\n      }\n      return arr;\n  }, [kit, userAddress, tokens]);\n  return useAsyncState(null, call);\n};\n","/Users/robertleifke/code/dahlia-interface/src/hooks/useERC.ts",[],"/Users/robertleifke/code/dahlia-interface/src/components/BlockText.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/utils/toastTx.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/components/FarmInfo.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/components/TokenInputForm.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/components/TokenSlider.tsx",["225"],"import { Token } from \"src/utils/token\";\nimport React from \"react\";\nimport {\n    Box,\n    Flex,\n  } from \"theme-ui\";\nimport { TokenAmountInfo } from \"src/components/TokenAmountInfo\";\nimport { Slider } from \"rsuite\";\nimport \"rsuite/dist/styles/rsuite-default.min.css\";\n\n\ninterface Props {\n  token: Token;\n  amount: string;\n  setAmount: any,\n  max: string;\n}\n\nexport const TokenSlider: React.FC<Props> = ({ token, amount, setAmount, max}: Props) => {\n    const start: number = Number(max) / 3; \n    React.useEffect(() => setAmount(String(start)), []);\n  return (\n    <Flex sx={{ alignItems: \"center\" }}>\n    <Box sx={{ width: \"100%\" }} mr={2}>\n      <Flex sx={{ width: \"100%\", alignItems: \"center\"}}>\n          <Slider\n              progress\n              defaultValue={start}\n              style={{width: \"100%\"}}\n              step={.001}\n              max={Number(max)}\n              onChange={(value) => setAmount(String(value))}\n          />      \n        <TokenAmountInfo token={token} amount={amount} />\n      </Flex>   \n    </Box>\n  </Flex>\n  )\n};\n","/Users/robertleifke/code/dahlia-interface/src/components/TokenAmountInfo.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/utils/eth.ts",[],"/Users/robertleifke/code/dahlia-interface/src/hooks/useSafeBox.ts",[],"/Users/robertleifke/code/dahlia-interface/src/components/TokenBorrowInfo.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/components/BoxTokenAmountInfo.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/components/DahliaTokenInfo.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/components/BlockscoutTxLink.tsx",[],"/Users/robertleifke/code/dahlia-interface/src/components/PoolIcon.tsx",[],{"ruleId":"226","severity":1,"message":"227","line":6,"column":31,"nodeType":"228","messageId":"229","endLine":6,"endColumn":40},{"ruleId":"226","severity":1,"message":"230","line":60,"column":9,"nodeType":"228","messageId":"229","endLine":60,"endColumn":16},{"ruleId":"231","severity":1,"message":"232","line":181,"column":6,"nodeType":"233","endLine":181,"endColumn":74,"suggestions":"234"},{"ruleId":"231","severity":1,"message":"235","line":182,"column":6,"nodeType":"233","endLine":182,"endColumn":111,"suggestions":"236"},{"ruleId":"231","severity":1,"message":"237","line":32,"column":6,"nodeType":"233","endLine":32,"endColumn":32,"suggestions":"238"},{"ruleId":"231","severity":1,"message":"239","line":21,"column":53,"nodeType":"233","endLine":21,"endColumn":55,"suggestions":"240"},"@typescript-eslint/no-unused-vars","'Alfajores' is defined but never used.","Identifier","unusedVar","'zeroAdd' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useMemo has missing dependencies: 'approveButton', 'buttonLoading', 'confirmButton', 'done', 'history', 'lpTok', and 'setPage'. Either include them or remove the dependency array.","ArrayExpression",["241"],"React Hook React.useMemo has missing dependencies: 'approveButton', 'done', 'history', and 'setPage'. Either include them or remove the dependency array.",["242"],"React Hook React.useCallback has a missing dependency: 'network.chainId'. Either include it or remove the dependency array.",["243"],"React Hook React.useEffect has missing dependencies: 'setAmount' and 'start'. Either include them or remove the dependency array. If 'setAmount' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["244"],{"desc":"245","fix":"246"},{"desc":"245","fix":"247"},{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},"Update the dependencies array to be: [done, history, setPage, tokenStates, erc, supply.tokenSupply, supply.lpSupply, approveButton, pool.tokens, buttonLoading, confirmButton, lpTok]",{"range":"252","text":"253"},{"range":"254","text":"253"},"Update the dependencies array to be: [tokens, userAddress, kit.web3.eth.Contract, network.chainId]",{"range":"255","text":"256"},"Update the dependencies array to be: [setAmount, start]",{"range":"257","text":"258"},[6065,6133],"[done, history, setPage, tokenStates, erc, supply.tokenSupply, supply.lpSupply, approveButton, pool.tokens, buttonLoading, confirmButton, lpTok]",[6087,6192],[1214,1240],"[tokens, userAddress, kit.web3.eth.Contract, network.chainId]",[545,547],"[setAmount, start]"]