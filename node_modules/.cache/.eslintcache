[{"/Users/kylescott/src/dahlia-interface/src/index.tsx":"1","/Users/kylescott/src/dahlia-interface/src/serviceWorker.ts":"2","/Users/kylescott/src/dahlia-interface/src/App.tsx":"3","/Users/kylescott/src/dahlia-interface/src/state/index.ts":"4","/Users/kylescott/src/dahlia-interface/src/theme/index.ts":"5","/Users/kylescott/src/dahlia-interface/src/components/Header.tsx":"6","/Users/kylescott/src/dahlia-interface/src/pages/Position/Position.tsx":"7","/Users/kylescott/src/dahlia-interface/src/pages/Farm/Farm.tsx":"8","/Users/kylescott/src/dahlia-interface/src/pages/Farm/newFarm/NewFarm.tsx":"9","/Users/kylescott/src/dahlia-interface/src/pages/Position/Add/add.tsx":"10","/Users/kylescott/src/dahlia-interface/src/pages/Position/Remove/remove.tsx":"11","/Users/kylescott/src/dahlia-interface/src/components/Footer.tsx":"12","/Users/kylescott/src/dahlia-interface/src/pages/Earn/Earn.tsx":"13","/Users/kylescott/src/dahlia-interface/src/config.ts":"14","/Users/kylescott/src/dahlia-interface/src/utils/token.ts":"15","/Users/kylescott/src/dahlia-interface/src/components/Logo.tsx":"16","/Users/kylescott/src/dahlia-interface/src/components/ConnectWallet.tsx":"17","/Users/kylescott/src/dahlia-interface/src/pages/Earn/Supply/index.tsx":"18","/Users/kylescott/src/dahlia-interface/src/pages/Earn/Withdraw/index.tsx":"19","/Users/kylescott/src/dahlia-interface/src/hooks/useAsyncState.ts":"20","/Users/kylescott/src/dahlia-interface/src/pages/Farm/FarmEntry.tsx":"21","/Users/kylescott/src/dahlia-interface/src/pages/Position/PositionEntry.tsx":"22","/Users/kylescott/src/dahlia-interface/src/utils/number.ts":"23","/Users/kylescott/src/dahlia-interface/src/pages/Position/Add/borrow.tsx":"24","/Users/kylescott/src/dahlia-interface/src/hooks/useTVL.ts":"25","/Users/kylescott/src/dahlia-interface/src/pages/Position/Add/supply.tsx":"26","/Users/kylescott/src/dahlia-interface/src/pages/Farm/newFarm/borrow.tsx":"27","/Users/kylescott/src/dahlia-interface/src/pages/Farm/newFarm/confirm.tsx":"28","/Users/kylescott/src/dahlia-interface/src/pages/Position/Add/confirm.tsx":"29","/Users/kylescott/src/dahlia-interface/src/pages/Farm/newFarm/supply.tsx":"30","/Users/kylescott/src/dahlia-interface/src/pages/Position/Remove/payback.tsx":"31","/Users/kylescott/src/dahlia-interface/src/pages/Position/Remove/confirm.tsx":"32","/Users/kylescott/src/dahlia-interface/src/pages/Position/Remove/removeTokens.tsx":"33","/Users/kylescott/src/dahlia-interface/src/pages/Earn/EarnEntry.tsx":"34","/Users/kylescott/src/dahlia-interface/src/state/global/index.ts":"35","/Users/kylescott/src/dahlia-interface/src/hooks/useAPR.ts":"36","/Users/kylescott/src/dahlia-interface/src/hooks/useSafeBox.ts":"37","/Users/kylescott/src/dahlia-interface/src/utils/eth.ts":"38","/Users/kylescott/src/dahlia-interface/src/components/Button.tsx":"39","/Users/kylescott/src/dahlia-interface/src/components/TokenInfo.tsx":"40","/Users/kylescott/src/dahlia-interface/src/components/TokenAmountInfo.tsx":"41","/Users/kylescott/src/dahlia-interface/src/components/BlockText.tsx":"42","/Users/kylescott/src/dahlia-interface/src/hooks/useERC.ts":"43","/Users/kylescott/src/dahlia-interface/src/hooks/useERCmulti.ts":"44","/Users/kylescott/src/dahlia-interface/src/utils/swap.ts":"45","/Users/kylescott/src/dahlia-interface/src/utils/toastTx.tsx":"46","/Users/kylescott/src/dahlia-interface/src/components/TokenSlider.tsx":"47","/Users/kylescott/src/dahlia-interface/src/components/TokenInputForm.tsx":"48","/Users/kylescott/src/dahlia-interface/src/utils/address.ts":"49","/Users/kylescott/src/dahlia-interface/src/components/TokenBorrowInfo.tsx":"50","/Users/kylescott/src/dahlia-interface/src/components/FarmInfo.tsx":"51","/Users/kylescott/src/dahlia-interface/src/components/RewardsTokenInfo.tsx":"52","/Users/kylescott/src/dahlia-interface/src/components/BoxTokenAmountInfo.tsx":"53","/Users/kylescott/src/dahlia-interface/src/components/BlockscoutTxLink.tsx":"54","/Users/kylescott/src/dahlia-interface/src/components/DahliaTokenInfo.tsx":"55","/Users/kylescott/src/dahlia-interface/src/components/PoolIcon.tsx":"56"},{"size":2385,"mtime":1636049657705,"results":"57","hashOfConfig":"58"},{"size":5332,"mtime":1631226024909,"results":"59","hashOfConfig":"58"},{"size":2222,"mtime":1636049657266,"results":"60","hashOfConfig":"58"},{"size":368,"mtime":1631226024915,"results":"61","hashOfConfig":"58"},{"size":5619,"mtime":1636049657716,"results":"62","hashOfConfig":"58"},{"size":1805,"mtime":1636049657694,"results":"63","hashOfConfig":"58"},{"size":3722,"mtime":1637012635004,"results":"64","hashOfConfig":"58"},{"size":956,"mtime":1636049657707,"results":"65","hashOfConfig":"58"},{"size":1665,"mtime":1636049657708,"results":"66","hashOfConfig":"58"},{"size":1897,"mtime":1636049657710,"results":"67","hashOfConfig":"58"},{"size":1707,"mtime":1636058283905,"results":"68","hashOfConfig":"58"},{"size":1791,"mtime":1637012634999,"results":"69","hashOfConfig":"58"},{"size":1098,"mtime":1637012644497,"results":"70","hashOfConfig":"58"},{"size":4549,"mtime":1638210196263,"results":"71","hashOfConfig":"58"},{"size":1273,"mtime":1631226024912,"results":"72","hashOfConfig":"58"},{"size":767,"mtime":1636049657695,"results":"73","hashOfConfig":"58"},{"size":856,"mtime":1636049657693,"results":"74","hashOfConfig":"58"},{"size":4671,"mtime":1637012644498,"results":"75","hashOfConfig":"58"},{"size":5125,"mtime":1637012644498,"results":"76","hashOfConfig":"58"},{"size":1065,"mtime":1636088988230,"results":"77","hashOfConfig":"58"},{"size":6759,"mtime":1638210196265,"results":"78","hashOfConfig":"58"},{"size":10399,"mtime":1638210196265,"results":"79","hashOfConfig":"58"},{"size":471,"mtime":1637012635005,"results":"80","hashOfConfig":"58"},{"size":15200,"mtime":1637012644499,"results":"81","hashOfConfig":"58"},{"size":3510,"mtime":1638210196265,"results":"82","hashOfConfig":"58"},{"size":7236,"mtime":1637012644500,"results":"83","hashOfConfig":"58"},{"size":12610,"mtime":1637166136006,"results":"84","hashOfConfig":"58"},{"size":10499,"mtime":1637012644499,"results":"85","hashOfConfig":"58"},{"size":11951,"mtime":1637012644499,"results":"86","hashOfConfig":"58"},{"size":4383,"mtime":1637012644499,"results":"87","hashOfConfig":"58"},{"size":11511,"mtime":1637012644500,"results":"88","hashOfConfig":"58"},{"size":8037,"mtime":1637012644500,"results":"89","hashOfConfig":"58"},{"size":6337,"mtime":1637012644501,"results":"90","hashOfConfig":"58"},{"size":5512,"mtime":1637012635001,"results":"91","hashOfConfig":"58"},{"size":696,"mtime":1631592018305,"results":"92","hashOfConfig":"58"},{"size":4840,"mtime":1638210196264,"results":"93","hashOfConfig":"58"},{"size":860,"mtime":1631226024921,"results":"94","hashOfConfig":"58"},{"size":199,"mtime":1636049657716,"results":"95","hashOfConfig":"58"},{"size":516,"mtime":1637012644497,"results":"96","hashOfConfig":"58"},{"size":516,"mtime":1636049657696,"results":"97","hashOfConfig":"58"},{"size":749,"mtime":1634428247621,"results":"98","hashOfConfig":"58"},{"size":203,"mtime":1631226024917,"results":"99","hashOfConfig":"58"},{"size":1091,"mtime":1631226024921,"results":"100","hashOfConfig":"58"},{"size":1317,"mtime":1636049657702,"results":"101","hashOfConfig":"58"},{"size":2252,"mtime":1636049657717,"results":"102","hashOfConfig":"58"},{"size":344,"mtime":1636049657718,"results":"103","hashOfConfig":"58"},{"size":1043,"mtime":1636049657697,"results":"104","hashOfConfig":"58"},{"size":1535,"mtime":1636049657696,"results":"105","hashOfConfig":"58"},{"size":276,"mtime":1631226024914,"results":"106","hashOfConfig":"58"},{"size":521,"mtime":1636049657696,"results":"107","hashOfConfig":"58"},{"size":569,"mtime":1636049657694,"results":"108","hashOfConfig":"58"},{"size":554,"mtime":1636049657695,"results":"109","hashOfConfig":"58"},{"size":416,"mtime":1636049657693,"results":"110","hashOfConfig":"58"},{"size":453,"mtime":1631226024920,"results":"111","hashOfConfig":"58"},{"size":511,"mtime":1636049657694,"results":"112","hashOfConfig":"58"},{"size":481,"mtime":1636049657695,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"1c5izu3",{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"116"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"116"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"116"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"116"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"116"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"116"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"116"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"116"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"116"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"116"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"116"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"116"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"116"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"/Users/kylescott/src/dahlia-interface/src/index.tsx",[],["240","241"],"/Users/kylescott/src/dahlia-interface/src/serviceWorker.ts",[],"/Users/kylescott/src/dahlia-interface/src/App.tsx",[],"/Users/kylescott/src/dahlia-interface/src/state/index.ts",[],"/Users/kylescott/src/dahlia-interface/src/theme/index.ts",[],"/Users/kylescott/src/dahlia-interface/src/components/Header.tsx",[],"/Users/kylescott/src/dahlia-interface/src/pages/Position/Position.tsx",["242","243","244"],"import React, { useEffect, useState } from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { AbiItem } from \"web3-utils\";\nimport { HomoraBank } from \"src/generated/HomoraBank\";\nimport BANK_ABI from \"src/abis/dahlia_contracts/HomoraBank.json\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { Bank } from \"src/config\";\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\nimport { FARMS } from \"src/config\";\nimport { PositionEntry } from \"src/pages/Position/PositionEntry\";\n\nimport { IERC20Wrapper } from \"src/generated/IERC20Wrapper\";\nimport IERC20W_ABI from \"src/abis/dahlia_contracts/IERC20Wrapper.json\";\nimport { Spinner } from \"theme-ui\";\n\nexport const Position = () => {\n  const { kit, address, network } = useContractKit();\n\n  const bank = React.useMemo(\n    () =>\n      new kit.web3.eth.Contract(\n        BANK_ABI.abi as AbiItem[],\n        getAddress(Bank[network.chainId])\n      ) as unknown as HomoraBank,\n    [kit]\n  );\n\n  const call = React.useCallback(async () => {\n    try {\n      const info = [];\n      const nextPositionId = await bank.methods.nextPositionId().call();\n      let batch = [];\n      for (let i = 1; i < Number(nextPositionId); i += 1) {\n        batch.push(bank.methods.getPositionInfo(i).call());\n      }\n      const results = await Promise.all(batch);\n      for (let i = 0; i < Number(nextPositionId)-1; i += 1) {\n        const positionId = i + 1;\n        const positionInfo = results[i];\n        if (\n          positionInfo &&\n          positionInfo!.owner.toLowerCase() === address!.toLowerCase()\n        ) {\n          const wrapper = new kit.web3.eth.Contract(\n            IERC20W_ABI.abi as AbiItem[],\n            positionInfo!.collToken\n          ) as unknown as IERC20Wrapper;\n          const underlying = await wrapper.methods\n            .getUnderlyingToken(positionInfo!.collId)\n            .call();\n          for (let farm of FARMS) {\n            if (\n              getAddress(underlying) === farm.lp &&\n              positionInfo!.collateralSize !== \"0\"\n            ) {\n              info.push({\n                collId: positionInfo!.collId,\n                collateralSize: positionInfo!.collateralSize,\n                collToken: positionInfo!.collToken,\n                positionId: positionId,\n                farm: farm,\n              });\n              break;\n            }\n          }\n        }\n      }\n      return info;\n    } catch (error) {\n      console.log(error);\n    }\n  }, [bank.methods, address, kit.web3.eth.Contract]);\n\n  const [info] = useAsyncState(null, call, \"positions\");\n\n  return (\n    <section className=\"max-w-screen-xl mx-auto\">\n      <div className=\"w-full text-center md:pb-0 pb-2 pt-2\">\n        <h2 className=\"tracking-tightest font-bold text-gray-700 text-5xl my-2\">\n          Manage your positions with ease.\n        </h2>\n      </div>\n\n      {info && info.length > 0 ? (\n        <section className=\"md:flex md:m-4 md:justify-center w-full md:flex-wrap\">\n          {info.map((x) => (\n            <PositionEntry\n              key={x.positionId}\n              collId={x.collId}\n              collateralSize={x.collateralSize}\n              positionId={x.positionId}\n              pool={x.farm!}\n              collToken={x.collToken}\n            />\n          ))}\n        </section>\n      ) : info && info.length === 0 ? (\n        <div className=\"bg-gray-100 rounded-sm p-4 flex justify-center items-center h-24 w-full mt-6\">\n          <p className=\"font-bold tracking-tight text-3xl\">\n            You have no open positions at this time.\n          </p>\n        </div>\n      ) : (\n        <div className=\"flex justify-center items-center h-64\">\n          <Spinner />\n        </div>\n      )}\n    </section>\n  );\n};\n","/Users/kylescott/src/dahlia-interface/src/pages/Farm/Farm.tsx",[],"/Users/kylescott/src/dahlia-interface/src/pages/Farm/newFarm/NewFarm.tsx",[],"/Users/kylescott/src/dahlia-interface/src/pages/Position/Add/add.tsx",[],"/Users/kylescott/src/dahlia-interface/src/pages/Position/Remove/remove.tsx",[],"/Users/kylescott/src/dahlia-interface/src/components/Footer.tsx",[],"/Users/kylescott/src/dahlia-interface/src/pages/Earn/Earn.tsx",["245"],"import { COLLATERAL_TOKENS } from \"src/config\";\nimport { EarnEntry } from \"src/pages/Earn/EarnEntry\";\nimport { useTVL } from \"src/hooks/useTVL\";\nimport { humanFriendlyNumber } from \"src/utils/number\";\n\nexport const Earn = () => {\n  const [tvl, refetchTVL] = useTVL();\n  return (\n    <div className=\"\">\n      <section className=\"max-w-screen-xl mx-auto\">\n        <div className=\"w-full text-center md:pb-0 pb-2 pt-2\">\n          <h2 className=\"tracking-tightest font-bold text-gray-700 text-5xl my-2\">\n            Lend assets for the highest yield.\n          </h2>\n        </div>\n\n        {tvl && (\n          <div className=\"w-full text-center md:pb-0 pb-2 pt-2\">\n            <h2 className=\"tracking-tightest font-bold text-gray-700 text-2xl my-2\">\n              TVL: ${tvl ? humanFriendlyNumber(tvl) : \"0\"}\n            </h2>\n          </div>\n        )}\n\n        <section className=\"md:flex md:m-4 md:justify-center w-full\">\n          {COLLATERAL_TOKENS.map((token) => (\n            <EarnEntry key={token.address} token={token} />\n          ))}\n        </section>\n      </section>\n    </div>\n  );\n};\n","/Users/kylescott/src/dahlia-interface/src/config.ts",[],"/Users/kylescott/src/dahlia-interface/src/utils/token.ts",[],"/Users/kylescott/src/dahlia-interface/src/components/Logo.tsx",[],"/Users/kylescott/src/dahlia-interface/src/components/ConnectWallet.tsx",[],"/Users/kylescott/src/dahlia-interface/src/pages/Earn/Supply/index.tsx",[],"/Users/kylescott/src/dahlia-interface/src/pages/Earn/Withdraw/index.tsx",["246"],"import React from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { useParams } from \"react-router-dom\";\nimport { DEFAULT_GAS_PRICE, safeBoxMap, Bank } from \"src/config\";\nimport { AbiItem, toBN, toWei, fromWei } from \"web3-utils\";\nimport { toastTx } from \"src/utils/toastTx\";\nimport { toast } from \"react-toastify\";\nimport SAFEBOX_ABI from \"src/abis/dahlia_contracts/SafeBox.json\";\nimport { SafeBox } from \"src/generated/SafeBox\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { useSafeBox } from \"src/hooks/useSafeBox\";\nimport BANK_ABI from \"src/abis/dahlia_contracts/HomoraBank.json\";\nimport { HomoraBank } from \"src/generated/HomoraBank\";\nimport CERC20_ABI from \"src/abis/fountain_of_youth/CErc20Immutable.json\";\nimport { CErc20Immutable } from \"src/generated/CErc20Immutable\";\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\nimport { getToken } from \"src/utils/token\";\nimport { CaretLeft } from \"phosphor-react\";\nimport { Flex, Spinner } from \"theme-ui\";\nimport { useHistory } from \"react-router-dom\";\nimport { BoxTokenAmountInfo } from \"src/components/BoxTokenAmountInfo\";\nimport { TokenInputForm } from \"src/components/TokenInputForm\";\nimport { BlockText } from \"src/components/BlockText\";\nimport { Button } from \"src/components/Button\";\n\nexport const Withdraw: React.FC = () => {\n  // TODO: does the number of decimals factor in?\n  const { kit, getConnectedKit, network } = useContractKit();\n  const [amount, setAmount] = React.useState(\"1\");\n  const [withdrawLoading, setWithdrawLoading] = React.useState(false);\n  const [buttonLoading, setButtonLoading] = React.useState(true);\n  const { tokenAddress } = useParams<{ tokenAddress: string }>();\n  const [safeBox, refetchSafeBox] = useSafeBox(safeBoxMap.get(tokenAddress)!);\n  const history = useHistory();\n\n  const bank = React.useMemo(\n    () =>\n      new kit.web3.eth.Contract(\n        BANK_ABI.abi as AbiItem[],\n        getAddress(Bank[network.chainId])\n      ) as unknown as HomoraBank,\n    [kit]\n  );\n\n  const call = React.useCallback(async () => {\n    try {\n      const bankInfo = await bank.methods.getBankInfo(tokenAddress).call();\n      const cToken = new kit.web3.eth.Contract(\n        CERC20_ABI as AbiItem[],\n        bankInfo.cToken\n      ) as unknown as CErc20Immutable;\n      const exchangeRate = await cToken.methods.exchangeRateStored().call();\n      return {\n        exchange: toBN(exchangeRate),\n      };\n    } catch (error) {\n      console.log(error);\n    }\n  }, [bank, tokenAddress, kit]);\n\n  const [info] = useAsyncState(null, call);\n\n  const exchangeRate = info ? Number(fromWei(info.exchange)) : 1;\n\n  const withdrawButton = (\n    <Button\n      onClick={async () => {\n        const kit = await getConnectedKit();\n        // kit is connected to a wallet\n        const safeBox = new kit.web3.eth.Contract(\n          SAFEBOX_ABI.abi as AbiItem[],\n          safeBoxMap.get(getAddress(tokenAddress))!\n        ) as unknown as SafeBox;\n        try {\n          setWithdrawLoading(true);\n          const tx = await safeBox.methods.withdraw(toWei(amount)).send({\n            from: kit.defaultAccount,\n            gasPrice: DEFAULT_GAS_PRICE,\n          });\n          toastTx(tx.transactionHash);\n          refetchSafeBox();\n        } catch (e: any) {\n          toast(e.message);\n        } finally {\n          setWithdrawLoading(false);\n          setAmount(\"0\");\n        }\n      }}\n    >\n      Withdraw\n    </Button>\n  );\n\n  const loading = withdrawLoading || buttonLoading;\n  let button = withdrawButton;\n  if (safeBox) {\n    const fmtCost = amount === \"\" ? \"0\" : amount;\n    const amountBN = toBN(toWei(fmtCost));\n    if (Number(amount) <= 0) {\n      button = <Button disabled>Enter a valid amount</Button>;\n    } else if (safeBox.balance.lt(amountBN)) {\n      button = <Button disabled={true}>Insufficient funds</Button>;\n    }\n    if (buttonLoading) setButtonLoading(false);\n  }\n\n  const token = getToken(tokenAddress)!;\n\n  return (\n    <div className=\"bg-gray-100 rounded-md shadow-md p-4 m-2 md:max-w-2xl max-w-xl mx-auto\">\n      <p\n        onClick={() => {\n          history.goBack();\n        }}\n        className=\"flex items-center hover:opacity-75 cursor-pointer tracking-tight text-base font-bold\"\n      >\n        {\" \"}\n        <CaretLeft size={20} />\n        Back\n      </p>\n\n      <h1 className=\"text-gray-800 text-3xl font-bold tracking-tight text-center\">\n        Withdraw\n      </h1>\n\n      <TokenInputForm\n        key={token.address}\n        dahlia\n        token={token}\n        amount={amount}\n        setAmount={setAmount}\n        balance={safeBox ? safeBox.balance : null}\n      />\n\n      <Flex\n        sx={{\n          justifyContent: \"center\",\n          gap: \"10px\",\n          mt: 6,\n          alignItems: \"center\",\n        }}\n      >\n        <BlockText>You will receive</BlockText>\n        <BoxTokenAmountInfo\n          token={token}\n          amount={String(Number(amount) * exchangeRate)}\n        />\n      </Flex>\n      <Flex\n        sx={{ justifyContent: \"center\", alignItems: \"center\", mt: 6, mb: 4 }}\n      >\n        {loading ? <Spinner /> : button}\n      </Flex>\n    </div>\n  );\n};\n","/Users/kylescott/src/dahlia-interface/src/hooks/useAsyncState.ts",[],"/Users/kylescott/src/dahlia-interface/src/pages/Farm/FarmEntry.tsx",["247","248"],"/Users/kylescott/src/dahlia-interface/src/pages/Position/PositionEntry.tsx",["249","250","251"],"/Users/kylescott/src/dahlia-interface/src/utils/number.ts",[],"/Users/kylescott/src/dahlia-interface/src/pages/Position/Add/borrow.tsx",["252","253","254","255","256"],"import React from \"react\";\nimport { Card, Flex, Heading, Text } from \"theme-ui\";\nimport { CaretLeft } from \"phosphor-react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { atom, useSetRecoilState, useRecoilState } from \"recoil\";\nimport { BlockText } from \"src/components/BlockText\";\nimport { Token } from \"src/utils/token\";\nimport { lpToken } from \"src/config\";\nimport { TokenAmountInfo } from \"src/components/TokenAmountInfo\";\nimport { fromWei, toWei, toBN, AbiItem } from \"web3-utils\";\nimport { TokenSlider } from \"src/components/TokenSlider\";\nimport BANK_ABI from \"src/abis/dahlia_contracts/HomoraBank.json\";\nimport PROXYORACLE_ABI from \"src/abis/dahlia_contracts/ProxyOracle.json\";\nimport COREORACLE_ABI from \"src/abis/dahlia_contracts/CoreOracle.json\";\nimport { HomoraBank } from \"src/generated/HomoraBank\";\nimport { ProxyOracle } from \"src/generated/ProxyOracle\";\nimport { CoreOracle } from \"src/generated/CoreOracle\";\nimport { Bank } from \"src/config\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\nimport { humanFriendlyNumber } from \"src/utils/number\";\nimport BN from \"bn.js\";\nimport {\n  addPageState,\n  addPage,\n  addPositionState,\n} from \"src/pages/Position/Add/add\";\nimport { addSupplyState } from \"src/pages/Position/Add/supply\";\nimport { poolState } from \"src/pages/Farm/newFarm/NewFarm\";\nimport { CErc20Immutable } from \"src/generated/CErc20Immutable\";\nimport CERC20_ABI from \"src/abis/fountain_of_youth/CErc20Immutable.json\";\nimport UNI_PAIR from \"src/abis/dahlia_contracts/dependencies/ubeswap/ubeswap@mainnet-v1/IUniswapV2Pair.json\";\nimport { IUniswapV2Pair } from \"src/generated/IUniswapV2Pair\";\nimport { priceImpact } from \"src/utils/swap\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button } from \"src/components/Button\";\n\ninterface borrowProps {\n  tokenBorrow: any[] | null;\n  supplyValue: number | null;\n  borrowValue: number | null;\n  debtRatio: number | null;\n  lever: number | null;\n  impact: number | null;\n  apy: number | null;\n}\n\nconst emptyBorrowState: borrowProps = {\n  tokenBorrow: null,\n  supplyValue: null,\n  borrowValue: null,\n  debtRatio: null,\n  lever: null,\n  impact: null,\n  apy: null,\n};\n\nexport const addBorrowState = atom({\n  key: \"addBorrowState\",\n  default: emptyBorrowState,\n});\n\nexport const Borrow: React.FC = () => {\n  const scale = toBN(2).pow(toBN(112));\n  const [pool] = useRecoilState(poolState);\n  const setPage = useSetRecoilState(addPageState);\n  const [init, setInit] = React.useState(false);\n  const [supply] = useRecoilState(addSupplyState);\n  const [position] = useRecoilState(addPositionState);\n  const setBorrow = useSetRecoilState(addBorrowState);\n\n  const lpTok: Token = new Token({\n    ...lpToken,\n    address: pool.lp,\n  });\n\n  const { kit, network } = useContractKit();\n  const [amounts, setAmounts] = React.useState<string[] | null>(null);\n\n  const bank = React.useMemo(\n    () =>\n      new kit.web3.eth.Contract(\n        BANK_ABI.abi as AbiItem[],\n        getAddress(Bank[network.chainId])\n      ) as unknown as HomoraBank,\n    [kit]\n  );\n\n  const history = useHistory();\n  const lp = React.useMemo(\n    () =>\n      new kit.web3.eth.Contract(\n        UNI_PAIR.abi as AbiItem[],\n        pool.lp\n      ) as unknown as IUniswapV2Pair,\n    [kit.web3.eth.Contract, pool.lp]\n  );\n\n  const call = React.useCallback(async () => {\n    try {\n      const factors: {\n        borrowFactor: string;\n        collateralFactor: string;\n        liqIncentive: string;\n        0: string;\n        1: string;\n        2: string;\n      }[] = [];\n      const prices: any[] = [];\n      const availableBorrows: any[] = [];\n      const borrowRates: any[] = [];\n      const oracle = await bank.methods.oracle().call();\n      const proxyOracle = new kit.web3.eth.Contract(\n        PROXYORACLE_ABI.abi as AbiItem[],\n        oracle\n      ) as unknown as ProxyOracle;\n      const source = await proxyOracle.methods.source().call();\n      const coreOracle = new kit.web3.eth.Contract(\n        COREORACLE_ABI.abi as AbiItem[],\n        source\n      ) as unknown as CoreOracle;\n      for (let token of pool.tokens) {\n        const bankInfo = await bank.methods.getBankInfo(token.address).call();\n        const cToken = new kit.web3.eth.Contract(\n          CERC20_ABI as AbiItem[],\n          bankInfo.cToken\n        ) as unknown as CErc20Immutable;\n        const totalSupply = toBN(await cToken.methods.totalSupply().call());\n        const totalBorrows = toBN(await cToken.methods.totalBorrows().call());\n        const totalReserves = toBN(await cToken.methods.totalReserves().call());\n        availableBorrows.push(totalSupply.sub(totalBorrows).sub(totalReserves));\n        const factor = await proxyOracle.methods\n          .tokenFactors(token.address)\n          .call();\n        factors.push(factor);\n        const price = await coreOracle.methods.getCELOPx(token.address).call();\n        prices.push(toBN(price));\n        const blocksPerYear = toBN(6311520);\n        const borrowRate = toBN(\n          await cToken.methods.borrowRatePerBlock().call()\n        ).mul(blocksPerYear);\n        borrowRates.push(borrowRate);\n      }\n      const lpPrice = await coreOracle.methods.getCELOPx(pool.lp).call();\n      const lpFactor = await proxyOracle.methods.tokenFactors(pool.lp).call();\n\n      const existingCollateral = toBN(\n        await bank.methods.getCollateralCELOValue(position.positionId!).call()\n      );\n      const existingBorrow = toBN(\n        await bank.methods.getBorrowCELOValue(position.positionId!).call()\n      );\n\n      const weightedSuppliedCollateralValue =\n        supply\n          .tokenSupply!.map(\n            (x, i) =>\n              Number(fromWei(x)) *\n              (Number(fromWei(prices[i]!)) / Number(fromWei(scale))) *\n              (Number(lpFactor.collateralFactor) / 10000)\n          )\n          .reduce((sum, current) => sum + current, 0) +\n        Number(fromWei(supply.lpSupply!)) *\n          (Number(fromWei(lpPrice)) / Number(fromWei(scale))) *\n          (Number(lpFactor.collateralFactor) / 10000) +\n        Number(fromWei(existingCollateral)) -\n        Number(fromWei(existingBorrow));\n\n      const borrowMax = prices.map(\n        (x, i) =>\n          weightedSuppliedCollateralValue /\n          ((Number(fromWei(x)) / Number(fromWei(scale))) *\n            ((Number(factors[i]?.borrowFactor) -\n              Number(lpFactor.collateralFactor)) /\n              10000))\n      );\n\n      const maxAmounts = borrowMax.map((x, index) =>\n        String(Math.min(x, Number(fromWei(availableBorrows[index]!))))\n      );\n\n      const totalSupply = toBN(await lp.methods.totalSupply().call());\n      let reserve0: BN;\n      let reserve1: BN;\n      const getReserves = await lp.methods.getReserves().call();\n      const balance = toBN(position.collateralSize!);\n      if (\n        getAddress(await lp.methods.token0().call()) ===\n        getAddress(pool.tokens[0]!.address)\n      ) {\n        reserve0 = toBN(getReserves.reserve0);\n        reserve1 = toBN(getReserves.reserve1);\n      } else {\n        reserve0 = toBN(getReserves.reserve1);\n        reserve1 = toBN(getReserves.reserve0);\n      }\n      const existingPosition = [reserve0, reserve1].map((reserve) =>\n        reserve.mul(balance).div(totalSupply)\n      );\n\n      const positionDebts = await bank.methods\n        .getPositionDebts(position.positionId!)\n        .call();\n\n      let prevBorrow: any[] = [];\n\n      for (let i = 0; i < pool.tokens.length; i += 1) {\n        const token = pool.tokens[i]!;\n        for (let j = 0; j < positionDebts.tokens.length; j += 1) {\n          if (\n            token.address.toLowerCase() ===\n            positionDebts.tokens[j]?.toLowerCase()\n          ) {\n            prevBorrow.push(toBN(positionDebts.debts[j]!));\n            break;\n          }\n        }\n        if (prevBorrow.length === i) prevBorrow.push(toBN(0));\n      }\n\n      const prevCollateral = existingPosition.map((x, i) =>\n        x.sub(prevBorrow[i]!)\n      );\n\n      if (!init) {\n        setInit(true);\n        setAmounts(maxAmounts.map((x) => String((Number(x) / 3).toFixed(3))));\n      }\n\n      return {\n        tokenFactor: factors,\n        celoPrices: prices,\n        lpPrice,\n        lpFactor,\n        maxAmounts,\n        existingCollateral,\n        existingBorrow,\n        prevBorrow,\n        prevCollateral,\n        reserve0,\n        reserve1,\n        borrowRates,\n      };\n    } catch (error) {\n      console.log(error);\n    }\n  }, [\n    bank.methods,\n    kit.web3.eth.Contract,\n    pool.lp,\n    pool.tokens,\n    position.positionId,\n    position.collateralSize,\n    supply.tokenSupply,\n    supply.lpSupply,\n    scale,\n    lp.methods,\n    init,\n  ]);\n\n  const [info] = useAsyncState(null, call);\n\n  if (!amounts!) return null;\n\n  const individualBorrow = info\n    ? amounts!.map(\n        (x, i) =>\n          (Number(x) + Number(fromWei(info.prevBorrow[i]!))) *\n          (Number(fromWei(info?.celoPrices[i]!)) / Number(fromWei(scale)))\n      )\n    : [];\n\n  const borrowValue = individualBorrow\n    ? individualBorrow.reduce((sum, current) => sum + current, 0)\n    : 0;\n  const supplyValue = info\n    ? supply\n        .tokenSupply!.map(\n          (x, i) =>\n            Number(fromWei(x.add(info.prevCollateral[i]!))) *\n            (Number(fromWei(info?.celoPrices[i]!)) / Number(fromWei(scale)))\n        )\n        .reduce((sum, current) => sum + current, Number(fromWei(supply.lpSupply)) * (Number(fromWei(info?.lpPrice)) / Number(fromWei(scale))))\n    : 0;\n  const lever = 1 + borrowValue / supplyValue;\n\n  const impact = info\n    ? priceImpact(\n        supply.tokenSupply![0]!.add(toBN(toWei(amounts[0]!))),\n        supply.tokenSupply![1]!.add(toBN(toWei(amounts[1]!))),\n        info.reserve0,\n        info.reserve1\n      )\n    : 0;\n\n  const apy =\n    ((borrowValue + supplyValue) * (Number(pool.apy) / 100) -\n      individualBorrow\n        .map((x, i) => x * Number(fromWei(info?.borrowRates[i]!)))\n        .reduce((sum, current) => sum + current, 0)) /\n    supplyValue;\n\n  const numer = info\n    ? amounts!\n        .map(\n          (x, i) =>\n            Number(x) *\n            (Number(fromWei(info?.celoPrices[i]!)) / Number(fromWei(scale))) *\n            (Number(info.tokenFactor[i]?.borrowFactor) / 10000)\n        )\n        .reduce((sum, current) => sum + current, 0) +\n      Number(fromWei(info.existingBorrow))\n    : 0;\n  const denom =\n    info && supply\n      ? amounts!\n          .map(\n            (x, i) =>\n              (Number(x) + Number(fromWei(supply.tokenSupply![i]!))) *\n              (Number(fromWei(info?.celoPrices[i]!)) / Number(fromWei(scale))) *\n              (Number(info.lpFactor?.collateralFactor) / 10000)\n          )\n          .reduce(\n            (sum, current) => sum + current,\n            Number(fromWei(supply.lpSupply!)) *\n              (Number(fromWei(info?.lpPrice)) / Number(fromWei(scale))) *\n              ((Number(info.lpFactor?.collateralFactor) * (1 - impact)) / 10000)\n          ) + Number(fromWei(info.existingCollateral))\n      : 1;\n  const debtRatio = (numer / denom) * 100;\n\n  const continueButton = (\n    <Button\n      onClick={() => {\n        setBorrow({\n          tokenBorrow: amounts!.map((x) => toBN(toWei(String(x)))),\n          lever: lever,\n          debtRatio,\n          borrowValue,\n          supplyValue,\n          impact,\n          apy,\n        });\n        setPage(addPage.Confirm);\n      }}\n    >\n      Continue\n    </Button>\n  );\n\n  return (\n    <div className=\"bg-gray-100 rounded-md shadow-md p-4 m-2 md:max-w-2xl max-w-xl mx-auto\">\n      <p\n        onClick={() => {\n          setPage(addPage.Supply)\n        }}\n        className=\"flex items-center hover:opacity-75 cursor-pointer tracking-tight text-base font-bold\"\n      >\n        {\" \"}\n        <CaretLeft size={20} />\n        Back\n      </p>\n\n      <h1 className=\"text-gray-800 text-3xl font-bold tracking-tight text-center mb-6\">\n        Farm\n      </h1>\n      <Flex sx={{ flexDirection: \"column\", gap: \"25px\", mb: 10 }}>\n        <p className=\"text-xl font-bold tracking-tight text-gray-800\">\n          My position has\n        </p>\n        <Flex sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\" }}>\n          {pool &&\n            position &&\n            pool.tokens.map((tok, index) => (\n              <Flex\n                sx={{\n                  alignItems: \"center\",\n                  mr: 4,\n                  padding: 2,\n                  borderStyle: \"solid\",\n                  borderRadius: \"10px\",\n                }}\n              >\n                <TokenAmountInfo\n                  key={tok.address}\n                  token={tok}\n                  amount={fromWei(supply.existingBalance![index]!)}\n                />\n              </Flex>\n            ))}\n        </Flex>\n      </Flex>\n      <Flex sx={{ flexDirection: \"column\", gap: \"25px\", mb: 10 }}>\n        <p className=\"text-xl font-bold tracking-tight text-gray-800\">\n          I'm Supplying\n        </p>\n        <Flex sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\" }}>\n          {pool.tokens.map((tok, index) => (\n            <Flex\n              sx={{\n                alignItems: \"center\",\n                mr: 4,\n                padding: 2,\n                borderStyle: \"solid\",\n                borderRadius: \"10px\",\n              }}\n            >\n              <TokenAmountInfo\n                key={tok.address}\n                token={tok}\n                amount={fromWei(supply.tokenSupply![index]!)}\n              />\n            </Flex>\n          ))}\n          <Flex\n            sx={{\n              alignItems: \"center\",\n              mr: 4,\n              padding: 2,\n              borderStyle: \"solid\",\n              borderRadius: \"10px\",\n            }}\n          >\n            <TokenAmountInfo\n              key={lpTok.address}\n              token={lpTok}\n              amount={fromWei(supply.lpSupply!)}\n            />\n          </Flex>\n        </Flex>\n      </Flex>\n      <Flex sx={{ mb: 2, mt: \"25px\" }}>\n        <p className=\"text-xl font-bold tracking-tight text-gray-800\">\n          I'd like to borrow\n        </p>\n      </Flex>\n      <BlockText mb={2}>\n        {\"New Est. Debt Ratio: \"\n          .concat(humanFriendlyNumber(debtRatio))\n          .concat(\"/100\")}\n      </BlockText>\n      <BlockText mb={2}>\n        {\"New Leverage: \".concat(humanFriendlyNumber(lever)).concat(\"x\")}\n      </BlockText>\n      <BlockText mb={2}>\n        {\"Price Impact: \".concat(humanFriendlyNumber(impact * 100)).concat(\"%\")}\n      </BlockText>\n      <BlockText mb={2}>\n        {\"New Farming APR: \".concat(humanFriendlyNumber(apy * 100)).concat(\"%\")}\n      </BlockText>\n\n      {info &&\n        pool.tokens.map((tok, index) => (\n          <TokenSlider\n            key={tok.address}\n            token={tok}\n            amount={String(amounts![index])}\n            setAmount={(s: string) =>\n              setAmounts(amounts!.map((x, i) => (i === index ? s : x)))\n            }\n            max={info!.maxAmounts[index]!}\n          />\n        ))}\n      <Flex sx={{ justifyContent: \"center\", mt: 6 }}>\n        {debtRatio > 96 ? (\n          <Button disabled={true}>Debt ratio too high</Button>\n        ) : (\n          continueButton\n        )}\n      </Flex>\n    </div>\n  );\n};\n","/Users/kylescott/src/dahlia-interface/src/hooks/useTVL.ts",["257","258"],"/Users/kylescott/src/dahlia-interface/src/pages/Position/Add/supply.tsx",["259","260","261","262","263"],"import React from \"react\";\nimport { Button, Card, Flex, Heading, Spinner, Text } from \"theme-ui\";\nimport { useERC } from \"src/hooks/useERC\";\nimport { useERCmulti } from \"src/hooks/useERCmulti\";\nimport { TokenInputForm } from \"src/components/TokenInputForm\";\nimport { useSetRecoilState, useRecoilState, atom } from \"recoil\";\nimport { BlockText } from \"src/components/BlockText\";\nimport { Token } from \"src/utils/token\";\nimport { toWei, toBN, fromWei, AbiItem } from \"web3-utils\";\nimport { lpToken } from \"src/config\";\nimport BN from \"bn.js\";\nimport { TokenAmountInfo } from \"src/components/TokenAmountInfo\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport UNI_PAIR from \"src/abis/dahlia_contracts/dependencies/ubeswap/ubeswap@mainnet-v1/IUniswapV2Pair.json\";\nimport { IUniswapV2Pair } from \"src/generated/IUniswapV2Pair\";\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport {\n  addPageState,\n  addPage,\n  addPositionState,\n} from \"src/pages/Position/Add/add\";\nimport { poolState } from \"src/pages/Farm/newFarm/NewFarm\";\nimport { useHistory } from \"react-router-dom\";\nimport { CaretLeft } from \"phosphor-react\";\n\ninterface supplyProps {\n  tokenSupply: any[] | null;\n  lpSupply: any | null;\n  existingBalance: any[] | null;\n}\n\nconst emptyAddSupplyState: supplyProps = {\n  tokenSupply: null,\n  lpSupply: null,\n  existingBalance: null,\n};\n\nexport const addSupplyState = atom({\n  key: \"addSupplyState\",\n  default: emptyAddSupplyState,\n});\n\nexport const Supply: React.FC = () => {\n  const [pool] = useRecoilState(poolState);\n  const setPage = useSetRecoilState(addPageState);\n  const [buttonLoading, setButtonLoading] = React.useState(true);\n  const setSupply = useSetRecoilState(addSupplyState);\n  const [position] = useRecoilState(addPositionState);\n  const history = useHistory();\n\n  const { kit } = useContractKit();\n\n  const lpTok: Token = new Token({\n    ...lpToken,\n    address: pool.lp,\n  });\n  const [erc] = useERC(lpTok.address);\n  const [tokenStates] = useERCmulti(pool.tokens);\n\n  const [amounts, setAmounts] = React.useState(\n    Array<string>(pool.tokens.length).fill(\"0\")\n  );\n\n  React.useEffect(\n    () => setAmounts(Array<string>(pool.tokens.length).fill(\"0\")),\n    [pool.tokens.length]\n  );\n\n  const [lpAmount, setLPAmount] = React.useState(\"0\");\n\n  const lp = React.useMemo(\n    () =>\n      new kit.web3.eth.Contract(\n        UNI_PAIR.abi as AbiItem[],\n        pool.lp\n      ) as unknown as IUniswapV2Pair,\n    [kit.web3.eth.Contract, pool.lp]\n  );\n\n  const call = React.useCallback(async () => {\n    try {\n      const totalSupply = toBN(await lp.methods.totalSupply().call());\n      let reserve0: any;\n      let reserve1: any;\n      const getReserves = await lp.methods.getReserves().call();\n      const balance = toBN(position.collateralSize!);\n      if (\n        getAddress(await lp.methods.token0().call()) ===\n        getAddress(pool.tokens[0]!.address)\n      ) {\n        reserve0 = toBN(getReserves.reserve0);\n        reserve1 = toBN(getReserves.reserve1);\n      } else {\n        reserve0 = toBN(getReserves.reserve1);\n        reserve1 = toBN(getReserves.reserve0);\n      }\n      return [reserve0, reserve1].map((reserve) =>\n        reserve.mul(balance).div(totalSupply)\n      );\n    } catch (error) {\n      console.log(error);\n    }\n  }, [position, lp.methods, pool.tokens]);\n\n  const [info] = useAsyncState(null, call);\n\n  const continueButton = (\n    <Button\n      onClick={() => {\n        setSupply({\n          tokenSupply: amounts.map((x) => toBN(toWei(x))),\n          lpSupply: toBN(toWei(lpAmount)),\n          existingBalance: info!,\n        });\n        setPage(addPage.Borrow);\n      }}\n    >\n      Continue\n    </Button>\n  );\n\n  const invalid = <Button disabled>Enter a valid amount</Button>;\n  const insufficient = <Button disabled={true}>Insufficient funds</Button>;\n\n  let button = continueButton;\n  if (amounts.length === 0) return null;\n  if (tokenStates) {\n    for (let i = 0; i < tokenStates.length; i += 1) {\n      if (tokenStates[i]) {\n        const fmtCost = amounts[i] === \"\" ? \"0\" : amounts[i]!;\n        const amountBN = toBN(toWei(fmtCost));\n        if (Number(fmtCost) < 0 || amounts[i] === \"\") {\n          button = invalid;\n        } else if (tokenStates[i]?.balance.lt(amountBN)) {\n          button = insufficient;\n        }\n      }\n    }\n    if (erc) {\n      const fmtCost = lpAmount === \"\" ? \"0\" : lpAmount;\n      const amountBN = toBN(toWei(fmtCost));\n      if (Number(fmtCost) < 0 || lpAmount === \"\") {\n        button = invalid;\n      } else if (erc.balance.lt(amountBN)) {\n        button = insufficient;\n      }\n      if (amounts.every((x) => x === \"0\") && lpAmount === \"0\") button = invalid;\n      if (buttonLoading) setButtonLoading(false);\n    }\n  }\n\n  return (\n    <div className=\"bg-gray-100 rounded-md shadow-md p-4 m-2 md:max-w-2xl max-w-xl mx-auto\">\n      <p\n        onClick={() => {\n          history.goBack();\n        }}\n        className=\"flex items-center hover:opacity-75 cursor-pointer tracking-tight text-base font-bold\"\n      >\n        {\" \"}\n        <CaretLeft size={20} />\n        Back\n      </p>\n\n      <h1 className=\"text-gray-800 text-3xl font-bold tracking-tight text-center mb-6\">\n        Farm\n      </h1>\n      <Flex sx={{ flexDirection: \"column\", gap: \"25px\", mb: 10 }}>\n        <p className=\"text-xl font-bold tracking-tight text-gray-800 -mb-4\">\n          My position has\n        </p>\n        <Flex sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\" }}>\n          {info &&\n            pool.tokens.map((tok, index) => (\n              <Flex\n                sx={{\n                  alignItems: \"center\",\n                  mr: 4,\n                  padding: 2,\n                  borderStyle: \"solid\",\n                  borderRadius: \"10px\",\n                }}\n              >\n                <TokenAmountInfo\n                  key={tok.address + position.positionId}\n                  token={tok}\n                  amount={fromWei(info![index]!)}\n                />\n              </Flex>\n            ))}\n        </Flex>\n      </Flex>\n      <Flex sx={{ flexDirection: \"column\", gap: \"25px\", mb: 10 }}>\n        <p className=\"text-xl font-bold tracking-tight text-gray-800 -mb-8 mt-4\">\n          Supply More\n        </p>\n        {pool.tokens.map((tok, index) => (\n          <TokenInputForm\n            key={tok.address + position.positionId}\n            token={tok}\n            amount={amounts[index]!}\n            setAmount={(s: string) =>\n              setAmounts(amounts.map((x, i) => (i === index ? s : x)))\n            }\n            balance={\n              tokenStates && tokenStates![index]!\n                ? tokenStates![index]?.balance!\n                : null\n            }\n          />\n        ))}\n      </Flex>\n      <Flex sx={{ mt: \"25px\" }}>\n        <p className=\"text-xl font-bold tracking-tight text-gray-800 -mb-2 mt-4\">\n          Supply LP Token\n        </p>\n      </Flex>\n      <TokenInputForm\n        token={lpTok}\n        amount={lpAmount}\n        setAmount={setLPAmount}\n        balance={erc ? erc.balance : null}\n      />\n      <Flex sx={{ justifyContent: \"center\", mt: 6 }}>\n        {buttonLoading ? <Spinner /> : button}\n      </Flex>\n    </div>\n  );\n};\n","/Users/kylescott/src/dahlia-interface/src/pages/Farm/newFarm/borrow.tsx",["264","265"],"import React from \"react\";\nimport { Flex } from \"theme-ui\";\nimport { CaretLeft } from \"phosphor-react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { atom, useSetRecoilState, useRecoilState } from \"recoil\";\nimport {\n  farmPageState,\n  farmPage,\n  poolState,\n} from \"src/pages/Farm/newFarm/NewFarm\";\nimport { BlockText } from \"src/components/BlockText\";\nimport { Token } from \"src/utils/token\";\nimport { lpToken } from \"src/config\";\nimport { TokenAmountInfo } from \"src/components/TokenAmountInfo\";\nimport { newSupplyState } from \"src/pages/Farm/newFarm/supply\";\nimport { fromWei, toWei, toBN, AbiItem } from \"web3-utils\";\nimport { TokenSlider } from \"src/components/TokenSlider\";\nimport BANK_ABI from \"src/abis/dahlia_contracts/HomoraBank.json\";\nimport PROXYORACLE_ABI from \"src/abis/dahlia_contracts/ProxyOracle.json\";\nimport COREORACLE_ABI from \"src/abis/dahlia_contracts/CoreOracle.json\";\nimport { HomoraBank } from \"src/generated/HomoraBank\";\nimport { ProxyOracle } from \"src/generated/ProxyOracle\";\nimport { CoreOracle } from \"src/generated/CoreOracle\";\nimport { Bank } from \"src/config\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\nimport { humanFriendlyNumber } from \"src/utils/number\";\nimport BN from \"bn.js\";\nimport { CErc20Immutable } from \"src/generated/CErc20Immutable\";\nimport CERC20_ABI from \"src/abis/fountain_of_youth/CErc20Immutable.json\";\nimport { priceImpact } from \"src/utils/swap\";\nimport UNI_PAIR from \"src/abis/dahlia_contracts/dependencies/ubeswap/ubeswap@mainnet-v1/IUniswapV2Pair.json\";\nimport { IUniswapV2Pair } from \"src/generated/IUniswapV2Pair\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button } from \"src/components/Button\";\n\ninterface newBorrowProps {\n  tokenBorrow: any[] | null;\n  supplyValue: number | null;\n  borrowValue: number | null;\n  debtRatio: number | null;\n  lever: number | null;\n  impact: number | null;\n  apy: number | null;\n}\n\nconst emptyNewBorrowState: newBorrowProps = {\n  tokenBorrow: null,\n  supplyValue: null,\n  borrowValue: null,\n  debtRatio: null,\n  lever: null,\n  impact: null,\n  apy: null,\n};\n\nexport const newBorrowState = atom({\n  key: \"newBorrowState\",\n  default: emptyNewBorrowState,\n});\n\nexport const Borrow: React.FC = () => {\n  const scale = toBN(2).pow(toBN(112));\n  const [pool] = useRecoilState(poolState);\n  const setPage = useSetRecoilState(farmPageState);\n  const [supply] = useRecoilState(newSupplyState);\n  const setBorrow = useSetRecoilState(newBorrowState);\n  const [init, setInit] = React.useState(false);\n  const history = useHistory();\n\n  const lpTok: Token = new Token({\n    ...lpToken,\n    address: pool.lp,\n  });\n\n  const { kit, network } = useContractKit();\n  const [amounts, setAmounts] = React.useState<string[] | null>(null);\n\n  const bank = React.useMemo(\n    () =>\n      new kit.web3.eth.Contract(\n        BANK_ABI.abi as AbiItem[],\n        getAddress(Bank[network.chainId])\n      ) as unknown as HomoraBank,\n    [kit]\n  );\n\n  const lp = React.useMemo(\n    () =>\n      new kit.web3.eth.Contract(\n        UNI_PAIR.abi as AbiItem[],\n        pool.lp\n      ) as unknown as IUniswapV2Pair,\n    [kit.web3.eth.Contract, pool.lp]\n  );\n\n  const call = React.useCallback(async () => {\n    try {\n      const factors: {\n        borrowFactor: string;\n        collateralFactor: string;\n        liqIncentive: string;\n        0: string;\n        1: string;\n        2: string;\n      }[] = [];\n      const prices: any[] = [];\n      const availableBorrows: any[] = [];\n      const borrows: any[] = [];\n      const oracle = await bank.methods.oracle().call();\n      const proxyOracle = new kit.web3.eth.Contract(\n        PROXYORACLE_ABI.abi as AbiItem[],\n        oracle\n      ) as unknown as ProxyOracle;\n\n      const source = await proxyOracle.methods.source().call();\n      const coreOracle = new kit.web3.eth.Contract(\n        COREORACLE_ABI.abi as AbiItem[],\n        source\n      ) as unknown as CoreOracle;\n      for (let token of pool.tokens) {\n        const bankInfo = await bank.methods.getBankInfo(token.address).call();\n        const cToken = new kit.web3.eth.Contract(\n          CERC20_ABI as AbiItem[],\n          bankInfo.cToken\n        ) as unknown as CErc20Immutable;\n        const totalSupply = toBN(await cToken.methods.totalSupply().call());\n        const totalBorrows = toBN(await cToken.methods.totalBorrows().call());\n        const totalReserves = toBN(await cToken.methods.totalReserves().call());\n        availableBorrows.push(totalSupply.sub(totalBorrows).sub(totalReserves));\n        const blocksPerYear = toBN(6311520);\n        const borrowRate = toBN(\n          await cToken.methods.borrowRatePerBlock().call()\n        ).mul(blocksPerYear);\n        borrows.push(borrowRate);\n        const factor = await proxyOracle.methods\n          .tokenFactors(token!.address)\n          .call();\n        factors.push(factor);\n        const price = await coreOracle.methods.getCELOPx(token!.address).call();\n        prices.push(toBN(price));\n      }\n      const lpPrice = await coreOracle.methods.getCELOPx(pool.lp).call();\n      const lpFactor = await proxyOracle.methods.tokenFactors(pool.lp).call();\n      const weightedSuppliedCollateralValue =\n        supply\n          .tokenSupply!.map(\n            (x, i) =>\n              Number(fromWei(x)) *\n              (Number(fromWei(prices[i]!)) / Number(fromWei(scale))) *\n              (Number(lpFactor.collateralFactor) / 10000)\n          )\n          .reduce((sum, current) => sum + current, 0) +\n        Number(fromWei(supply.lpSupply!)) *\n          (Number(fromWei(lpPrice)) / Number(fromWei(scale))) *\n          (Number(lpFactor.collateralFactor) / 10000);\n      const borrowMax = prices.map(\n        (x, i) =>\n          weightedSuppliedCollateralValue /\n          ((Number(fromWei(x)) / Number(fromWei(scale))) *\n            ((Number(factors[i]?.borrowFactor) -\n              Number(lpFactor.collateralFactor)) /\n              10000))\n      );\n      const maxAmounts = borrowMax.map((x, index) =>\n        String(Math.min(x, Number(fromWei(availableBorrows[index]!))))\n      );\n\n      let reserve0: BN;\n      let reserve1: BN;\n      const getReserves = await lp.methods.getReserves().call();\n      if (\n        getAddress(await lp.methods.token0().call()) ===\n        getAddress(pool.tokens[0]!.address)\n      ) {\n        reserve0 = toBN(getReserves.reserve0);\n        reserve1 = toBN(getReserves.reserve1);\n      } else {\n        reserve0 = toBN(getReserves.reserve1);\n        reserve1 = toBN(getReserves.reserve0);\n      }\n      if (!init) {\n        setInit(true);\n        setAmounts(\n          maxAmounts.map((x) =>\n            Number(x) === 0 ? \"0\" : String((Number(x) / 3).toFixed(3))\n          )\n        );\n      }\n      return {\n        tokenFactor: factors,\n        celoPrices: prices,\n        lpFactor,\n        lpPrice,\n        maxAmounts,\n        reserve0,\n        reserve1,\n        borrows,\n      };\n    } catch (error) {\n      console.log(error);\n    }\n  }, [\n    bank.methods,\n    kit.web3.eth.Contract,\n    pool.lp,\n    pool.tokens,\n    supply.tokenSupply,\n    supply.lpSupply,\n    scale,\n    lp.methods,\n    init,\n  ]);\n\n  const [info] = useAsyncState(null, call);\n\n  if (!amounts!) return null;\n\n  const individualBorrow = info\n    ? amounts!.map(\n        (x, i) =>\n          Number(x) *\n          (Number(fromWei(info?.celoPrices[i]!)) / Number(fromWei(scale)))\n      )\n    : [];\n\n  const borrowValue = individualBorrow\n    ? individualBorrow.reduce((sum, current) => sum + current, 0)\n    : 0;\n  const supplyValue = info\n    ? supply\n        .tokenSupply!.map(\n          (x, i) =>\n            Number(fromWei(x)) *\n            (Number(fromWei(info?.celoPrices[i]!)) / Number(fromWei(scale)))\n        )\n        .reduce((sum, current) => sum + current, Number(fromWei(supply.lpSupply)) * (Number(fromWei(info?.lpPrice)) / Number(fromWei(scale))))\n    : 0;\n  const lever = 1 + borrowValue / supplyValue;\n\n  const apy =\n    ((borrowValue + supplyValue) * (Number(pool.apy) / 100) -\n      individualBorrow\n        .map((x, i) => x * Number(fromWei(info?.borrows[i]!)))\n        .reduce((sum, current) => sum + current, 0)) /\n    supplyValue;\n  const impact = info\n    ? priceImpact(\n        supply.tokenSupply![0]!.add(toBN(toWei(amounts[0]!))),\n        supply.tokenSupply![1]!.add(toBN(toWei(amounts[1]!))),\n        info.reserve0,\n        info.reserve1\n      )\n    : 0;\n\n  const numer = info\n    ? amounts!\n        .map(\n          (x, i) =>\n            Number(x) *\n            (Number(fromWei(info?.celoPrices[i]!)) / Number(fromWei(scale))) *\n            (Number(info.tokenFactor[i]?.borrowFactor) / 10000)\n        )\n        .reduce((sum, current) => sum + current, 0)\n    : 0;\n  const denom = info\n    ? amounts!\n        .map(\n          (x, i) =>\n            (Number(x) + Number(fromWei(supply.tokenSupply![i]!))) *\n            (Number(fromWei(info?.celoPrices[i]!)) / Number(fromWei(scale))) *\n            (Number(info.lpFactor?.collateralFactor) / 10000)\n        )\n        .reduce(\n          (sum, current) => sum + current,\n          Number(fromWei(supply.lpSupply!)) *\n            (Number(fromWei(info?.lpPrice)) / Number(fromWei(scale))) *\n            ((Number(info.lpFactor?.collateralFactor) * (1 - impact)) / 10000)\n        )\n    : 1;\n  const debtRatio = (numer / denom) * 100;\n\n  const continueButton = (\n    <Button\n      onClick={() => {\n        setBorrow({\n          tokenBorrow: amounts!.map((x) => toBN(toWei(String(x)))),\n          lever: lever,\n          debtRatio,\n          borrowValue,\n          supplyValue,\n          impact,\n          apy,\n        });\n        setPage(farmPage.Confirm);\n      }}\n    >\n      Continue\n    </Button>\n  );\n\n  return (\n    <div className=\"bg-gray-100 rounded-md shadow-md p-4 m-2 md:max-w-2xl max-w-xl mx-auto\">\n      <p\n        onClick={() => {\n          setPage(farmPage.Supply)\n        }}\n        className=\"flex items-center hover:opacity-75 cursor-pointer tracking-tight text-base font-bold\"\n      >\n        {\" \"}\n        <CaretLeft size={20} />\n        Back\n      </p>\n\n      <h1 className=\"text-gray-800 text-3xl font-bold tracking-tight text-center mb-4\">\n        Farm\n      </h1>\n      <Flex sx={{ flexDirection: \"column\", gap: \"25px\", mb: 10 }}>\n        <p className=\"text-xl font-bold tracking-tight text-gray-800\">\n          I'm Supplying:\n        </p>\n        <Flex sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\" }}>\n          {pool.tokens.map((tok, index) => (\n            <Flex\n              sx={{\n                alignItems: \"center\",\n                mr: 4,\n                padding: 2,\n                borderStyle: \"solid\",\n                borderRadius: \"10px\",\n              }}\n            >\n              <TokenAmountInfo\n                key={tok.address}\n                token={tok}\n                amount={fromWei(supply.tokenSupply![index]!)}\n              />\n            </Flex>\n          ))}\n          <Flex\n            sx={{\n              alignItems: \"center\",\n              mr: 4,\n              padding: 2,\n              borderStyle: \"solid\",\n              borderRadius: \"10px\",\n            }}\n          >\n            <TokenAmountInfo\n              key={lpTok.address}\n              token={lpTok}\n              amount={fromWei(supply.lpSupply!)}\n            />\n          </Flex>\n        </Flex>\n      </Flex>\n      <Flex sx={{ mb: 2, mt: \"25px\" }}>\n        <p className=\"text-xl font-bold tracking-tight text-gray-800\">\n          Borrows\n        </p>\n      </Flex>\n      <BlockText mb={2}>\n        {\"Est. Debt Ratio: \"\n          .concat(humanFriendlyNumber(debtRatio))\n          .concat(\"/100\")}\n      </BlockText>\n      <BlockText mb={2}>\n        {\"Leverage: \".concat(humanFriendlyNumber(lever)).concat(\"x\")}\n      </BlockText>\n      <BlockText mb={2}>\n        {\"Price Impact: \".concat(humanFriendlyNumber(impact * 100)).concat(\"%\")}\n      </BlockText>\n      <BlockText mb={2}>\n        {\"Farming Apr: \".concat(humanFriendlyNumber(apy * 100)).concat(\"%\")}\n      </BlockText>\n\n      {info &&\n        pool.tokens.map((tok, index) => (\n          <TokenSlider\n            key={tok.address}\n            token={tok}\n            amount={String(amounts![index])}\n            setAmount={(s: string) =>\n              setAmounts(amounts!.map((x, i) => (i === index ? s : x)))\n            }\n            max={info!.maxAmounts[index]!}\n          />\n        ))}\n      <Flex sx={{ justifyContent: \"center\", mt: 6 }}>\n        {debtRatio > 96 ? (\n          <Button disabled={true}>Debt ratio too high</Button>\n        ) : (\n          continueButton\n        )}\n      </Flex>\n    </div>\n  );\n};\n","/Users/kylescott/src/dahlia-interface/src/pages/Farm/newFarm/confirm.tsx",["266","267","268"],"import React from \"react\";\nimport { Flex, Spinner } from \"theme-ui\";\nimport { DEFAULT_GAS_PRICE } from \"src/config\";\nimport { CaretLeft } from \"phosphor-react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { useERC } from \"src/hooks/useERC\";\nimport { useERCmulti } from \"src/hooks/useERCmulti\";\nimport { useSetRecoilState, useRecoilState } from \"recoil\";\nimport {\n  farmPageState,\n  farmPage,\n  poolState,\n} from \"src/pages/Farm/newFarm/NewFarm\";\nimport { BlockText } from \"src/components/BlockText\";\nimport { Token } from \"src/utils/token\";\nimport { lpToken, Bank } from \"src/config\";\nimport { TokenAmountInfo } from \"src/components/TokenAmountInfo\";\nimport { newSupplyState } from \"src/pages/Farm/newFarm/supply\";\nimport { newBorrowState } from \"./borrow\";\nimport { fromWei, AbiItem } from \"web3-utils\";\nimport { toastTx } from \"src/utils/toastTx\";\nimport { toast } from \"react-toastify\";\nimport BANK_ABI from \"src/abis/dahlia_contracts/HomoraBank.json\";\nimport SUSHI_SPELL from \"src/abis/dahlia_contracts/SushiswapSpellV1.json\";\nimport { SushiswapSpellV1 } from \"src/generated/SushiswapSpellV1\";\nimport { HomoraBank } from \"src/generated/HomoraBank\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { MaxUint256 } from \"@ethersproject/constants\";\nimport ERC20_ABI from \"src/abis/fountain_of_youth/ERC20.json\";\nimport { ERC20 } from \"src/generated/ERC20\";\nimport { humanFriendlyNumber } from \"src/utils/number\";\nimport { useHistory } from \"react-router\";\nimport { Button } from \"src/components/Button\";\n\nexport const Confirm: React.FC = () => {\n  const { getConnectedKit, network } = useContractKit();\n  const [approveLoading, setApproveLoading] = React.useState(false);\n  const [confirmLoading, setConfirmLoading] = React.useState(false);\n  const [buttonLoading, setButtonLoading] = React.useState(true);\n  const [done, setDone] = React.useState(false);\n  const [pool] = useRecoilState(poolState);\n  const setPage = useSetRecoilState(farmPageState);\n  const [supply] = useRecoilState(newSupplyState);\n  const [borrow] = useRecoilState(newBorrowState);\n  const history = useHistory();\n\n  const lpTok: Token = new Token({\n    ...lpToken,\n    address: pool.lp,\n  });\n\n  const [tokenStates, refetchTokenStates] = useERCmulti(pool.tokens);\n  const [erc, refetchERC] = useERC(lpTok.address, Bank[network.chainId]);\n\n  const approveButton = (token: Token): any => {\n    return (\n      <Button\n        onClick={async () => {\n          const kit = await getConnectedKit();\n          // kit is connected to a wallet\n          try {\n            setApproveLoading(true);\n            const ERCToken = new kit.web3.eth.Contract(\n              ERC20_ABI as AbiItem[],\n              token.address!\n            ) as unknown as ERC20;\n            const tx = await ERCToken.methods\n              .approve(Bank[network.chainId], MaxUint256.toString())\n              .send({\n                from: kit.defaultAccount,\n                gasPrice: DEFAULT_GAS_PRICE,\n              });\n            toastTx(tx.transactionHash);\n            refetchERC();\n            refetchTokenStates();\n          } catch (e: any) {\n            toast(e.message);\n          } finally {\n            setApproveLoading(false);\n          }\n        }}\n      >\n        {\"Approve \".concat(token.symbol)}\n      </Button>\n    );\n  };\n\n  const confirmButton = (\n    <Button\n      onClick={async () => {\n        const kit = await getConnectedKit();\n        // kit is connected to a wallet\n        try {\n          setConfirmLoading(true);\n          const bank = new kit.web3.eth.Contract(\n            BANK_ABI.abi as AbiItem[],\n            getAddress(Bank[network.chainId])\n          ) as unknown as HomoraBank;\n          const spell = new kit.web3.eth.Contract(\n            SUSHI_SPELL.abi as AbiItem[],\n            getAddress(pool.spell)\n          ) as unknown as SushiswapSpellV1;\n          const bytes = spell.methods\n            .addLiquidityWMiniChef(\n              pool.tokens[0]!.address,\n              pool.tokens[1]!.address,\n              [\n                supply.tokenSupply![0]!.toString(),\n                supply.tokenSupply![1]!.toString(),\n                supply.lpSupply!.toString(),\n                borrow.tokenBorrow![0]!.toString(),\n                borrow.tokenBorrow![1]!.toString(),\n                0,\n                0,\n                0,\n              ],\n              '3',\n            )\n            .encodeABI();\n          const tx = await bank.methods.execute(0, pool.spell, bytes).send({\n            from: kit.defaultAccount,\n            gasPrice: DEFAULT_GAS_PRICE,\n          });\n          toastTx(tx.transactionHash);\n          refetchERC();\n        } catch (e: any) {\n          toast(e.message);\n        } finally {\n          setConfirmLoading(false);\n          setDone(true);\n        }\n      }}\n    >\n      Confirm\n    </Button>\n  );\n\n  const loading = approveLoading || confirmLoading || buttonLoading;\n  const button = React.useMemo(() => {\n    let b: any[] = [];\n    if (done) {\n      b = [\n        <Button\n          onClick={() => {\n            history.push(\"/positions\");\n            setPage(farmPage.Supply);\n          }}\n        >\n          Return\n        </Button>,\n      ];\n    } else {\n      if (tokenStates && erc) {\n        for (let i = 0; i < tokenStates.length; i += 1) {\n          if (tokenStates[i]!) {\n            const amountBN = supply.tokenSupply![i]!;\n            if (amountBN.gt(tokenStates[i]?.allowance!)) {\n              b.push(approveButton(pool.tokens![i]!));\n              if (buttonLoading) setButtonLoading(false);\n            }\n          }\n        }\n        const amountBN = supply.lpSupply!;\n        if (amountBN.gt(erc.allowance)) {\n          b.push(approveButton(lpTok));\n        }\n        if (buttonLoading) setButtonLoading(false);\n        if (b.length === 0) {\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          b = [confirmButton];\n          if (buttonLoading) setButtonLoading(false);\n        }\n      }\n    }\n    return b;\n  }, [\n    done,\n    history,\n    setPage,\n    tokenStates,\n    erc,\n    supply.tokenSupply,\n    supply.lpSupply,\n    approveButton,\n    pool.tokens,\n    buttonLoading,\n    confirmButton,\n    lpTok,\n  ]);\n\n  return (\n    <div className=\"bg-gray-100 rounded-md shadow-md p-4 m-2 md:max-w-2xl max-w-xl mx-auto\">\n      <p\n        onClick={() => {\n          setPage(farmPage.Borrow)\n        }}\n        className=\"flex items-center hover:opacity-75 cursor-pointer tracking-tight text-base font-bold\"\n      >\n        {\" \"}\n        <CaretLeft size={20} />\n        Back\n      </p>\n\n      <h1 className=\"text-gray-800 text-3xl font-bold tracking-tight text-center mb-4\">\n        Position Breakdown\n      </h1>\n      <Flex sx={{ flexDirection: \"column\", gap: \"25px\", mb: 10 }}>\n        <p className=\"text-xl font-bold tracking-tight text-gray-800 -mb-4\">\n          I'm Supplying:\n        </p>\n        <Flex sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\" }}>\n          {pool.tokens.map((tok, index) => (\n            <Flex\n              sx={{\n                alignItems: \"center\",\n                mr: 4,\n                padding: 2,\n                borderStyle: \"solid\",\n                borderRadius: \"10px\",\n              }}\n            >\n              <TokenAmountInfo\n                key={tok.address}\n                token={tok}\n                amount={fromWei(supply.tokenSupply![index]!)}\n              />\n            </Flex>\n          ))}\n          <Flex\n            sx={{\n              alignItems: \"center\",\n              mr: 4,\n              padding: 2,\n              borderStyle: \"solid\",\n              borderRadius: \"10px\",\n            }}\n          >\n            <TokenAmountInfo\n              key={lpTok.address}\n              token={lpTok}\n              amount={fromWei(supply.lpSupply!)}\n            />\n          </Flex>\n        </Flex>\n      </Flex>\n      <Flex sx={{ flexDirection: \"column\", gap: \"25px\", mb: 10 }}>\n        <p className=\"text-xl font-bold tracking-tight text-gray-800 -mb-4\">\n          I'm Borrowing:\n        </p>\n        <Flex sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\" }}>\n          {pool.tokens.map((tok, index) => (\n            <Flex\n              sx={{\n                alignItems: \"center\",\n                mr: 4,\n                padding: 2,\n                borderStyle: \"solid\",\n                borderRadius: \"10px\",\n              }}\n            >\n              <TokenAmountInfo\n                key={tok.address}\n                token={tok}\n                amount={fromWei(borrow.tokenBorrow![index]!)}\n              />\n            </Flex>\n          ))}\n        </Flex>\n      </Flex>\n      <Flex sx={{ flexDirection: \"column\", gap: \"25px\", mb: 10 }}>\n        <p className=\"text-xl font-bold tracking-tight text-gray-800 mt-4\">\n          Position Statistics\n        </p>\n        <Flex\n          sx={{ justifyContent: \"left\", gap: \"8px\", flexDirection: \"column\" }}\n        >\n          <BlockText>\n            {\"Est. Debt Ratio: \"\n              .concat(humanFriendlyNumber(borrow.debtRatio!))\n              .concat(\"/100\")}\n          </BlockText>\n          <BlockText>\n            {\"Leverage: \"\n              .concat(humanFriendlyNumber(borrow.lever!))\n              .concat(\"x\")}\n          </BlockText>\n          <BlockText>\n            {\"Price Impact: \"\n              .concat(humanFriendlyNumber(borrow.impact!))\n              .concat(\"%\")}\n          </BlockText>\n          <BlockText>\n            {\"Supply Value: \"\n              .concat(\" \")\n              .concat(humanFriendlyNumber(borrow.supplyValue!))\n              .concat(\" Celo\")}\n          </BlockText>\n          <BlockText>\n            {\"Borrow Value: \"\n              .concat(\" \")\n              .concat(humanFriendlyNumber(borrow.borrowValue!))\n              .concat(\" Celo\")}\n          </BlockText>\n          <BlockText>\n            {\"Position Value: \"\n              .concat(\" \")\n              .concat(\n                humanFriendlyNumber(borrow.supplyValue! + borrow.borrowValue!)\n              )\n              .concat(\" Celo\")}\n          </BlockText>\n          <BlockText>\n            {\"Farming Apr: \"\n              .concat(humanFriendlyNumber(borrow.apy! * 100))\n              .concat(\"%\")}\n          </BlockText>\n        </Flex>\n      </Flex>\n      <Flex sx={{ justifyContent: \"center\", mt: 6 }}>\n        {loading ? (\n          <Spinner />\n        ) : (\n          <Flex sx={{ justifyContent: \"center\", gap: \"6px\" }}>{button[0]}</Flex>\n        )}\n      </Flex>\n    </div>\n  );\n};\n","/Users/kylescott/src/dahlia-interface/src/pages/Position/Add/confirm.tsx",["269"],"import React from \"react\";\nimport { Button, Card, Flex, Heading, Text, Spinner } from \"theme-ui\";\nimport { DEFAULT_GAS_PRICE } from \"src/config\";\nimport { CaretLeft } from \"phosphor-react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { useERC } from \"src/hooks/useERC\";\nimport { useERCmulti } from \"src/hooks/useERCmulti\";\nimport { useSetRecoilState, useRecoilState } from \"recoil\";\nimport { BlockText } from \"src/components/BlockText\";\nimport { Token } from \"src/utils/token\";\nimport { lpToken, Bank } from \"src/config\";\nimport { TokenAmountInfo } from \"src/components/TokenAmountInfo\";\nimport { fromWei, AbiItem } from \"web3-utils\";\nimport { toastTx } from \"src/utils/toastTx\";\nimport { toast } from \"react-toastify\";\nimport BANK_ABI from \"src/abis/dahlia_contracts/HomoraBank.json\";\nimport { HomoraBank } from \"src/generated/HomoraBank\";\nimport SUSHI_SPELL from \"src/abis/dahlia_contracts/SushiswapSpellV1.json\";\nimport { SushiswapSpellV1 } from \"src/generated/SushiswapSpellV1\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { MaxUint256 } from \"@ethersproject/constants\";\nimport ERC20_ABI from \"src/abis/fountain_of_youth/ERC20.json\";\nimport { ERC20 } from \"src/generated/ERC20\";\nimport { humanFriendlyNumber } from \"src/utils/number\";\nimport {\n  addPageState,\n  addPage,\n  addPositionState,\n} from \"src/pages/Position/Add/add\";\nimport { addSupplyState } from \"./supply\";\nimport { addBorrowState } from \"./borrow\";\nimport { poolState } from \"src/pages/Farm/newFarm/NewFarm\";\nimport { useHistory } from \"react-router\";\n\nexport const Confirm: React.FC = () => {\n  const { getConnectedKit, network } = useContractKit();\n  const [approveLoading, setApproveLoading] = React.useState(false);\n  const [confirmLoading, setConfirmLoading] = React.useState(false);\n  const [buttonLoading, setButtonLoading] = React.useState(true);\n  const [done, setDone] = React.useState(false);\n  const [pool] = useRecoilState(poolState);\n  const setPage = useSetRecoilState(addPageState);\n  const [supply] = useRecoilState(addSupplyState);\n  const [position] = useRecoilState(addPositionState);\n  const [borrow] = useRecoilState(addBorrowState);\n  const history = useHistory();\n\n  const lpTok: Token = new Token({\n    ...lpToken,\n    address: pool.lp,\n  });\n\n  const [tokenStates, refetchTokenStates] = useERCmulti(pool.tokens);\n  const [erc, refetchERC] = useERC(lpTok.address, Bank[network.chainId]);\n\n  const approveButton = (token: Token): any => {\n    return (\n      <Button\n        onClick={async () => {\n          const kit = await getConnectedKit();\n          // kit is connected to a wallet\n          try {\n            setApproveLoading(true);\n            const ERCToken = new kit.web3.eth.Contract(\n              ERC20_ABI as AbiItem[],\n              token.address!\n            ) as unknown as ERC20;\n            const tx = await ERCToken.methods\n              .approve(Bank[network.chainId], MaxUint256.toString())\n              .send({\n                from: kit.defaultAccount,\n                gasPrice: DEFAULT_GAS_PRICE,\n              });\n            toastTx(tx.transactionHash);\n            refetchERC();\n            refetchTokenStates();\n          } catch (e: any) {\n            toast(e.message);\n          } finally {\n            setApproveLoading(false);\n          }\n        }}\n      >\n        {\"Approve \".concat(token.symbol)}\n      </Button>\n    );\n  };\n\n  const confirmButton = (\n    <Button\n      onClick={async () => {\n        const kit = await getConnectedKit();\n        // kit is connected to a wallet\n        try {\n          setConfirmLoading(true);\n          const bank = new kit.web3.eth.Contract(\n            BANK_ABI.abi as AbiItem[],\n            getAddress(Bank[network.chainId])\n          ) as unknown as HomoraBank;\n          const spell = new kit.web3.eth.Contract(\n            SUSHI_SPELL.abi as AbiItem[],\n            getAddress(pool.spell)\n          ) as unknown as SushiswapSpellV1;\n          const bytes = spell.methods\n            .addLiquidityWMiniChef(\n              pool.tokens[0]!.address,\n              pool.tokens[1]!.address,\n              [\n                supply.tokenSupply![0]!.toString(),\n                supply.tokenSupply![1]!.toString(),\n                supply.lpSupply!.toString(),\n                borrow.tokenBorrow![0]!.toString(),\n                borrow.tokenBorrow![1]!.toString(),\n                0,\n                0,\n                0,\n              ],\n              '3'\n            )\n            .encodeABI();\n          const tx = await bank.methods\n            .execute(position.positionId!, pool.spell, bytes)\n            .send({\n              from: kit.defaultAccount,\n              gasPrice: DEFAULT_GAS_PRICE,\n            });\n          toastTx(tx.transactionHash);\n          refetchERC();\n        } catch (e: any) {\n          toast(e.message);\n        } finally {\n          setConfirmLoading(false);\n          setDone(true);\n        }\n      }}\n    >\n      Confirm\n    </Button>\n  );\n\n  const loading = approveLoading || confirmLoading || buttonLoading;\n  const button = React.useMemo(() => {\n    let b: any[] = [];\n    if (done) {\n      b = [\n        <Button\n          onClick={() => {\n            history.push(\"/positions\");\n            setPage(addPage.Supply);\n          }}\n        >\n          Return\n        </Button>,\n      ];\n    } else {\n      if (tokenStates && erc) {\n        for (let i = 0; i < tokenStates.length; i += 1) {\n          if (tokenStates[i]) {\n            const amountBN = supply.tokenSupply![i]!;\n            if (amountBN.gt(tokenStates[i]?.allowance!)) {\n              b.push(approveButton(pool.tokens![i]!));\n              if (buttonLoading) setButtonLoading(false);\n            }\n          }\n        }\n        const amountBN = supply.lpSupply!;\n        if (amountBN.gt(erc.allowance)) {\n          b.push(approveButton(lpTok));\n        }\n        if (buttonLoading) setButtonLoading(false);\n        if (b.length === 0) {\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          b = [confirmButton];\n          if (buttonLoading) setButtonLoading(false);\n        }\n      }\n    }\n    return b;\n  }, [tokenStates, supply.tokenSupply, pool.tokens, erc, supply.lpSupply]);\n\n  return (\n    <Flex sx={{ alignItems: \"center\", flexDirection: \"column\" }}>\n      <Card sx={{ width: \"100%\", maxWidth: \"800px\" }} py={4} px={3}>\n        <Flex\n          onClick={() => {\n            setPage(addPage.Borrow);\n          }}\n          sx={{ alignItems: \"center\", cursor: \"pointer\" }}\n          mb={4}\n        >\n          <CaretLeft size={28} />\n          <Text>Back</Text>\n        </Flex>\n        <Flex mb={4}>\n          <Heading as=\"h2\" mr={2}>\n            Position Breakdown\n          </Heading>\n        </Flex>\n        <Flex sx={{ flexDirection: \"column\", gap: \"25px\", mb: 10 }}>\n          <p className=\"text-xl font-bold tracking-tight text-gray-800\">\n            My position has\n          </p>\n          <Flex\n            sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\" }}\n          >\n            {supply.existingBalance &&\n              pool.tokens.map((tok, index) => (\n                <Flex\n                  sx={{\n                    alignItems: \"center\",\n                    mr: 4,\n                    padding: 2,\n                    borderStyle: \"solid\",\n                    borderRadius: \"10px\",\n                  }}\n                >\n                  <TokenAmountInfo\n                    key={tok.address}\n                    token={tok}\n                    amount={fromWei(supply.existingBalance![index]!)}\n                  />\n                </Flex>\n              ))}\n          </Flex>\n        </Flex>\n        <Flex sx={{ flexDirection: \"column\", gap: \"25px\", mb: 10 }}>\n          <p className=\"text-xl font-bold tracking-tight text-gray-800\">\n            I'm Supplying\n          </p>\n          <Flex\n            sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\" }}\n          >\n            {supply.tokenSupply &&\n              pool.tokens.map((tok, index) => (\n                <Flex\n                  sx={{\n                    alignItems: \"center\",\n                    mr: 4,\n                    padding: 2,\n                    borderStyle: \"solid\",\n                    borderRadius: \"10px\",\n                  }}\n                >\n                  <TokenAmountInfo\n                    key={tok.address}\n                    token={tok}\n                    amount={fromWei(supply.tokenSupply![index]!)}\n                  />\n                </Flex>\n              ))}\n            <Flex\n              sx={{\n                alignItems: \"center\",\n                mr: 4,\n                padding: 2,\n                borderStyle: \"solid\",\n                borderRadius: \"10px\",\n              }}\n            >\n              {supply.lpSupply && (\n                <TokenAmountInfo\n                  key={lpTok.address}\n                  token={lpTok}\n                  amount={fromWei(supply.lpSupply!)}\n                />\n              )}\n            </Flex>\n          </Flex>\n        </Flex>\n        <Flex sx={{ flexDirection: \"column\", gap: \"25px\", mb: 10 }}>\n          <p className=\"text-xl font-bold tracking-tight text-gray-800\">\n            I'm Borrowing\n          </p>\n          <Flex\n            sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\" }}\n          >\n            {borrow.tokenBorrow &&\n              pool.tokens.map((tok, index) => (\n                <Flex\n                  sx={{\n                    alignItems: \"center\",\n                    mr: 4,\n                    padding: 2,\n                    borderStyle: \"solid\",\n                    borderRadius: \"10px\",\n                  }}\n                >\n                  <TokenAmountInfo\n                    key={tok.address}\n                    token={tok}\n                    amount={fromWei(borrow.tokenBorrow![index]!)}\n                  />\n                </Flex>\n              ))}\n          </Flex>\n        </Flex>\n        <Flex sx={{ flexDirection: \"column\", gap: \"25px\", mb: 10 }}>\n          <p className=\"text-xl font-bold tracking-tight text-gray-800\">\n            Position Statistics\n          </p>\n          <Flex\n            sx={{ justifyContent: \"left\", gap: \"8px\", flexDirection: \"column\" }}\n          >\n            <BlockText>\n              {\"Est. Debt Ratio: \"\n                .concat(humanFriendlyNumber(borrow.debtRatio!))\n                .concat(\"/100\")}\n            </BlockText>\n            <BlockText>\n              {\"Leverage: \"\n                .concat(humanFriendlyNumber(borrow.lever!))\n                .concat(\"x\")}\n            </BlockText>\n            <BlockText>\n              {\"Price Impact: \"\n                .concat(humanFriendlyNumber(borrow.impact!))\n                .concat(\"%\")}\n            </BlockText>\n            <BlockText>\n              {\"Supply Value: \"\n                .concat(\" \")\n                .concat(humanFriendlyNumber(borrow.supplyValue!))\n                .concat(\" Celo\")}\n            </BlockText>\n            <BlockText>\n              {\"Borrow Value: \"\n                .concat(\" \")\n                .concat(humanFriendlyNumber(borrow.borrowValue!))\n                .concat(\" Celo\")}\n            </BlockText>\n            <BlockText>\n              {\"Position Value: \"\n                .concat(\" \")\n                .concat(\n                  humanFriendlyNumber(borrow.supplyValue! + borrow.borrowValue!)\n                )\n                .concat(\" Celo\")}\n            </BlockText>\n            <BlockText>\n              {\"Farming APR: \"\n                .concat(humanFriendlyNumber(borrow.apy! * 100))\n                .concat(\"%\")}\n            </BlockText>\n          </Flex>\n        </Flex>\n        <Flex sx={{ justifyContent: \"center\", mt: 6 }}>\n          {loading ? (\n            <Spinner />\n          ) : (\n            <Flex sx={{ justifyContent: \"center\", gap: \"6px\" }}>\n              {button[0]}\n            </Flex>\n          )}\n        </Flex>\n      </Card>\n    </Flex>\n  );\n};\n","/Users/kylescott/src/dahlia-interface/src/pages/Farm/newFarm/supply.tsx",[],"/Users/kylescott/src/dahlia-interface/src/pages/Position/Remove/payback.tsx",["270"],"import React from \"react\";\nimport { Card, Flex, Text } from \"theme-ui\";\nimport { CaretLeft } from \"phosphor-react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { atom, useSetRecoilState, useRecoilState } from \"recoil\";\nimport { poolState } from \"src/pages/Farm/newFarm/NewFarm\";\nimport { BlockText } from \"src/components/BlockText\";\nimport { TokenAmountInfo } from \"src/components/TokenAmountInfo\";\nimport { fromWei, toWei, toBN, AbiItem } from \"web3-utils\";\nimport { TokenSlider } from \"src/components/TokenSlider\";\nimport BANK_ABI from \"src/abis/dahlia_contracts/HomoraBank.json\";\nimport PROXYORACLE_ABI from \"src/abis/dahlia_contracts/ProxyOracle.json\";\nimport COREORACLE_ABI from \"src/abis/dahlia_contracts/CoreOracle.json\";\nimport { HomoraBank } from \"src/generated/HomoraBank\";\nimport { ProxyOracle } from \"src/generated/ProxyOracle\";\nimport { CoreOracle } from \"src/generated/CoreOracle\";\nimport { Bank } from \"src/config\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\nimport { humanFriendlyNumber } from \"src/utils/number\";\nimport { removePage, removePageState, removePositionState } from \"./remove\";\nimport { removeRemoveState } from \"./removeTokens\";\nimport { CErc20Immutable } from \"src/generated/CErc20Immutable\";\nimport CERC20_ABI from \"src/abis/fountain_of_youth/CErc20Immutable.json\";\nimport { Button } from \"src/components/Button\";\n\ninterface paybackProps {\n  payback: any[] | null;\n  debtRatio: number | null;\n  lever: number | null;\n  apy: number | null;\n}\n\nconst emptyPaybackState: paybackProps = {\n  payback: null,\n  debtRatio: null,\n  lever: null,\n  apy: null,\n};\n\nexport const removePaybackState = atom({\n  key: \"removepaybackState\",\n  default: emptyPaybackState,\n});\n\nexport const Payback: React.FC = () => {\n  const [pool] = useRecoilState(poolState);\n  const setPage = useSetRecoilState(removePageState);\n  const [position] = useRecoilState(removePositionState);\n  const [remove] = useRecoilState(removeRemoveState);\n  const setPayback = useSetRecoilState(removePaybackState);\n  const [amounts, setAmounts] = React.useState<String[] | null>(null);\n  const [init, setInit] = React.useState(false);\n  const zeroAdd = \"0x0000000000000000000000000000000000000000\";\n  const scale = toBN(2).pow(toBN(112));\n\n  const { kit, network } = useContractKit();\n\n  const bank = React.useMemo(\n    () =>\n      new kit.web3.eth.Contract(\n        BANK_ABI.abi as AbiItem[],\n        getAddress(Bank[network.chainId])\n      ) as unknown as HomoraBank,\n    [kit]\n  );\n\n  const call = React.useCallback(async () => {\n    try {\n      const factors: {\n        borrowFactor: string;\n        collateralFactor: string;\n        liqIncentive: string;\n        0: string;\n        1: string;\n        2: string;\n      }[] = [];\n      const prices: any[] = [];\n      const borrowRates: any[] = [];\n      const oracle = await bank.methods.oracle().call();\n      const proxyOracle = new kit.web3.eth.Contract(\n        PROXYORACLE_ABI.abi as AbiItem[],\n        oracle\n      ) as unknown as ProxyOracle;\n      const source = await proxyOracle.methods.source().call();\n      const coreOracle = new kit.web3.eth.Contract(\n        COREORACLE_ABI.abi as AbiItem[],\n        source\n      ) as unknown as CoreOracle;\n      const ret = await bank.methods\n        .getPositionDebts(position.positionId!)\n        .call();\n      const debts: any[] = [];\n      for (let i = 0; i < pool.tokens.length; i += 1) {\n        const token = pool.tokens[i]!;\n        const bankInfo = await bank.methods.getBankInfo(token.address).call();\n        const cToken = new kit.web3.eth.Contract(\n          CERC20_ABI as AbiItem[],\n          bankInfo.cToken\n        ) as unknown as CErc20Immutable;\n        const blocksPerYear = toBN(6311520);\n        const borrowRate = toBN(\n          await cToken.methods.borrowRatePerBlock().call()\n        ).mul(blocksPerYear);\n        borrowRates.push(borrowRate);\n        const factor = await proxyOracle.methods\n          .tokenFactors(token.address)\n          .call();\n        factors.push(factor);\n        const price = await coreOracle.methods.getCELOPx(token.address).call();\n        prices.push(toBN(price));\n        for (let j = 0; j < ret.tokens.length; j += 1) {\n          if (getAddress(token.address) === getAddress(ret.tokens[j]!)) {\n            debts.push(toBN(ret.debts[j]!));\n            break;\n          }\n        }\n        if (debts.length === i) debts.push(toBN(0));\n      }\n      const existingWeightBorrowValue = await bank.methods\n        .getBorrowCELOValue(position.positionId!)\n        .call();\n      const weightedCollateralValue = await proxyOracle.methods\n        .asCELOCollateral(\n          pool.wrapper,\n          position.collId!,\n          toBN(position.collateralSize!).sub(remove.removeLp!).toString(),\n          zeroAdd\n        )\n        .call();\n\n      const maxAmounts = debts.map((x, index) =>\n        x.lt(remove.remove![index]!)\n          ? fromWei(x)\n          : fromWei(remove.remove![index]!)\n      );\n\n      console.log(remove.prevPosition, debts);\n\n      const prevCollateral = remove.prevPosition?.map((x, i) =>\n        x.sub(debts[i]!)\n      );\n\n      const lpPrice = await coreOracle.methods.getCELOPx(pool.lp).call();\n      const lpFactor = await proxyOracle.methods.tokenFactors(pool.lp).call();\n\n      if (!init) {\n        setInit(true);\n        setAmounts(maxAmounts.map((x) => String((Number(x) / 3).toFixed(3))));\n      }\n      return {\n        debts,\n        maxAmounts,\n        weightedCollateralValue,\n        existingWeightBorrowValue,\n        factors,\n        prices,\n        lpPrice,\n        lpFactor,\n        prevBorrow: debts,\n        prevCollateral,\n        borrowRates,\n      };\n    } catch (error) {\n      console.log(error);\n    }\n  }, [\n    bank.methods,\n    init,\n    kit.web3.eth.Contract,\n    pool.lp,\n    pool.tokens,\n    pool.wrapper,\n    position.collId,\n    position.collateralSize,\n    position.positionId,\n    remove.prevPosition,\n    remove.remove,\n    remove.removeLp,\n  ]);\n  const [info] = useAsyncState(null, call);\n\n  //TODO: account for removed coins\n  const numer = info\n    ? Number(fromWei(info.existingWeightBorrowValue)) -\n      amounts!\n        .map(\n          (x, i) =>\n            Number(x) *\n            (Number(fromWei(info?.prices[i]!)) / Number(fromWei(scale))) *\n            (Number(info.factors[i]?.borrowFactor) / 10000)\n        )\n        .reduce((sum, current) => sum + current, 0)\n    : 0;\n  const denom = info\n    ? (Number(fromWei(position.collateralSize!)) -\n        Number(fromWei(remove.removeLp!))) *\n      (Number(fromWei(info?.lpPrice)) / Number(fromWei(scale))) *\n      (Number(info.lpFactor.collateralFactor) / 10000)\n    : 1;\n  const debtRatio = denom === 0 && numer === 0 ? 0 : (numer / denom) * 100;\n\n  const individualBorrow = info\n    ? amounts!.map(\n        (x, i) =>\n          ((Number(fromWei(info.prevBorrow[i]!)) - Number(x)) *\n            Number(fromWei(info?.prices[i]!))) /\n          Number(fromWei(scale))\n      )\n    : [];\n\n  const borrowValue = individualBorrow\n    ? individualBorrow.reduce((sum, current) => sum + current, 0)\n    : 0;\n  const supplyValue = info\n    ? ((Number(fromWei(position.collateralSize!)) -\n        Number(fromWei(remove.removeLp!))) *\n        Number(fromWei(info?.lpPrice))) /\n      Number(fromWei(scale))\n    : 0;\n  const lever = 1 + borrowValue / supplyValue;\n\n  const apy =\n    ((borrowValue + supplyValue) * (Number(pool.apy) / 100) -\n      individualBorrow\n        .map((x, i) => x * Number(fromWei(info?.borrowRates[i]!)))\n        .reduce((sum, current) => sum + current, 0)) /\n    supplyValue;\n\n  const continueButton = (\n    <Button\n      disabled={debtRatio > 96}\n      onClick={() => {\n        setPayback({\n          payback: amounts!.map((x) => toBN(toWei(String(x)))),\n          debtRatio,\n          lever,\n          apy,\n        });\n        setPage(removePage.Confirm);\n      }}\n    >\n      Continue\n    </Button>\n  );\n\n  if (!info! || !amounts!) return null;\n  return (\n    <Flex sx={{ alignItems: \"center\", flexDirection: \"column\" }}>\n      <Card sx={{ width: \"100%\", maxWidth: \"800px\" }} py={4} px={3}>\n        <Flex\n          onClick={() => {\n            setPage(removePage.Remove);\n          }}\n          sx={{ alignItems: \"center\", cursor: \"pointer\" }}\n          mb={4}\n        >\n          <CaretLeft size={28} />\n          <Text>Back</Text>\n        </Flex>\n        <Flex sx={{ flexDirection: \"column\", gap: \"25px\", mb: 10 }}>\n          <p className=\"text-xl font-bold tracking-tight text-gray-800 -mb-4\">\n            I'm receiving\n          </p>\n          <Flex\n            sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\" }}\n          >\n            {remove &&\n              pool.tokens.map((tok, index) => (\n                <Flex\n                  sx={{\n                    alignItems: \"center\",\n                    mr: 4,\n                    padding: 2,\n                    borderStyle: \"solid\",\n                    borderRadius: \"10px\",\n                  }}\n                >\n                  <TokenAmountInfo\n                    key={tok.address}\n                    token={tok}\n                    amount={fromWei(remove.remove![index]!)}\n                  />\n                </Flex>\n              ))}\n          </Flex>\n        </Flex>\n        <Flex sx={{ flexDirection: \"column\", gap: \"25px\", mb: 10 }}>\n          <p className=\"text-xl font-bold tracking-tight text-gray-800 mt-4 -mb-4\">\n            Your position debts\n          </p>\n          <Flex\n            sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\" }}\n          >\n            {info &&\n              remove &&\n              pool.tokens.map((tok, index) => (\n                <Flex\n                  sx={{\n                    alignItems: \"center\",\n                    mr: 4,\n                    padding: 2,\n                    borderStyle: \"solid\",\n                    borderRadius: \"10px\",\n                  }}\n                >\n                  <TokenAmountInfo\n                    key={tok.address}\n                    token={tok}\n                    amount={fromWei(info!.debts[index]!)}\n                  />\n                </Flex>\n              ))}\n          </Flex>\n        </Flex>\n        <Flex sx={{ mb: 2, mt: \"25px\" }}>\n          <p className=\"text-xl font-bold tracking-tight text-gray-800\">\n            I'd like to repay\n          </p>\n        </Flex>\n        <BlockText mb={2}>\n          {\"New Est. Debt Ratio: \"\n            .concat(humanFriendlyNumber(debtRatio))\n            .concat(\"/100\")}\n        </BlockText>\n        <BlockText mb={2}>\n          {\"New Leverage: \".concat(humanFriendlyNumber(lever)).concat(\"x\")}\n        </BlockText>\n        <BlockText mb={2}>\n          {\"New Farming APR: \"\n            .concat(humanFriendlyNumber(apy * 100))\n            .concat(\"%\")}\n        </BlockText>\n        {info &&\n          pool.tokens.map((tok, index) => (\n            <TokenSlider\n              key={tok.address}\n              token={tok}\n              amount={String(amounts![index])}\n              setAmount={(s: string) =>\n                setAmounts(amounts!.map((x, i) => (i === index ? s : x)))\n              }\n              max={info!.maxAmounts[index]!}\n            />\n          ))}\n        <Flex sx={{ justifyContent: \"center\", mt: 6 }}>\n          {debtRatio > 96 ? (\n            <Button disabled={true}>Debt ratio too high</Button>\n          ) : (\n            continueButton\n          )}\n        </Flex>\n      </Card>\n    </Flex>\n  );\n};\n","/Users/kylescott/src/dahlia-interface/src/pages/Position/Remove/confirm.tsx",[],"/Users/kylescott/src/dahlia-interface/src/pages/Position/Remove/removeTokens.tsx",[],"/Users/kylescott/src/dahlia-interface/src/pages/Earn/EarnEntry.tsx",[],"/Users/kylescott/src/dahlia-interface/src/state/global/index.ts",[],"/Users/kylescott/src/dahlia-interface/src/hooks/useAPR.ts",[],"/Users/kylescott/src/dahlia-interface/src/hooks/useSafeBox.ts",[],"/Users/kylescott/src/dahlia-interface/src/utils/eth.ts",[],"/Users/kylescott/src/dahlia-interface/src/components/Button.tsx",[],"/Users/kylescott/src/dahlia-interface/src/components/TokenInfo.tsx",[],"/Users/kylescott/src/dahlia-interface/src/components/TokenAmountInfo.tsx",[],"/Users/kylescott/src/dahlia-interface/src/components/BlockText.tsx",[],"/Users/kylescott/src/dahlia-interface/src/hooks/useERC.ts",[],"/Users/kylescott/src/dahlia-interface/src/hooks/useERCmulti.ts",[],"/Users/kylescott/src/dahlia-interface/src/utils/swap.ts",[],"/Users/kylescott/src/dahlia-interface/src/utils/toastTx.tsx",[],"/Users/kylescott/src/dahlia-interface/src/components/TokenSlider.tsx",["271"],"import { Token } from \"src/utils/token\";\nimport React from \"react\";\nimport { Box, Flex } from \"theme-ui\";\nimport { TokenAmountInfo } from \"src/components/TokenAmountInfo\";\nimport { Slider } from \"rsuite\";\nimport \"rsuite/dist/styles/rsuite-default.min.css\";\n\ninterface Props {\n  token: Token;\n  amount: string;\n  setAmount: any;\n  max: string;\n}\n\nexport const TokenSlider: React.FC<Props> = ({\n  token,\n  amount,\n  setAmount,\n  max,\n}: Props) => {\n  const start: number = Number(max) / 3;\n  React.useEffect(() => setAmount(String(start)), []);\n  return (\n    <Flex sx={{ alignItems: \"center\" }}>\n      <Box sx={{ width: \"100%\" }} mr={2}>\n        <Flex sx={{ width: \"100%\", alignItems: \"center\" }}>\n          <Slider\n            progress\n            defaultValue={start}\n            style={{ width: \"100%\" }}\n            step={0.001}\n            max={Number(max)}\n            onChange={(value) => setAmount(String(value))}\n          />\n          <TokenAmountInfo token={token} amount={amount} />\n        </Flex>\n      </Box>\n    </Flex>\n  );\n};\n","/Users/kylescott/src/dahlia-interface/src/components/TokenInputForm.tsx",["272"],"import { Token } from \"src/utils/token\";\nimport { Box, Flex, Input, Text } from \"theme-ui\";\nimport { humanFriendlyWei } from \"src/utils/eth\";\nimport { fromWei } from \"web3-utils\";\nimport { TokenInfo } from \"src/components/TokenInfo\";\n// import BN from 'bn.js';\nimport { DahliaTokenInfo } from \"./DahliaTokenInfo\";\n\ninterface Props {\n  token: Token;\n  amount: string;\n  setAmount: any;\n  balance: any | null;\n  dahlia?: boolean;\n}\n\nexport const TokenInputForm: React.FC<Props> = ({\n  token,\n  amount,\n  setAmount,\n  balance,\n  dahlia,\n}: Props) => {\n  return (\n    <Flex sx={{ alignItems: \"center\" }} mt={2}>\n      <Box sx={{ width: \"100%\" }} mr={2}>\n        <Flex sx={{ justifyContent: \"flex-end\" }}>\n          <p\n            className=\"font-bold cursor-pointer tracking-tight -mb-2\"\n            onClick={() => {\n              if (balance) {\n                const cost = fromWei(balance);\n                setAmount(cost);\n              }\n            }}\n          >\n            max: {balance ? humanFriendlyWei(balance) : \"0\"}\n          </p>\n        </Flex>\n        <Flex sx={{ justifyContent: \"space-between\", alignItems: \"center\" }}>\n          <Input\n            type=\"number\"\n            value={amount}\n            onChange={(e) => {\n              setAmount(e.target.value);\n            }}\n            color=\"text\"\n            mr={6}\n          />\n          {dahlia ? (\n            <DahliaTokenInfo token={token} />\n          ) : (\n            <TokenInfo token={token} />\n          )}\n        </Flex>\n      </Box>\n    </Flex>\n  );\n};\n","/Users/kylescott/src/dahlia-interface/src/utils/address.ts",[],"/Users/kylescott/src/dahlia-interface/src/components/TokenBorrowInfo.tsx",[],"/Users/kylescott/src/dahlia-interface/src/components/FarmInfo.tsx",[],"/Users/kylescott/src/dahlia-interface/src/components/RewardsTokenInfo.tsx",["273","274"],"import styled from \"@emotion/styled\";\nimport { Token } from \"src/utils/token\";\nimport { Text } from \"theme-ui\";\n\ninterface Props {\n  token: Token;\n}\n\nexport const RewardsTokenInfo: React.FC<Props> = ({ token }: Props) => {\n  return (\n    <div className=\"flex items-center -mb-1 justify-center\">\n      <img\n        className=\"w-8 shadow-md rounded-full\"\n        key={token.address}\n        src={token.logoURL}\n        alt={`Icon of token ${token.name} (${token.symbol})`}\n      />\n      <p className=\"ml-2 text-base\">{token.name}</p>\n    </div>\n  );\n};\n\n\n","/Users/kylescott/src/dahlia-interface/src/components/BoxTokenAmountInfo.tsx",["275"],"import { Flex } from \"theme-ui\";\nimport { Token } from \"src/utils/token\";\nimport { TokenAmountInfo } from \"src/components/TokenAmountInfo\";\n\ninterface Props {\n  token: Token;\n  amount: string;\n}\n\nexport const BoxTokenAmountInfo: React.FC<Props> = ({\n  token,\n  amount,\n}: Props) => {\n  return (\n    <p className=\"flex items-center font-bold\">\n      <TokenAmountInfo token={token} amount={amount} />\n    </p>\n  );\n};\n","/Users/kylescott/src/dahlia-interface/src/components/BlockscoutTxLink.tsx",[],"/Users/kylescott/src/dahlia-interface/src/components/DahliaTokenInfo.tsx",[],"/Users/kylescott/src/dahlia-interface/src/components/PoolIcon.tsx",[],{"ruleId":"276","replacedBy":"277"},{"ruleId":"278","replacedBy":"279"},{"ruleId":"280","severity":1,"message":"281","line":1,"column":17,"nodeType":"282","messageId":"283","endLine":1,"endColumn":26},{"ruleId":"280","severity":1,"message":"284","line":1,"column":28,"nodeType":"282","messageId":"283","endLine":1,"endColumn":36},{"ruleId":"285","severity":1,"message":"286","line":25,"column":5,"nodeType":"287","endLine":25,"endColumn":10,"suggestions":"288"},{"ruleId":"280","severity":1,"message":"289","line":7,"column":15,"nodeType":"282","messageId":"283","endLine":7,"endColumn":25},{"ruleId":"285","severity":1,"message":"286","line":42,"column":5,"nodeType":"287","endLine":42,"endColumn":10,"suggestions":"290"},{"ruleId":"280","severity":1,"message":"291","line":25,"column":15,"nodeType":"282","messageId":"283","endLine":25,"endColumn":25},{"ruleId":"285","severity":1,"message":"286","line":37,"column":5,"nodeType":"287","endLine":37,"endColumn":10,"suggestions":"292"},{"ruleId":"280","severity":1,"message":"293","line":36,"column":10,"nodeType":"282","messageId":"283","endLine":36,"endColumn":24},{"ruleId":"280","severity":1,"message":"291","line":40,"column":15,"nodeType":"282","messageId":"283","endLine":40,"endColumn":25},{"ruleId":"285","severity":1,"message":"286","line":51,"column":5,"nodeType":"287","endLine":51,"endColumn":10,"suggestions":"294"},{"ruleId":"280","severity":1,"message":"295","line":2,"column":10,"nodeType":"282","messageId":"283","endLine":2,"endColumn":14},{"ruleId":"280","severity":1,"message":"296","line":2,"column":22,"nodeType":"282","messageId":"283","endLine":2,"endColumn":29},{"ruleId":"280","severity":1,"message":"297","line":2,"column":31,"nodeType":"282","messageId":"283","endLine":2,"endColumn":35},{"ruleId":"285","severity":1,"message":"286","line":86,"column":5,"nodeType":"287","endLine":86,"endColumn":10,"suggestions":"298"},{"ruleId":"280","severity":1,"message":"299","line":89,"column":9,"nodeType":"282","messageId":"283","endLine":89,"endColumn":16},{"ruleId":"280","severity":1,"message":"300","line":4,"column":10,"nodeType":"282","messageId":"283","endLine":4,"endColumn":19},{"ruleId":"280","severity":1,"message":"301","line":15,"column":3,"nodeType":"282","messageId":"283","endLine":15,"endColumn":13},{"ruleId":"280","severity":1,"message":"295","line":2,"column":18,"nodeType":"282","messageId":"283","endLine":2,"endColumn":22},{"ruleId":"280","severity":1,"message":"296","line":2,"column":30,"nodeType":"282","messageId":"283","endLine":2,"endColumn":37},{"ruleId":"280","severity":1,"message":"297","line":2,"column":48,"nodeType":"282","messageId":"283","endLine":2,"endColumn":52},{"ruleId":"280","severity":1,"message":"302","line":7,"column":10,"nodeType":"282","messageId":"283","endLine":7,"endColumn":19},{"ruleId":"280","severity":1,"message":"303","line":11,"column":8,"nodeType":"282","messageId":"283","endLine":11,"endColumn":10},{"ruleId":"280","severity":1,"message":"299","line":69,"column":9,"nodeType":"282","messageId":"283","endLine":69,"endColumn":16},{"ruleId":"285","severity":1,"message":"286","line":85,"column":5,"nodeType":"287","endLine":85,"endColumn":10,"suggestions":"304"},{"ruleId":"285","severity":1,"message":"305","line":47,"column":9,"nodeType":"306","endLine":50,"endColumn":5},{"ruleId":"285","severity":1,"message":"307","line":55,"column":9,"nodeType":"306","endLine":86,"endColumn":4},{"ruleId":"285","severity":1,"message":"308","line":88,"column":9,"nodeType":"306","endLine":136,"endColumn":4},{"ruleId":"285","severity":1,"message":"309","line":179,"column":6,"nodeType":"287","endLine":179,"endColumn":74,"suggestions":"310"},{"ruleId":"285","severity":1,"message":"286","line":65,"column":5,"nodeType":"287","endLine":65,"endColumn":10,"suggestions":"311"},{"ruleId":"285","severity":1,"message":"312","line":22,"column":51,"nodeType":"287","endLine":22,"endColumn":53,"suggestions":"313"},{"ruleId":"280","severity":1,"message":"297","line":2,"column":28,"nodeType":"282","messageId":"283","endLine":2,"endColumn":32},{"ruleId":"280","severity":1,"message":"314","line":1,"column":8,"nodeType":"282","messageId":"283","endLine":1,"endColumn":14},{"ruleId":"280","severity":1,"message":"297","line":3,"column":10,"nodeType":"282","messageId":"283","endLine":3,"endColumn":14},{"ruleId":"280","severity":1,"message":"315","line":1,"column":10,"nodeType":"282","messageId":"283","endLine":1,"endColumn":14},"no-native-reassign",["316"],"no-negated-in-lhs",["317"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useMemo has a missing dependency: 'network.chainId'. Either include it or remove the dependency array.","ArrayExpression",["318"],"'refetchTVL' is assigned a value but never used.",["319"],"'refetchapr' is assigned a value but never used.",["320"],"'confirmLoading' is assigned a value but never used.",["321"],"'Card' is defined but never used.","'Heading' is defined but never used.","'Text' is defined but never used.",["322"],"'history' is assigned a value but never used.","'isAddress' is defined but never used.","'priceScale' is defined but never used.","'BlockText' is defined but never used.","'BN' is defined but never used.",["323"],"The 'lpTok' object construction makes the dependencies of useMemo Hook (at line 176) change on every render. To fix this, wrap the initialization of 'lpTok' in its own useMemo() Hook.","VariableDeclarator","The 'approveButton' function makes the dependencies of useMemo Hook (at line 176) change on every render. Move it inside the useMemo callback. Alternatively, wrap the definition of 'approveButton' in its own useCallback() Hook.","The 'confirmButton' JSX element makes the dependencies of useMemo Hook (at line 176) change on every render. Move it inside the useMemo callback. Alternatively, wrap the initialization of 'confirmButton' in its own useMemo() Hook.","React Hook React.useMemo has missing dependencies: 'approveButton', 'buttonLoading', 'confirmButton', 'done', 'history', 'lpTok', and 'setPage'. Either include them or remove the dependency array.",["324"],["325"],"React Hook React.useEffect has missing dependencies: 'setAmount' and 'start'. Either include them or remove the dependency array. If 'setAmount' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["326"],"'styled' is defined but never used.","'Flex' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"327","fix":"328"},{"desc":"327","fix":"329"},{"desc":"327","fix":"330"},{"desc":"327","fix":"331"},{"desc":"327","fix":"332"},{"desc":"327","fix":"333"},{"desc":"334","fix":"335"},{"desc":"327","fix":"336"},{"desc":"337","fix":"338"},"Update the dependencies array to be: [kit.web3.eth.Contract, network.chainId]",{"range":"339","text":"340"},{"range":"341","text":"340"},{"range":"342","text":"340"},{"range":"343","text":"340"},{"range":"344","text":"340"},{"range":"345","text":"340"},"Update the dependencies array to be: [done, history, setPage, tokenStates, erc, supply.lpSupply, supply.tokenSupply, buttonLoading, approveButton, pool.tokens, lpTok, confirmButton]",{"range":"346","text":"347"},{"range":"348","text":"340"},"Update the dependencies array to be: [setAmount, start]",{"range":"349","text":"350"},[960,965],"[kit.web3.eth.Contract, network.chainId]",[2000,2005],[1551,1556],[2026,2031],[3091,3096],[2999,3004],[6122,6190],"[done, history, setPage, tokenStates, erc, supply.lpSupply, supply.tokenSupply, buttonLoading, approveButton, pool.tokens, lpTok, confirmButton]",[2545,2550],[538,540],"[setAmount, start]"]