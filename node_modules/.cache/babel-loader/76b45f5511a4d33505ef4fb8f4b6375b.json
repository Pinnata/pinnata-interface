{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { toBN } from \"web3-utils\";\nimport BANK_ABI from \"src/abis/dahlia_contracts/HomoraBank.json\";\nimport { Bank, BANK_MAP } from \"src/config\";\nimport React from \"react\";\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\n\n/**\n * (Projected) APY: homoraBank.banks(token).ctoken.interestRateModel.getSupplyRate(\n * Total Supply,\n * total Borrow,\n * homoraBank.banks(token).ctoken.totalReserves(),\n * homoraBank.banks(token).ctoken.reserveFactorMantissa())\n *\n * Total Supply: homoraBank.banks(token).ctoken.totalSupply()\n * Total Borrow: homoraBank.banks(token).ctoken.totalBorrows()\n * Utilization: jumpRateModel.utilizationRate(Total Supply, Total Borrow, homoraBank.banks(token).ctoken.totalReserves()\n * Balance: safeBox.balanceOf(address)\n */\nexport const useEarnPool = token => {\n  _s();\n\n  const {\n    kit,\n    network\n  } = useContractKit(); //TODO: what to do when connected to ethereum address\n\n  console.log('address', BANK_MAP[network.chainId].bank);\n  const bank = React.useMemo(() => new kit.web3.eth.Contract(BANK_ABI.abi, Bank[network.chainId]), [kit, network]);\n  console.log('Bank', bank);\n  const call = React.useCallback(async () => {\n    try {\n      console.log('in');\n      const bankInfo = await bank.methods.getBankInfo(token.address).call();\n      console.log('b', bankInfo);\n    } catch (error) {\n      console.log(error);\n    } // const cToken = (new kit.web3.eth.Contract(\n    //     CERC20_ABI as AbiItem[],\n    //     bankInfo.cToken\n    //     ) as unknown) as CErc20Immutable;\n    //     console.log('in')\n    // const totalSupply = await cToken.methods.totalSupply().call();\n    // const totalBorrows = await cToken.methods.totalBorrows().call();\n    // const totalReserves = await cToken.methods.totalReserves().call();\n    // return {\n    //     totalSupply,\n    //     totalBorrows,\n    //     totalReserves,\n    // }\n\n  }, [bank, token.address]);\n  const [tokenInfo] = useAsyncState(null, call);\n  console.log('tokenInfo', tokenInfo);\n  if (tokenInfo == null) return null;\n  const {\n    totalSupply,\n    totalBorrows,\n    totalReserves\n  } = tokenInfo;\n  return {\n    totalSupply: toBN(totalSupply),\n    totalBorrows: toBN(totalBorrows),\n    totalReserves: toBN(totalReserves),\n    utilizationRate: toBN(0),\n    projectedAPY: toBN(0)\n  }; //   const [cToken, setCToken] = useState<CToken | null>(null);\n  //   useEffect(() => {\n  //     void (async () => {\n  //       try {\n  //         const { cToken: cTokenAddress } = await bank.getBankInfo(token.address);\n  //         setCToken(CToken__factory.connect(cTokenAddress, provider));\n  //       } catch (e) {\n  //         console.error(\"Could not fetch cToken\", e);\n  //         Sentry.captureException(e);\n  //         return;\n  //       }\n  //     })();\n  //   }, [bank, provider, token]);\n  //   const [info, setInfo] = useState<{\n  //     totalReserves: TokenAmount;\n  //     totalSupply: TokenAmount;\n  //     totalBorrows: TokenAmount;\n  //     utilizationRate: BigNumber;\n  //     projectedAPY: BigNumber;\n  //   } | null>(null);\n  //   useEffect(() => {\n  //     void (async () => {\n  //       if (!cToken) {\n  //         setInfo(null);\n  //         return;\n  //       }\n  //       try {\n  //         const interestRateModelAddress = await cToken.interestRateModel();\n  //         const interestRateModel = JumpRateModelV2__factory.connect(\n  //           interestRateModelAddress,\n  //           provider\n  //         );\n  //         const info = {\n  //           totalReserves: await cToken.totalReserves(),\n  //           totalSupply: await cToken.totalSupply(),\n  //           totalBorrows: await cToken.totalBorrows(),\n  //           reserveFactorMantissa: await cToken.reserveFactorMantissa(),\n  //         };\n  //         const utilizationRate = await interestRateModel.utilizationRate(\n  //           info.totalSupply,\n  //           info.totalBorrows,\n  //           info.totalReserves\n  //         );\n  //         const supplyRate = await interestRateModel.getSupplyRate(\n  //           info.totalSupply,\n  //           info.totalBorrows,\n  //           info.totalReserves,\n  //           info.reserveFactorMantissa\n  //         );\n  //         setInfo({\n  //           totalSupply: new TokenAmount(token, info.totalSupply.toString()),\n  //           totalBorrows: new TokenAmount(token, info.totalBorrows.toString()),\n  //           totalReserves: new TokenAmount(token, info.totalReserves.toString()),\n  //           utilizationRate,\n  //           projectedAPY: supplyRate,\n  //         });\n  //       } catch (e) {\n  //         console.error(\"Could not fetch pool data\", e);\n  //         Sentry.captureException(e);\n  //         return;\n  //       }\n  //     })();\n  //   }, [cToken, provider, token]);\n  //   return info;\n};\n\n_s(useEarnPool, \"laJ65aA+83HsAG24vsLPDtwUifw=\", false, function () {\n  return [useContractKit, useAsyncState];\n});","map":{"version":3,"sources":["/Users/kylescott/src/nomspace-interface/src/components/useEarnPool.ts"],"names":["useContractKit","toBN","BANK_ABI","Bank","BANK_MAP","React","useAsyncState","useEarnPool","token","kit","network","console","log","chainId","bank","useMemo","web3","eth","Contract","abi","call","useCallback","bankInfo","methods","getBankInfo","address","error","tokenInfo","totalSupply","totalBorrows","totalReserves","utilizationRate","projectedAPY"],"mappings":";;AAAA,SAASA,cAAT,QAA+B,6BAA/B;AAIA,SAAkBC,IAAlB,QAAyC,YAAzC;AAEA,OAAOC,QAAP,MAAqB,2CAArB;AAIA,SAASC,IAAT,EAAeC,QAAf,QAA+B,YAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,yBAA9B;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GACtBC,KADyB,IAQf;AAAA;;AACR,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAmBV,cAAc,EAAvC,CADQ,CAER;;AACAW,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBR,QAAQ,CAACM,OAAO,CAACG,OAAT,CAAR,CAA0BC,IAAjD;AACA,QAAMA,IAAI,GAAGT,KAAK,CAACU,OAAN,CAAc,MAAO,IAAIN,GAAG,CAACO,IAAJ,CAASC,GAAT,CAAaC,QAAjB,CAC9BhB,QAAQ,CAACiB,GADqB,EAE9BhB,IAAI,CAACO,OAAO,CAACG,OAAT,CAF0B,CAArB,EAGgB,CAACJ,GAAD,EAAMC,OAAN,CAHhB,CAAb;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBE,IAApB;AACA,QAAMM,IAAI,GAAGf,KAAK,CAACgB,WAAN,CAAkB,YAAY;AACvC,QAAI;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,YAAMU,QAAQ,GAAI,MAAMR,IAAI,CAACS,OAAL,CAAaC,WAAb,CAAyBhB,KAAK,CAACiB,OAA/B,EAAwCL,IAAxC,EAAxB;AACAT,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBU,QAAjB;AACH,KAJD,CAIE,OAAOI,KAAP,EAAc;AACZf,MAAAA,OAAO,CAACC,GAAR,CAAYc,KAAZ;AACH,KAPsC,CAQvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH,GArBY,EAqBV,CAACZ,IAAD,EAAON,KAAK,CAACiB,OAAb,CArBU,CAAb;AAuBA,QAAM,CAACE,SAAD,IAAcrB,aAAa,CAAC,IAAD,EAAOc,IAAP,CAAjC;AACAT,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBe,SAAzB;AAEA,MAAIA,SAAS,IAAI,IAAjB,EAAuB,OAAO,IAAP;AAEvB,QAAM;AACFC,IAAAA,WADE;AAEFC,IAAAA,YAFE;AAGFC,IAAAA;AAHE,MAIFH,SAJJ;AAMA,SAAO;AACHC,IAAAA,WAAW,EAAE3B,IAAI,CAAC2B,WAAD,CADd;AAEHC,IAAAA,YAAY,EAAE5B,IAAI,CAAC4B,YAAD,CAFf;AAGHC,IAAAA,aAAa,EAAE7B,IAAI,CAAC6B,aAAD,CAHhB;AAIHC,IAAAA,eAAe,EAAE9B,IAAI,CAAC,CAAD,CAJlB;AAKH+B,IAAAA,YAAY,EAAE/B,IAAI,CAAC,CAAD;AALf,GAAP,CA3CQ,CAmDZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACC,CA7HM;;GAAMM,W;UASgBP,c,EA+BLM,a","sourcesContent":["import { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { useEffect, useState } from \"react\";\nimport { Token } from \"src/utils/token\";\nimport { AbiItem, toBN, isAddress } from \"web3-utils\";\nimport BN from \"bn.js\";\nimport BANK_ABI from \"src/abis/dahlia_contracts/HomoraBank.json\"\nimport CERC20_ABI from \"src/abis/fountain_of_youth/CErc20Immutable.json\"\nimport { HomoraBank } from \"src/generated/HomoraBank\";\nimport { CErc20Immutable } from \"src/generated/CErc20Immutable\";\nimport { Bank, BANK_MAP } from \"src/config\";\nimport React from \"react\";\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { ChainId } from \"@celo-tools/use-contractkit\";\n\n\n\n/**\n * (Projected) APY: homoraBank.banks(token).ctoken.interestRateModel.getSupplyRate(\n * Total Supply,\n * total Borrow,\n * homoraBank.banks(token).ctoken.totalReserves(),\n * homoraBank.banks(token).ctoken.reserveFactorMantissa())\n *\n * Total Supply: homoraBank.banks(token).ctoken.totalSupply()\n * Total Borrow: homoraBank.banks(token).ctoken.totalBorrows()\n * Utilization: jumpRateModel.utilizationRate(Total Supply, Total Borrow, homoraBank.banks(token).ctoken.totalReserves()\n * Balance: safeBox.balanceOf(address)\n */\nexport const useEarnPool = (\n  token: Token\n): {\n  totalReserves: BN;\n  totalSupply: BN;\n  totalBorrows: BN;\n  utilizationRate: BN;\n  projectedAPY: BN;\n} | null => {\n    const { kit, network } = useContractKit();\n    //TODO: what to do when connected to ethereum address\n    console.log('address', BANK_MAP[network.chainId].bank)\n    const bank = React.useMemo(() => (new kit.web3.eth.Contract(\n        BANK_ABI.abi as AbiItem[],\n        Bank[network.chainId]\n    ) as unknown) as HomoraBank, [kit, network]); \n    console.log('Bank', bank)\n    const call = React.useCallback(async () => {\n        try {\n            console.log('in')\n            const bankInfo =  await bank.methods.getBankInfo(token.address).call();\n            console.log('b', bankInfo)\n        } catch (error) {\n            console.log(error)\n        }\n        // const cToken = (new kit.web3.eth.Contract(\n        //     CERC20_ABI as AbiItem[],\n        //     bankInfo.cToken\n        //     ) as unknown) as CErc20Immutable;\n        //     console.log('in')\n        // const totalSupply = await cToken.methods.totalSupply().call();\n        // const totalBorrows = await cToken.methods.totalBorrows().call();\n        // const totalReserves = await cToken.methods.totalReserves().call();\n        // return {\n        //     totalSupply,\n        //     totalBorrows,\n        //     totalReserves,\n        // }\n    }, [bank, token.address])\n\n    const [tokenInfo] = useAsyncState(null, call);\n    console.log('tokenInfo', tokenInfo)\n\n    if (tokenInfo == null) return null;\n\n    const {\n        totalSupply,\n        totalBorrows, \n        totalReserves,\n    } = tokenInfo;\n\n    return {\n        totalSupply: toBN(totalSupply),\n        totalBorrows: toBN(totalBorrows),\n        totalReserves: toBN(totalReserves),\n        utilizationRate: toBN(0),\n        projectedAPY: toBN(0),\n    };\n\n//   const [cToken, setCToken] = useState<CToken | null>(null);\n//   useEffect(() => {\n//     void (async () => {\n//       try {\n//         const { cToken: cTokenAddress } = await bank.getBankInfo(token.address);\n//         setCToken(CToken__factory.connect(cTokenAddress, provider));\n//       } catch (e) {\n//         console.error(\"Could not fetch cToken\", e);\n//         Sentry.captureException(e);\n//         return;\n//       }\n//     })();\n//   }, [bank, provider, token]);\n\n//   const [info, setInfo] = useState<{\n//     totalReserves: TokenAmount;\n//     totalSupply: TokenAmount;\n//     totalBorrows: TokenAmount;\n//     utilizationRate: BigNumber;\n//     projectedAPY: BigNumber;\n//   } | null>(null);\n//   useEffect(() => {\n//     void (async () => {\n//       if (!cToken) {\n//         setInfo(null);\n//         return;\n//       }\n//       try {\n//         const interestRateModelAddress = await cToken.interestRateModel();\n//         const interestRateModel = JumpRateModelV2__factory.connect(\n//           interestRateModelAddress,\n//           provider\n//         );\n//         const info = {\n//           totalReserves: await cToken.totalReserves(),\n//           totalSupply: await cToken.totalSupply(),\n//           totalBorrows: await cToken.totalBorrows(),\n//           reserveFactorMantissa: await cToken.reserveFactorMantissa(),\n//         };\n//         const utilizationRate = await interestRateModel.utilizationRate(\n//           info.totalSupply,\n//           info.totalBorrows,\n//           info.totalReserves\n//         );\n//         const supplyRate = await interestRateModel.getSupplyRate(\n//           info.totalSupply,\n//           info.totalBorrows,\n//           info.totalReserves,\n//           info.reserveFactorMantissa\n//         );\n//         setInfo({\n//           totalSupply: new TokenAmount(token, info.totalSupply.toString()),\n//           totalBorrows: new TokenAmount(token, info.totalBorrows.toString()),\n//           totalReserves: new TokenAmount(token, info.totalReserves.toString()),\n//           utilizationRate,\n//           projectedAPY: supplyRate,\n//         });\n//       } catch (e) {\n//         console.error(\"Could not fetch pool data\", e);\n//         Sentry.captureException(e);\n//         return;\n//       }\n//     })();\n//   }, [cToken, provider, token]);\n\n//   return info;\n};\n"]},"metadata":{},"sourceType":"module"}