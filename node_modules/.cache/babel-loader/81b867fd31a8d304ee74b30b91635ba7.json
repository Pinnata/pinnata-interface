{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport IERC20_ABI from \"src/abis/dahlia_contracts/IERC20.json\";\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\nimport { isAddress, toBN } from \"web3-utils\";\nimport { Bank } from \"src/config\";\nexport const useERCmulti = tokens => {\n  _s();\n\n  const {\n    kit,\n    address\n  } = useContractKit();\n  const userAddress = address;\n  const call = React.useCallback(async () => {\n    let arr = [];\n\n    for (let token of tokens) {\n      const address = token.address;\n\n      if (!address || !isAddress(address) || !userAddress) {\n        arr.push(null);\n      }\n\n      ;\n      const ERCToken = new kit.web3.eth.Contract(IERC20_ABI.abi, address);\n      const allowance = toBN( //TODO: check allowance of homoraBank\n      await ERCToken.methods.allowance(userAddress, Bank[network.chainId]).call());\n      const balance = toBN(await ERCToken.methods.balanceOf(userAddress).call());\n      arr.push({\n        allowance,\n        balance\n      });\n    }\n\n    return arr;\n  }, [kit, userAddress, tokens]);\n  return useAsyncState(null, call);\n};\n\n_s(useERCmulti, \"U6jrhdxPiR/2Ws75Q3dp3alj9wU=\", false, function () {\n  return [useContractKit, useAsyncState];\n});","map":{"version":3,"sources":["/Users/kylescott/src/nomspace-interface/src/hooks/useERCmulti.ts"],"names":["React","useContractKit","IERC20_ABI","useAsyncState","isAddress","toBN","Bank","useERCmulti","tokens","kit","address","userAddress","call","useCallback","arr","token","push","ERCToken","web3","eth","Contract","abi","allowance","methods","network","chainId","balance","balanceOf"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,OAAOC,UAAP,MAAuB,uCAAvB;AAEA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAyC,YAAzC;AAEA,SAASC,IAAT,QAAqB,YAArB;AAIA,OAAO,MAAMC,WAAW,GAAIC,MAAD,IAAqB;AAAA;;AAC9C,QAAM;AAAEC,IAAAA,GAAF;AAAQC,IAAAA;AAAR,MAAmBT,cAAc,EAAvC;AACA,QAAMU,WAAW,GAAGD,OAApB;AACA,QAAME,IAAI,GAAGZ,KAAK,CAACa,WAAN,CAAkB,YAAY;AACvC,QAAIC,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIC,KAAT,IAAkBP,MAAlB,EAA0B;AACxB,YAAME,OAAO,GAAGK,KAAK,CAACL,OAAtB;;AACA,UAAI,CAACA,OAAD,IAAY,CAACN,SAAS,CAACM,OAAD,CAAtB,IAAmC,CAACC,WAAxC,EAAqD;AACjDG,QAAAA,GAAG,CAACE,IAAJ,CAAS,IAAT;AACH;;AAAA;AACD,YAAMC,QAAQ,GAAI,IAAIR,GAAG,CAACS,IAAJ,CAASC,GAAT,CAAaC,QAAjB,CACdlB,UAAU,CAACmB,GADG,EAEdX,OAFc,CAAlB;AAIE,YAAMY,SAAS,GAAGjB,IAAI,EACpB;AACA,YAAMY,QAAQ,CAACM,OAAT,CAAiBD,SAAjB,CAA2BX,WAA3B,EAAyCL,IAAI,CAACkB,OAAO,CAACC,OAAT,CAA7C,EAAgEb,IAAhE,EAFc,CAAtB;AAIA,YAAMc,OAAO,GAAGrB,IAAI,CAAC,MAAMY,QAAQ,CAACM,OAAT,CAAiBI,SAAjB,CAA2BhB,WAA3B,EAAyCC,IAAzC,EAAP,CAApB;AACAE,MAAAA,GAAG,CAACE,IAAJ,CAAS;AAACM,QAAAA,SAAD;AAAYI,QAAAA;AAAZ,OAAT;AACH;;AACD,WAAOZ,GAAP;AACH,GAnBY,EAmBV,CAACL,GAAD,EAAME,WAAN,EAAmBH,MAAnB,CAnBU,CAAb;AAoBA,SAAOL,aAAa,CAAC,IAAD,EAAOS,IAAP,CAApB;AACD,CAxBM;;GAAML,W;UACcN,c,EAsBlBE,a","sourcesContent":["import React from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport IERC20_ABI from \"src/abis/dahlia_contracts/IERC20.json\"\nimport { IERC20 } from \"src/generated/IERC20\";\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\nimport { isAddress, toBN, AbiItem } from \"web3-utils\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { Bank } from \"src/config\";\nimport { Token } from \"src/utils/token\";\n\n\nexport const useERCmulti = (tokens: Token[]) => {\n  const { kit , address} = useContractKit();\n  const userAddress = address; \n  const call = React.useCallback(async () => {\n      let arr = [];\n      for (let token of tokens) {\n        const address = token.address;\n        if (!address || !isAddress(address) || !userAddress) {\n            arr.push(null);\n        };\n        const ERCToken = (new kit.web3.eth.Contract(\n            IERC20_ABI.abi as AbiItem[],\n            address,\n          ) as unknown) as IERC20;\n          const allowance = toBN(\n            //TODO: check allowance of homoraBank\n            await ERCToken.methods.allowance(userAddress!, Bank[network.chainId]).call()\n          );\n          const balance = toBN(await ERCToken.methods.balanceOf(userAddress!).call());\n          arr.push({allowance, balance});\n      }\n      return arr;\n  }, [kit, userAddress, tokens]);\n  return useAsyncState(null, call);\n};\n"]},"metadata":{},"sourceType":"module"}