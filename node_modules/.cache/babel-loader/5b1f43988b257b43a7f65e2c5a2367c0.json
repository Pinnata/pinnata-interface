{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport IERC20_ABI from \"src/abis/dahlia_contracts/IERC20.json\";\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\nimport { isAddress, toBN } from \"web3-utils\";\nimport { getAddress } from \"ethers/lib/utils\";\nexport const useERC = (tokenAddress, allowAddress) => {\n  _s();\n\n  const {\n    kit,\n    address\n  } = useContractKit();\n  const call = React.useCallback(async () => {\n    if (!tokenAddress || !isAddress(tokenAddress) || !address) {\n      return null;\n    }\n\n    const ERCToken = new kit.web3.eth.Contract(IERC20_ABI.abi, getAddress(tokenAddress));\n    const allowance = allowAddress ? toBN(await ERCToken.methods.allowance(address, allowAddress).call()) : toBN(\"0\");\n    const balance = toBN(await ERCToken.methods.balanceOf(address).call());\n    return {\n      allowance,\n      balance\n    };\n  }, [kit, address, tokenAddress, allowAddress]);\n  return useAsyncState(null, call);\n};\n\n_s(useERC, \"65oUwvUZD1z9qgK3qj8TClGRkms=\", false, function () {\n  return [useContractKit, useAsyncState];\n});","map":{"version":3,"sources":["/Users/kylescott/src/dahlia-interface/src/hooks/useERC.ts"],"names":["React","useContractKit","IERC20_ABI","useAsyncState","isAddress","toBN","getAddress","useERC","tokenAddress","allowAddress","kit","address","call","useCallback","ERCToken","web3","eth","Contract","abi","allowance","methods","balance","balanceOf"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,OAAOC,UAAP,MAAuB,uCAAvB;AAEA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAyC,YAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA,OAAO,MAAMC,MAAM,GAAG,CAACC,YAAD,EAAuBC,YAAvB,KAAiD;AAAA;;AACrE,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAmBV,cAAc,EAAvC;AACA,QAAMW,IAAI,GAAGZ,KAAK,CAACa,WAAN,CAAkB,YAAY;AACzC,QAAI,CAACL,YAAD,IAAiB,CAACJ,SAAS,CAACI,YAAD,CAA3B,IAA6C,CAACG,OAAlD,EAA2D;AACzD,aAAO,IAAP;AACD;;AACD,UAAMG,QAAQ,GAAI,IAAIJ,GAAG,CAACK,IAAJ,CAASC,GAAT,CAAaC,QAAjB,CAChBf,UAAU,CAACgB,GADK,EAEhBZ,UAAU,CAACE,YAAD,CAFM,CAAlB;AAKA,UAAMW,SAAS,GAAGV,YAAY,GAAGJ,IAAI,CACnC,MAAMS,QAAQ,CAACM,OAAT,CAAiBD,SAAjB,CAA2BR,OAA3B,EAAoCF,YAApC,EAAkDG,IAAlD,EAD6B,CAAP,GAE1BP,IAAI,CAAC,GAAD,CAFR;AAGA,UAAMgB,OAAO,GAAGhB,IAAI,CAAC,MAAMS,QAAQ,CAACM,OAAT,CAAiBE,SAAjB,CAA2BX,OAA3B,EAAoCC,IAApC,EAAP,CAApB;AACA,WAAO;AAAEO,MAAAA,SAAF;AAAaE,MAAAA;AAAb,KAAP;AACD,GAdY,EAcV,CAACX,GAAD,EAAMC,OAAN,EAAeH,YAAf,EAA6BC,YAA7B,CAdU,CAAb;AAeA,SAAON,aAAa,CAAC,IAAD,EAAOS,IAAP,CAApB;AACD,CAlBM;;GAAML,M;UACcN,c,EAgBlBE,a","sourcesContent":["import React from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport IERC20_ABI from \"src/abis/dahlia_contracts/IERC20.json\"\nimport { IERC20 } from \"src/generated/IERC20\";\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\nimport { isAddress, toBN, AbiItem } from \"web3-utils\";\nimport { getAddress } from \"ethers/lib/utils\";\n\nexport const useERC = (tokenAddress: string, allowAddress?: string) => {\n  const { kit, address } = useContractKit();\n  const call = React.useCallback(async () => {\n    if (!tokenAddress || !isAddress(tokenAddress) || !address) {\n      return null;\n    }\n    const ERCToken = (new kit.web3.eth.Contract(\n      IERC20_ABI.abi as AbiItem[],\n      getAddress(tokenAddress),\n    ) as unknown) as IERC20;\n\n    const allowance = allowAddress ? toBN(\n      await ERCToken.methods.allowance(address, allowAddress).call()\n    ) : toBN(\"0\");\n    const balance = toBN(await ERCToken.methods.balanceOf(address).call());\n    return { allowance, balance };\n  }, [kit, address, tokenAddress, allowAddress]);\n  return useAsyncState(null, call);\n};\n"]},"metadata":{},"sourceType":"module"}