{"ast":null,"code":"import { jsx as jsx$1, ThemeContext } from '@emotion/react';\nimport { createContext, useContext } from 'react';\nimport deepmerge from 'deepmerge';\nimport packageInfo from '@emotion/react/package.json';\nimport parseProps from '@theme-ui/parse-props';\nconst __EMOTION_VERSION__ = packageInfo.version;\n\nconst jsx = (type, props, ...children) => jsx$1(type, parseProps(props), ...children);\n/**\n * @internal for Babel JSX pragma\n * @see https://github.com/system-ui/theme-ui/issues/1603\n */\n\n\nconst createElement = jsx;\n/**\n * @internal\n */\n\nconst __ThemeUIContext = /*#__PURE__*/createContext({\n  __EMOTION_VERSION__,\n  theme: {}\n});\n\nconst useThemeUI = () => useContext(__ThemeUIContext);\n\nconst canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nconst REACT_ELEMENT = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\nconst FORWARD_REF = canUseSymbol ? Symbol.for('react.forward_ref') : 0xeac7;\nconst deepmergeOptions = {\n  isMergeableObject: n => {\n    return !!n && typeof n === 'object' && n.$$typeof !== REACT_ELEMENT && n.$$typeof !== FORWARD_REF;\n  },\n  arrayMerge: (_leftArray, rightArray) => rightArray\n};\n/**\n * Deeply merge themes\n */\n\nconst merge = (a, b) => deepmerge(a, b, deepmergeOptions);\n\nfunction mergeAll(...args) {\n  return deepmerge.all(args, deepmergeOptions);\n}\n\nmerge.all = mergeAll;\n/**\n * @internal\n */\n\nconst __ThemeUIInternalBaseThemeProvider = ({\n  context,\n  children\n}) => jsx(ThemeContext.Provider, {\n  value: context.theme\n}, jsx(__ThemeUIContext.Provider, {\n  value: context,\n  children\n}));\n\nfunction ThemeProvider({\n  theme,\n  children\n}) {\n  const outer = useThemeUI();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (outer.__EMOTION_VERSION__ !== __EMOTION_VERSION__) {\n      console.warn('Multiple versions of Emotion detected,', 'and theming might not work as expected.', 'Please ensure there is only one copy of @emotion/react installed in your application.');\n    }\n  }\n\n  const context = typeof theme === 'function' ? { ...outer,\n    theme: theme(outer.theme)\n  } : merge.all({}, outer, {\n    theme\n  });\n  return jsx(__ThemeUIInternalBaseThemeProvider, {\n    context\n  }, children);\n}\n\nexport { ThemeProvider, __ThemeUIContext, __ThemeUIInternalBaseThemeProvider, createElement, jsx, merge, useThemeUI };","map":{"version":3,"sources":["/Users/kylescott/src/nomspace-interface/node_modules/@theme-ui/core/dist/theme-ui-core.esm.js"],"names":["jsx","jsx$1","ThemeContext","createContext","useContext","deepmerge","packageInfo","parseProps","__EMOTION_VERSION__","version","type","props","children","createElement","__ThemeUIContext","theme","useThemeUI","canUseSymbol","Symbol","for","REACT_ELEMENT","FORWARD_REF","deepmergeOptions","isMergeableObject","n","$$typeof","arrayMerge","_leftArray","rightArray","merge","a","b","mergeAll","args","all","__ThemeUIInternalBaseThemeProvider","context","Provider","value","ThemeProvider","outer","process","env","NODE_ENV","console","warn"],"mappings":"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","sourcesContent":["import { jsx as jsx$1, ThemeContext } from '@emotion/react';\nimport { createContext, useContext } from 'react';\nimport deepmerge from 'deepmerge';\nimport packageInfo from '@emotion/react/package.json';\nimport parseProps from '@theme-ui/parse-props';\n\nconst __EMOTION_VERSION__ = packageInfo.version;\nconst jsx = (type, props, ...children) => jsx$1(type, parseProps(props), ...children);\n/**\n * @internal for Babel JSX pragma\n * @see https://github.com/system-ui/theme-ui/issues/1603\n */\n\nconst createElement = jsx;\n\n/**\n * @internal\n */\nconst __ThemeUIContext = /*#__PURE__*/createContext({\n  __EMOTION_VERSION__,\n  theme: {}\n});\nconst useThemeUI = () => useContext(__ThemeUIContext);\nconst canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nconst REACT_ELEMENT = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\nconst FORWARD_REF = canUseSymbol ? Symbol.for('react.forward_ref') : 0xeac7;\nconst deepmergeOptions = {\n  isMergeableObject: n => {\n    return !!n && typeof n === 'object' && n.$$typeof !== REACT_ELEMENT && n.$$typeof !== FORWARD_REF;\n  },\n  arrayMerge: (_leftArray, rightArray) => rightArray\n};\n/**\n * Deeply merge themes\n */\n\nconst merge = (a, b) => deepmerge(a, b, deepmergeOptions);\n\nfunction mergeAll(...args) {\n  return deepmerge.all(args, deepmergeOptions);\n}\n\nmerge.all = mergeAll;\n\n/**\n * @internal\n */\nconst __ThemeUIInternalBaseThemeProvider = ({\n  context,\n  children\n}) => jsx(ThemeContext.Provider, {\n  value: context.theme\n}, jsx(__ThemeUIContext.Provider, {\n  value: context,\n  children\n}));\nfunction ThemeProvider({\n  theme,\n  children\n}) {\n  const outer = useThemeUI();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (outer.__EMOTION_VERSION__ !== __EMOTION_VERSION__) {\n      console.warn('Multiple versions of Emotion detected,', 'and theming might not work as expected.', 'Please ensure there is only one copy of @emotion/react installed in your application.');\n    }\n  }\n\n  const context = typeof theme === 'function' ? { ...outer,\n    theme: theme(outer.theme)\n  } : merge.all({}, outer, {\n    theme\n  });\n  return jsx(__ThemeUIInternalBaseThemeProvider, {\n    context\n  }, children);\n}\n\nexport { ThemeProvider, __ThemeUIContext, __ThemeUIInternalBaseThemeProvider, createElement, jsx, merge, useThemeUI };\n"]},"metadata":{},"sourceType":"module"}