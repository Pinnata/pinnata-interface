{"ast":null,"code":"import { createAction, createReducer } from \"@reduxjs/toolkit\"; // Typings\n\nexport let Page;\n\n(function (Page) {\n  Page[\"EARN\"] = \"earn\";\n  Page[\"FARM\"] = \"farm\";\n  Page[\"POSITIONS\"] = \"positions\";\n  Page[\"SUPPLY\"] = \"supply\";\n  Page[\"WITHDRAW\"] = \"withdraw\";\n})(Page || (Page = {}));\n\nconst initialState = {\n  currentPage: Page.EARN\n}; // Actions\n\nexport const setCurrentPage = createAction(\"global/setCurrentPage\"); // Reducer\n\nexport default createReducer(initialState, builder => builder.addCase(setCurrentPage, (state, action) => {\n  const {\n    nextPage\n  } = action.payload;\n  return { ...state,\n    currentPage: nextPage\n  };\n}));","map":{"version":3,"sources":["/Users/kylescott/src/dahlia-interface/src/state/global/index.ts"],"names":["createAction","createReducer","Page","initialState","currentPage","EARN","setCurrentPage","builder","addCase","state","action","nextPage","payload"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,kBAA5C,C,CAEA;;AACA,WAAYC,IAAZ;;WAAYA,I;AAAAA,EAAAA,I;AAAAA,EAAAA,I;AAAAA,EAAAA,I;AAAAA,EAAAA,I;AAAAA,EAAAA,I;GAAAA,I,KAAAA,I;;AAYZ,MAAMC,YAAyB,GAAG;AAChCC,EAAAA,WAAW,EAAEF,IAAI,CAACG;AADc,CAAlC,C,CAIA;;AACA,OAAO,MAAMC,cAAc,GAAGN,YAAY,CACxC,uBADwC,CAAnC,C,CAIP;;AACA,eAAeC,aAAa,CAACE,YAAD,EAAgBI,OAAD,IACzCA,OAAO,CAACC,OAAR,CAAgBF,cAAhB,EAAgC,CAACG,KAAD,EAAQC,MAAR,KAAmB;AACjD,QAAM;AAAEC,IAAAA;AAAF,MAAeD,MAAM,CAACE,OAA5B;AACA,SAAO,EAAE,GAAGH,KAAL;AAAYL,IAAAA,WAAW,EAAEO;AAAzB,GAAP;AACD,CAHD,CAD0B,CAA5B","sourcesContent":["import { createAction, createReducer } from \"@reduxjs/toolkit\";\n\n// Typings\nexport enum Page {\n  EARN = \"earn\",\n  FARM = \"farm\", \n  POSITIONS = \"positions\",\n  SUPPLY = \"supply\",\n  WITHDRAW = \"withdraw\",\n}\n\ninterface GlobalState {\n  currentPage?: Page;\n}\n\nconst initialState: GlobalState = {\n  currentPage: Page.EARN,\n};\n\n// Actions\nexport const setCurrentPage = createAction<{ nextPage: Page }>(\n  \"global/setCurrentPage\"\n);\n\n// Reducer\nexport default createReducer(initialState, (builder) =>\n  builder.addCase(setCurrentPage, (state, action) => {\n    const { nextPage } = action.payload;\n    return { ...state, currentPage: nextPage };\n  })\n);\n"]},"metadata":{},"sourceType":"module"}