{"ast":null,"code":"var _jsxFileName = \"/Users/kylescott/src/nomspace-interface/src/pages/Position/PositionEntry.tsx\",\n    _s = $RefreshSig$();\n\nimport { css } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport BANK_ABI from \"src/abis/dahlia_contracts/HomoraBank.json\";\nimport { Bank, DEFAULT_GAS_PRICE } from \"src/config\";\nimport React from \"react\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { FarmInfo } from \"src/components/FarmInfo\";\nimport { Flex, Button } from \"theme-ui\";\nimport { atom, useRecoilState, useSetRecoilState } from 'recoil';\nimport UNI_SPELL from \"src/abis/dahlia_contracts/UniswapV2SpellV1.json\";\nimport { MaxUint256 } from \"@ethersproject/constants\";\nimport { toastTx } from \"src/utils/toastTx\";\nimport { toast } from \"react-toastify\";\nimport { posPageState, posPoolState, posPage } from \"src/pages/Position\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst emptyFarmState = {\n  tokenSupply: null,\n  lpSupply: null,\n  tokenBorrow: null,\n  lpBorrow: null,\n  info: null,\n  positionId: null,\n  collateralSize: null,\n  existingBalance: null,\n  remove: null,\n  payback: null\n};\nexport const posFarmState = atom({\n  key: 'posFarmState',\n  default: emptyFarmState\n});\nexport const PositionEntry = info => {\n  _s();\n\n  const setPosPage = useSetRecoilState(posPageState);\n  const [pool, setPool] = useRecoilState(posPoolState);\n  const [posFarm, setPosFarm] = useRecoilState(posFarmState); // setPool(info.pool); \n  //   const setTab = useSetRecoilState(showTabs);\n\n  const {\n    kit,\n    network,\n    getConnectedKit\n  } = useContractKit();\n  const [confirmLoading, setConfirmLoading] = React.useState(false); //   const bank = React.useMemo(() => (new kit.web3.eth.Contract(\n  //     BANK_ABI.abi as AbiItem[],\n  //     getAddress(Bank[network.chainId])\n  //   ) as unknown) as HomoraBank, [kit, network]); \n  //   const call = React.useCallback(async () => {\n  //     try {\n  //         const borrows = [];\n  //         const factors = [];\n  //         const oracle = await bank.methods.oracle().call();\n  //         const proxyOracle = (new kit.web3.eth.Contract(\n  //           PROXYORACLE_ABI.abi as AbiItem[],\n  //           oracle,\n  //         ) as unknown) as ProxyOracle;\n  //         for (let i: number = 0; i < pool.tokens.length; i += 1) {\n  //           const bankInfo =  await bank.methods.getBankInfo(pool?.tokens[i]!.address).call();\n  //           const factor = await proxyOracle.methods.tokenFactors(pool?.tokens[i]!.address).call();\n  //           factors.push(factor);\n  //           const cToken = (new kit.web3.eth.Contract(\n  //             CERC20_ABI as AbiItem[],\n  //             bankInfo.cToken,\n  //           ) as unknown) as CErc20Immutable;\n  //           const totalSupply = await cToken.methods.totalSupply().call();\n  //           const totalBorrows = await cToken.methods.totalBorrows().call();\n  //           const totalReserves = await cToken.methods.totalReserves().call();\n  //           const interestRateModel = await cToken.methods.interestRateModel().call();\n  //           const jumpRate = (new kit.web3.eth.Contract(\n  //             JUMPRATE_ABI as AbiItem[],\n  //             interestRateModel,\n  //           ) as unknown) as JumpRateModelV2;\n  //           const borrowRate = await jumpRate.methods.getBorrowRate(totalSupply, totalBorrows, totalReserves).call();\n  //           borrows.push(toBN(borrowRate));\n  //         }\n  //         return {\n  //           borrowRate: borrows,\n  //           tokenFactor: factors,\n  //         };\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }, [bank, pool.tokens, kit])\n  //   const [info] = useAsyncState(null, call);\n  //   const lever = (factor: {borrowFactor: string, collateralFactor: string}) => {\n  //     return 1 + (Number(factor.collateralFactor) / (Number(factor.borrowFactor) - Number(factor.collateralFactor)))\n  //   }\n  //   const maxLever = info ? Math.max(...(info?.tokenFactor.map((x) => lever({borrowFactor: x.borrowFactor, collateralFactor: x.collateralFactor})))!) : 0;\n  //   const { tokens } = poolInfo;\n\n  const closeButton = /*#__PURE__*/_jsxDEV(Button, {\n    onClick: async () => {\n      const kit = await getConnectedKit(); // kit is connected to a wallet\n\n      try {\n        setConfirmLoading(true);\n        const bank = new kit.web3.eth.Contract(BANK_ABI.abi, getAddress(Bank[network.chainId]));\n        const spell = new kit.web3.eth.Contract(UNI_SPELL.abi, getAddress(info.pool.spell));\n        const bytes = spell.methods.removeLiquidityWERC20(info.pool.tokens[0].address, info.pool.tokens[1].address, [MaxUint256.toString(), 0, MaxUint256.toString(), MaxUint256.toString(), 0, 0, 0]).encodeABI();\n        const tx = await bank.methods.execute(0, info.pool.spell, bytes).send({\n          from: kit.defaultAccount,\n          gasPrice: DEFAULT_GAS_PRICE,\n          gas: 10000000\n        });\n        toastTx(tx.transactionHash);\n      } catch (e) {\n        toast(e.message);\n      } finally {\n        setConfirmLoading(false);\n      }\n    },\n    children: \"Close\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FarmInfo, {\n        props: info.pool\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: \"A lot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: \"A lot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: \"High\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: \"High\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      css: css`\n          text-align: right;\n        `,\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        sx: {\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          flexDirection: \"column\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          sx: {\n            justifyContent: \"center\",\n            alighnItems: \"center\",\n            gap: \"6px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              setPosFarm({ ...posFarm,\n                positionId: info.positionId,\n                collateralSize: info.collateralSize\n              });\n              setPosPage(posPage.Add);\n            },\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              setPosFarm({ ...posFarm,\n                positionId: info.positionId,\n                collateralSize: info.collateralSize\n              });\n              setPosPage(posPage.Remove);\n            },\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          sx: {\n            justifyContent: \"center\",\n            alighnItems: \"center\",\n            gap: \"6px\"\n          },\n          children: [closeButton, /*#__PURE__*/_jsxDEV(Button, {\n            disabled: info.pool.wrapper === null,\n            children: \"Harvest\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PositionEntry, \"2lB4BQQP54VGjVtjkaOEiq53B/o=\", false, function () {\n  return [useSetRecoilState, useRecoilState, useRecoilState, useContractKit];\n});\n\n_c = PositionEntry;\nconst Row = styled.tr`\n  height: 72px;\n`;\n_c2 = Row;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PositionEntry\");\n$RefreshReg$(_c2, \"Row\");","map":{"version":3,"sources":["/Users/kylescott/src/nomspace-interface/src/pages/Position/PositionEntry.tsx"],"names":["css","styled","useContractKit","BANK_ABI","Bank","DEFAULT_GAS_PRICE","React","getAddress","FarmInfo","Flex","Button","atom","useRecoilState","useSetRecoilState","UNI_SPELL","MaxUint256","toastTx","toast","posPageState","posPoolState","posPage","emptyFarmState","tokenSupply","lpSupply","tokenBorrow","lpBorrow","info","positionId","collateralSize","existingBalance","remove","payback","posFarmState","key","default","PositionEntry","setPosPage","pool","setPool","posFarm","setPosFarm","kit","network","getConnectedKit","confirmLoading","setConfirmLoading","useState","closeButton","bank","web3","eth","Contract","abi","chainId","spell","bytes","methods","removeLiquidityWERC20","tokens","address","toString","encodeABI","tx","execute","send","from","defaultAccount","gasPrice","gas","transactionHash","e","message","justifyContent","alignItems","flexDirection","gap","alighnItems","Add","Remove","wrapper","Row","tr"],"mappings":"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","sourcesContent":["import { css } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { TokenInfo } from \"src/components/TokenInfo\";\nimport { Token } from \"src/utils/token\";\nimport { useHistory } from \"react-router-dom\";\nimport { AbiItem, toBN } from \"web3-utils\";\nimport BANK_ABI from \"src/abis/dahlia_contracts/HomoraBank.json\";\nimport CERC20_ABI from \"src/abis/fountain_of_youth/CErc20Immutable.json\";\nimport JUMPRATE_ABI from \"src/abis/fountain_of_youth/JumpRateModelV2.json\"; \nimport PROXYORACLE_ABI from \"src/abis/dahlia_contracts/ProxyOracle.json\";\nimport { HomoraBank } from \"src/generated/HomoraBank\";\nimport { ProxyOracle } from \"src/generated/ProxyOracle\";\nimport { CErc20Immutable } from \"src/generated/CErc20Immutable\";\nimport { JumpRateModelV2 } from \"src/generated/JumpRateModelV2\";\nimport { Bank, DEFAULT_GAS_PRICE} from \"src/config\";\nimport React from \"react\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { humanFriendlyWei } from \"src/utils/eth\";\nimport { PoolIcon } from \"src/components/PoolIcon\";\nimport { FarmInfo } from \"src/components/FarmInfo\";\nimport { Flex, Button } from \"theme-ui\";\nimport { TokenBorrowInfo } from \"src/components/TokenBorrowInfo\";\nimport {  RecoilRoot,  atom,  useRecoilState,  useSetRecoilState } from 'recoil';\nimport { pageState, Page, poolProps, poolState } from \"src/pages/Farm/newFarm/NewFarm\";\nimport UNI_SPELL from \"src/abis/dahlia_contracts/UniswapV2SpellV1.json\";\nimport { UniswapV2SpellV1 } from \"src/generated/UniswapV2SpellV1\";\nimport { MaxUint256 } from \"@ethersproject/constants\";\nimport { toastTx } from \"src/utils/toastTx\";\nimport { toast } from \"react-toastify\";\nimport { posPageState, posPoolState, posPage } from \"src/pages/Position\";\nimport BN from 'bn.js';\n\n\nexport interface farmProps {\n  tokenSupply: BN[] | null;\n  lpSupply: BN | null;\n  tokenBorrow: BN[] | null;\n  lpBorrow: BN | null;\n  info : any | null; \n  positionId: number | null;\n  collateralSize: string | null; \n  existingBalance: BN[] | null; \n  remove: BN[] | null; \n  payback: BN[] | null; \n}\n\nconst emptyFarmState : farmProps = {\n  tokenSupply: null,\n  lpSupply: null,\n  tokenBorrow: null,\n  lpBorrow: null,\n  info: null,\n  positionId: null,\n  collateralSize: null, \n  existingBalance: null, \n  remove: null,\n  payback: null,\n}\n\nexport const posFarmState = atom({\n  key: 'posFarmState',\n  default: emptyFarmState\n})\n\ninterface Props {\n  pool :poolProps,\n  positionId: number,\n  collateralSize: string, \n}\n\nexport const PositionEntry: React.FC<Props> = (info: Props) => {\n  const setPosPage = useSetRecoilState(posPageState);\n  const [pool, setPool] = useRecoilState(posPoolState)\n  const [posFarm, setPosFarm] = useRecoilState(posFarmState);\n  // setPool(info.pool); \n//   const setTab = useSetRecoilState(showTabs);\n\n  const { kit, network, getConnectedKit } = useContractKit();\n  const [confirmLoading, setConfirmLoading] = React.useState(false);\n\n//   const bank = React.useMemo(() => (new kit.web3.eth.Contract(\n//     BANK_ABI.abi as AbiItem[],\n//     getAddress(Bank[network.chainId])\n//   ) as unknown) as HomoraBank, [kit, network]); \n\n//   const call = React.useCallback(async () => {\n//     try {\n//         const borrows = [];\n//         const factors = [];\n//         const oracle = await bank.methods.oracle().call();\n//         const proxyOracle = (new kit.web3.eth.Contract(\n//           PROXYORACLE_ABI.abi as AbiItem[],\n//           oracle,\n//         ) as unknown) as ProxyOracle;\n//         for (let i: number = 0; i < pool.tokens.length; i += 1) {\n//           const bankInfo =  await bank.methods.getBankInfo(pool?.tokens[i]!.address).call();\n//           const factor = await proxyOracle.methods.tokenFactors(pool?.tokens[i]!.address).call();\n//           factors.push(factor);\n//           const cToken = (new kit.web3.eth.Contract(\n//             CERC20_ABI as AbiItem[],\n//             bankInfo.cToken,\n//           ) as unknown) as CErc20Immutable;\n//           const totalSupply = await cToken.methods.totalSupply().call();\n//           const totalBorrows = await cToken.methods.totalBorrows().call();\n//           const totalReserves = await cToken.methods.totalReserves().call();\n//           const interestRateModel = await cToken.methods.interestRateModel().call();\n//           const jumpRate = (new kit.web3.eth.Contract(\n//             JUMPRATE_ABI as AbiItem[],\n//             interestRateModel,\n//           ) as unknown) as JumpRateModelV2;\n//           const borrowRate = await jumpRate.methods.getBorrowRate(totalSupply, totalBorrows, totalReserves).call();\n//           borrows.push(toBN(borrowRate));\n//         }\n//         return {\n//           borrowRate: borrows,\n//           tokenFactor: factors,\n//         };\n//     } catch (error) {\n//         console.log(error)\n//     }\n    \n// }, [bank, pool.tokens, kit])\n\n//   const [info] = useAsyncState(null, call);\n\n//   const lever = (factor: {borrowFactor: string, collateralFactor: string}) => {\n//     return 1 + (Number(factor.collateralFactor) / (Number(factor.borrowFactor) - Number(factor.collateralFactor)))\n//   }\n\n//   const maxLever = info ? Math.max(...(info?.tokenFactor.map((x) => lever({borrowFactor: x.borrowFactor, collateralFactor: x.collateralFactor})))!) : 0;\n\n\n//   const { tokens } = poolInfo;\n\n  const closeButton = (\n    <Button\n      onClick={async () => {\n        const kit = await getConnectedKit();\n        // kit is connected to a wallet\n        try {\n          setConfirmLoading(true);\n          const bank = (new kit.web3.eth.Contract(\n            BANK_ABI.abi as AbiItem[],\n            getAddress(Bank[network.chainId])\n            ) as unknown) as HomoraBank;\n          const spell = (new kit.web3.eth.Contract(\n            UNI_SPELL.abi as AbiItem[],\n            getAddress(info.pool.spell),\n          ) as unknown) as UniswapV2SpellV1;\n          const bytes = spell.methods.removeLiquidityWERC20(\n            info.pool.tokens[0]!.address, \n            info.pool.tokens[1]!.address, \n            [\n              MaxUint256.toString(),\n              0, \n              MaxUint256.toString(), \n              MaxUint256.toString(), \n              0, \n              0, \n              0\n            ],\n          ).encodeABI()\n          const tx = await bank.methods\n            .execute(\n                0,\n                info.pool.spell,\n                bytes,\n            ).send({\n              from: kit.defaultAccount,\n              gasPrice: DEFAULT_GAS_PRICE,\n              gas: 10000000,\n            });\n          toastTx(tx.transactionHash);\n        } catch (e) {\n          toast(e.message);\n        } finally {\n          setConfirmLoading(false);\n        }\n      }}\n    >\n      Close\n    </Button>\n  );\n\n  return (\n    <Row>\n      <td>\n      <FarmInfo props={info.pool} />\n      </td>\n      <td>A lot</td>\n      <td>A lot</td>\n      <td>High</td>\n      <td>High</td>\n      <td\n        css={css`\n          text-align: right;\n        `}\n      >\n        <Flex sx={{justifyContent: \"center\", alignItems: \"center\", flexDirection: \"column\", gap: \"6px\"}}>\n          <Flex sx={{justifyContent: \"center\", alighnItems: \"center\", gap: \"6px\"}}>\n            <Button onClick={() => {\n              setPosFarm({\n                ...posFarm, \n                positionId: info.positionId,\n                collateralSize: info.collateralSize, \n              })\n              setPosPage(posPage.Add); \n            }}>\n              Add\n            </Button>\n            <Button onClick={() => {\n              setPosFarm({\n                ...posFarm, \n                positionId: info.positionId,\n                collateralSize: info.collateralSize, \n              })\n              setPosPage(posPage.Remove);\n            }}>\n              Remove\n            </Button>\n          </Flex>\n          <Flex sx={{justifyContent: \"center\", alighnItems: \"center\", gap: \"6px\"}}>\n            {closeButton}\n            <Button disabled={info.pool.wrapper === null}>\n              Harvest\n            </Button>\n          </Flex>\n        </Flex>\n        \n      </td>\n    </Row>\n  );\n};\n\nconst Row = styled.tr`\n  height: 72px;\n`;"]},"metadata":{},"sourceType":"module"}