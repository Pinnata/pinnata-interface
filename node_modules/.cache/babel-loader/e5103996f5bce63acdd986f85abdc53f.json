{"ast":null,"code":"import { EventEmitter } from \"events\";\nimport { generateChildLogger } from \"@pedrouid/pino-utils\";\nimport { ISession } from \"@walletconnect/types\";\nimport { validateSessionProposeParams, validateSessionRespondParams, isValidationInvalid, ERROR } from \"@walletconnect/utils\";\nimport { Subscription } from \"./subscription\";\nimport { JsonRpcHistory } from \"./history\";\nimport { SESSION_CONTEXT, SESSION_EVENTS, SESSION_JSONRPC, SESSION_STATUS, SESSION_SIGNAL_METHOD_PAIRING, SESSION_DEFAULT_TTL } from \"../constants\";\nimport { Engine } from \"./engine\";\nexport class Session extends ISession {\n  constructor(client, logger) {\n    super(client, logger);\n    this.client = client;\n    this.logger = logger;\n    this.events = new EventEmitter();\n    this.context = SESSION_CONTEXT;\n    this.config = {\n      status: SESSION_STATUS,\n      events: SESSION_EVENTS,\n      jsonrpc: SESSION_JSONRPC\n    };\n    this.logger = generateChildLogger(logger, this.context);\n    this.pending = new Subscription(client, this.logger, this.config.status.pending);\n    this.settled = new Subscription(client, this.logger, this.config.status.settled);\n    this.history = new JsonRpcHistory(client, this.logger);\n    this.engine = new Engine(this);\n  }\n\n  async init() {\n    this.logger.trace(`Initialized`);\n    await this.pending.init();\n    await this.settled.init();\n    await this.history.init();\n  }\n\n  get(topic) {\n    return this.settled.get(topic);\n  }\n\n  ping(topic, timeout) {\n    return this.engine.ping(topic, timeout);\n  }\n\n  send(topic, payload, chainId) {\n    return this.engine.send(topic, payload, chainId);\n  }\n\n  get length() {\n    return this.settled.length;\n  }\n\n  get topics() {\n    return this.settled.topics;\n  }\n\n  get values() {\n    return this.settled.values.map(x => x.data);\n  }\n\n  create(params) {\n    return this.engine.create(params);\n  }\n\n  respond(params) {\n    return this.engine.respond(params);\n  }\n\n  upgrade(params) {\n    return this.engine.upgrade(params);\n  }\n\n  update(params) {\n    return this.engine.update(params);\n  }\n\n  request(params) {\n    return this.engine.request(params);\n  }\n\n  delete(params) {\n    return this.engine.delete(params);\n  }\n\n  notify(params) {\n    return this.engine.notify(params);\n  }\n\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n\n  async mergeUpdate(topic, update) {\n    var _a;\n\n    const settled = await this.settled.get(topic);\n    const state = {\n      accounts: ((_a = update.state) === null || _a === void 0 ? void 0 : _a.accounts) || settled.state.accounts\n    };\n    return state;\n  }\n\n  async mergeUpgrade(topic, upgrade) {\n    var _a, _b, _c, _d, _e;\n\n    const settled = await this.settled.get(topic);\n    const permissions = {\n      jsonrpc: {\n        methods: [...settled.permissions.jsonrpc.methods, ...(((_a = upgrade.permissions.jsonrpc) === null || _a === void 0 ? void 0 : _a.methods) || [])]\n      },\n      notifications: {\n        types: [...((_b = settled.permissions.notifications) === null || _b === void 0 ? void 0 : _b.types), ...(((_c = upgrade.permissions.notifications) === null || _c === void 0 ? void 0 : _c.types) || [])]\n      },\n      blockchain: {\n        chains: [...((_d = settled.permissions.blockchain) === null || _d === void 0 ? void 0 : _d.chains), ...(((_e = upgrade.permissions.blockchain) === null || _e === void 0 ? void 0 : _e.chains) || [])]\n      },\n      controller: settled.permissions.controller\n    };\n    return permissions;\n  }\n\n  async validateRespond(params) {\n    if (typeof params === \"undefined\") {\n      const error = ERROR.MISSING_OR_INVALID.format({\n        name: \"respond params\"\n      });\n      this.logger.error(error.message);\n      throw new Error(error.message);\n    }\n\n    const paramsValidation = validateSessionRespondParams(params);\n\n    if (isValidationInvalid(paramsValidation)) {\n      this.logger.error(paramsValidation.error.message);\n      throw new Error(paramsValidation.error.message);\n    }\n  }\n\n  async validateRequest(params) {\n    if (typeof params === \"undefined\") {\n      const error = ERROR.MISSING_OR_INVALID.format({\n        name: \"request params\"\n      });\n      this.logger.error(error.message);\n      throw new Error(error.message);\n    }\n\n    const {\n      topic,\n      chainId\n    } = params;\n    const settled = await this.settled.get(topic);\n\n    if (chainId && !settled.permissions.blockchain.chains.includes(chainId)) {\n      const error = ERROR.UNAUTHORIZED_TARGET_CHAIN.format({\n        chainId\n      });\n      this.logger.error(error.message);\n      throw new Error(error.message);\n    }\n  }\n\n  async validatePropose(params) {\n    if (typeof params === \"undefined\") {\n      const error = ERROR.MISSING_OR_INVALID.format({\n        name: \"propose params\"\n      });\n      this.logger.error(error.message);\n      throw new Error(error.message);\n    }\n\n    const paramsValidation = validateSessionProposeParams(params);\n\n    if (isValidationInvalid(paramsValidation)) {\n      this.logger.error(paramsValidation.error.message);\n      throw new Error(paramsValidation.error.message);\n    }\n\n    if (params.signal.method !== SESSION_SIGNAL_METHOD_PAIRING) {\n      const error = ERROR.UNSUPPORTED_SIGNAL.format({\n        context: this.context\n      });\n      this.logger.error(error.message);\n      throw new Error(error.message);\n    }\n  }\n\n  async getDefaultSignal(params) {\n    const pairing = await this.client.pairing.settled.get(params.topic);\n    const signal = {\n      method: SESSION_SIGNAL_METHOD_PAIRING,\n      params: {\n        topic: pairing.topic\n      }\n    };\n    return signal;\n  }\n\n  async getDefaultTTL() {\n    return SESSION_DEFAULT_TTL;\n  }\n\n  async getDefaultPermissions() {\n    return {\n      jsonrpc: {\n        methods: []\n      },\n      notifications: {\n        types: []\n      },\n      blockchain: {\n        chains: []\n      }\n    };\n  }\n\n}","map":{"version":3,"sources":["../../../src/controllers/session.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { EventEmitter } from \"events\";\nimport { generateChildLogger } from \"@pedrouid/pino-utils\";\nimport { ISession } from \"@walletconnect/types\";\nimport { validateSessionProposeParams, validateSessionRespondParams, isValidationInvalid, ERROR, } from \"@walletconnect/utils\";\nimport { Subscription } from \"./subscription\";\nimport { JsonRpcHistory } from \"./history\";\nimport { SESSION_CONTEXT, SESSION_EVENTS, SESSION_JSONRPC, SESSION_STATUS, SESSION_SIGNAL_METHOD_PAIRING, SESSION_DEFAULT_TTL, } from \"../constants\";\nimport { Engine } from \"./engine\";\nexport class Session extends ISession {\n    constructor(client, logger) {\n        super(client, logger);\n        this.client = client;\n        this.logger = logger;\n        this.events = new EventEmitter();\n        this.context = SESSION_CONTEXT;\n        this.config = {\n            status: SESSION_STATUS,\n            events: SESSION_EVENTS,\n            jsonrpc: SESSION_JSONRPC,\n        };\n        this.logger = generateChildLogger(logger, this.context);\n        this.pending = new Subscription(client, this.logger, this.config.status.pending);\n        this.settled = new Subscription(client, this.logger, this.config.status.settled);\n        this.history = new JsonRpcHistory(client, this.logger);\n        this.engine = new Engine(this);\n    }\n    async init() {\n        this.logger.trace(`Initialized`);\n        await this.pending.init();\n        await this.settled.init();\n        await this.history.init();\n    }\n    get(topic) {\n        return this.settled.get(topic);\n    }\n    ping(topic, timeout) {\n        return this.engine.ping(topic, timeout);\n    }\n    send(topic, payload, chainId) {\n        return this.engine.send(topic, payload, chainId);\n    }\n    get length() {\n        return this.settled.length;\n    }\n    get topics() {\n        return this.settled.topics;\n    }\n    get values() {\n        return this.settled.values.map(x => x.data);\n    }\n    create(params) {\n        return this.engine.create(params);\n    }\n    respond(params) {\n        return this.engine.respond(params);\n    }\n    upgrade(params) {\n        return this.engine.upgrade(params);\n    }\n    update(params) {\n        return this.engine.update(params);\n    }\n    request(params) {\n        return this.engine.request(params);\n    }\n    delete(params) {\n        return this.engine.delete(params);\n    }\n    notify(params) {\n        return this.engine.notify(params);\n    }\n    on(event, listener) {\n        this.events.on(event, listener);\n    }\n    once(event, listener) {\n        this.events.once(event, listener);\n    }\n    off(event, listener) {\n        this.events.off(event, listener);\n    }\n    removeListener(event, listener) {\n        this.events.removeListener(event, listener);\n    }\n    async mergeUpdate(topic, update) {\n        var _a;\n        const settled = await this.settled.get(topic);\n        const state = {\n            accounts: ((_a = update.state) === null || _a === void 0 ? void 0 : _a.accounts) || settled.state.accounts,\n        };\n        return state;\n    }\n    async mergeUpgrade(topic, upgrade) {\n        var _a, _b, _c, _d, _e;\n        const settled = await this.settled.get(topic);\n        const permissions = {\n            jsonrpc: {\n                methods: [\n                    ...settled.permissions.jsonrpc.methods,\n                    ...(((_a = upgrade.permissions.jsonrpc) === null || _a === void 0 ? void 0 : _a.methods) || []),\n                ],\n            },\n            notifications: {\n                types: [\n                    ...(_b = settled.permissions.notifications) === null || _b === void 0 ? void 0 : _b.types,\n                    ...(((_c = upgrade.permissions.notifications) === null || _c === void 0 ? void 0 : _c.types) || []),\n                ],\n            },\n            blockchain: {\n                chains: [\n                    ...(_d = settled.permissions.blockchain) === null || _d === void 0 ? void 0 : _d.chains,\n                    ...(((_e = upgrade.permissions.blockchain) === null || _e === void 0 ? void 0 : _e.chains) || []),\n                ],\n            },\n            controller: settled.permissions.controller,\n        };\n        return permissions;\n    }\n    async validateRespond(params) {\n        if (typeof params === \"undefined\") {\n            const error = ERROR.MISSING_OR_INVALID.format({ name: \"respond params\" });\n            this.logger.error(error.message);\n            throw new Error(error.message);\n        }\n        const paramsValidation = validateSessionRespondParams(params);\n        if (isValidationInvalid(paramsValidation)) {\n            this.logger.error(paramsValidation.error.message);\n            throw new Error(paramsValidation.error.message);\n        }\n    }\n    async validateRequest(params) {\n        if (typeof params === \"undefined\") {\n            const error = ERROR.MISSING_OR_INVALID.format({ name: \"request params\" });\n            this.logger.error(error.message);\n            throw new Error(error.message);\n        }\n        const { topic, chainId } = params;\n        const settled = await this.settled.get(topic);\n        if (chainId && !settled.permissions.blockchain.chains.includes(chainId)) {\n            const error = ERROR.UNAUTHORIZED_TARGET_CHAIN.format({ chainId });\n            this.logger.error(error.message);\n            throw new Error(error.message);\n        }\n    }\n    async validatePropose(params) {\n        if (typeof params === \"undefined\") {\n            const error = ERROR.MISSING_OR_INVALID.format({ name: \"propose params\" });\n            this.logger.error(error.message);\n            throw new Error(error.message);\n        }\n        const paramsValidation = validateSessionProposeParams(params);\n        if (isValidationInvalid(paramsValidation)) {\n            this.logger.error(paramsValidation.error.message);\n            throw new Error(paramsValidation.error.message);\n        }\n        if (params.signal.method !== SESSION_SIGNAL_METHOD_PAIRING) {\n            const error = ERROR.UNSUPPORTED_SIGNAL.format({ context: this.context });\n            this.logger.error(error.message);\n            throw new Error(error.message);\n        }\n    }\n    async getDefaultSignal(params) {\n        const pairing = await this.client.pairing.settled.get(params.topic);\n        const signal = {\n            method: SESSION_SIGNAL_METHOD_PAIRING,\n            params: { topic: pairing.topic },\n        };\n        return signal;\n    }\n    async getDefaultTTL() {\n        return SESSION_DEFAULT_TTL;\n    }\n    async getDefaultPermissions() {\n        return {\n            jsonrpc: {\n                methods: [],\n            },\n            notifications: {\n                types: [],\n            },\n            blockchain: {\n                chains: [],\n            },\n        };\n    }\n}\n//# sourceMappingURL=session.js.map"]},"metadata":{},"sourceType":"module"}