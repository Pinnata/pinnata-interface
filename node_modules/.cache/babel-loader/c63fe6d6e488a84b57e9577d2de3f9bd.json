{"ast":null,"code":"// import React from \"react\";\n// import {\n//   Button,\n//   Card,\n//   Flex,\n//   Heading,\n//   Text,\n//   Spinner,\n// } from \"theme-ui\";\n// import { COLLATERAL_TOKENS, DEFAULT_GAS_PRICE, safeBoxMap } from \"src/config\";\n// import { BatteryMedium, CaretLeft } from \"phosphor-react\";\n// import { useContractKit } from \"@celo-tools/use-contractkit\";\n// import { useERC } from \"src/hooks/useERC\";\n// import { useERCmulti } from \"src/hooks/useERCmulti\";\n// import { TokenInputForm } from \"src/components/TokenInputForm\";\n// import {  RecoilRoot,  atom,  selector,  useSetRecoilState, useRecoilState, useRecoilValue } from 'recoil';\n// import { BlockText } from \"src/components/BlockText\";\n// import { Token } from \"src/utils/token\";\n// import { lpToken, Bank } from \"src/config\";\n// import { TokenAmountInfo } from \"src/components/TokenAmountInfo\";\n// import { fromWei, toWei, toBN, AbiItem } from \"web3-utils\";\n// import { toastTx } from \"src/utils/toastTx\";\n// import { toast } from \"react-toastify\";\n// import BANK_ABI from \"src/abis/dahlia_contracts/HomoraBank.json\";\n// import UNI_SPELL from \"src/abis/dahlia_contracts/UniswapV2SpellV1.json\";\n// import { HomoraBank } from \"src/generated/HomoraBank\";\n// import { UniswapV2SpellV1 } from \"src/generated/UniswapV2SpellV1\";\n// import { getAddress } from \"ethers/lib/utils\";\n// import { MaxUint256 } from \"@ethersproject/constants\";\n// import ERC20_ABI from \"src/abis/fountain_of_youth/ERC20.json\";\n// import { ERC20 } from \"src/generated/ERC20\";\n// import { humanFriendlyNumber } from \"src/utils/number\";\n// import { addFarmState, addPageState, addPage } from \"src/pages/Position/Add/add\";\n// import { poolState } from \"src/pages/Farm/newFarm/NewFarm\";\n// export const Confirm: React.FC = () => {\n//   const { getConnectedKit, network } = useContractKit();\n//   const [approveLoading, setApproveLoading] = React.useState(false);\n//   const [confirmLoading, setConfirmLoading] = React.useState(false);\n//   const [buttonLoading, setButtonLoading] = React.useState(true); \n//   const [pool] = useRecoilState(poolState);\n//   const setPage = useSetRecoilState(addPageState)\n//   const [farm] = useRecoilState(addFarmState);\n//   const scale = toBN(2).pow(toBN(112)); \n//   const lpTok: Token = new Token({\n//     ...lpToken,\n//     address: pool.lp,\n//   });\n//   const [tokenStates, refetchTokenStates] = useERCmulti(pool.tokens)\n//   const [erc, refetchERC] = useERC(lpTok.address, Bank[network.chainId]);\n//   const approveButton = (token: Token): any => {\n//     return (\n//     <Button\n//       onClick={async () => {\n//         const kit = await getConnectedKit();\n//         // kit is connected to a wallet\n//         try {\n//           setApproveLoading(true);\n//           const ERCToken = (new kit.web3.eth.Contract(\n//             ERC20_ABI as AbiItem[],\n//             token.address!,\n//           ) as unknown) as ERC20; \n//           const tx = await ERCToken.methods\n//             .approve(Bank[network.chainId], MaxUint256.toString())\n//             .send({\n//               from: kit.defaultAccount,\n//               gasPrice: DEFAULT_GAS_PRICE,\n//             });\n//           toastTx(tx.transactionHash);\n//           refetchERC();\n//           refetchTokenStates();\n//         } catch (e) {\n//           toast(e.message);\n//         } finally {\n//           setApproveLoading(false);\n//         }\n//       }}\n//     >\n//       {\"Approve \".concat(token.symbol)}\n//     </Button>\n//   )};\n//   const confirmButton = (\n//     <Button\n//       onClick={async () => {\n//         const kit = await getConnectedKit();\n//         // kit is connected to a wallet\n//         try {\n//           setConfirmLoading(true);\n//           const bank = (new kit.web3.eth.Contract(\n//             BANK_ABI.abi as AbiItem[],\n//             getAddress(Bank[network.chainId])\n//             ) as unknown) as HomoraBank;\n//           const spell = (new kit.web3.eth.Contract(\n//             UNI_SPELL.abi as AbiItem[],\n//             getAddress(pool.spell),\n//           ) as unknown) as UniswapV2SpellV1;\n//           const bytes = spell.methods.addLiquidityWERC20(\n//             pool.tokens[0]!.address, \n//             pool.tokens[1]!.address, \n//             [\n//               farm.tokenSupply![0]!.toString(),\n//               farm.tokenSupply![0]!.toString(), \n//               farm.lpSupply!.toString(), \n//               farm.tokenBorrow![0]!.toString(), \n//               farm.tokenBorrow![1]!.toString(), \n//               0, \n//               0, \n//               0\n//             ],\n//           ).encodeABI()\n//           const tx = await bank.methods\n//             .execute(\n//                 farm.positionId!,\n//                 pool.spell,\n//                 bytes,\n//             ).send({\n//               from: kit.defaultAccount,\n//               gasPrice: DEFAULT_GAS_PRICE,\n//               gas: 10000000,\n//             });\n//           toastTx(tx.transactionHash);\n//           refetchERC();\n//         } catch (e) {\n//           toast(e.message);\n//         } finally {\n//           setConfirmLoading(false);\n//         }\n//       }}\n//     >\n//       Confirm\n//     </Button>\n//   );\n//   const loading = approveLoading || confirmLoading || buttonLoading;\n//   const button = React.useMemo(() => {\n//     let b: any[] = []\n//     if (tokenStates) {\n//       for (let i = 0; i < tokenStates.length; i += 1) {\n//         if (tokenStates[i] ){\n//           const amountBN = farm.tokenSupply![i]!\n//           if (amountBN.gt(tokenStates[i]?.allowance!)) {\n//             b.push(approveButton(pool.tokens![i]!));\n//             if (buttonLoading) setButtonLoading(false);\n//           }\n//         }\n//       }\n//       if (b.length === 0) {\n//         // eslint-disable-next-line react-hooks/exhaustive-deps\n//         b = [confirmButton]; \n//         if (buttonLoading) setButtonLoading(false);\n//       }\n//     }\n//     if (erc) {\n//       const amountBN = farm.lpSupply!;\n//       if (amountBN.gt(erc.allowance)) {\n//         b.push(approveButton(lpTok))\n//       }\n//       if (buttonLoading) setButtonLoading(false)\n//     }\n//     return b; \n//   }, [tokenStates, farm.tokenSupply, pool.tokens, erc, farm.lpSupply])\n//   if (!farm!) return null;\n//   if (!farm.tokenBorrow! || !farm.tokenSupply! || !farm.existingBalance! || !farm.debtRatio! || !farm.lever! || !farm.supplyValue! || !farm.borrowValue!) return null;\n//   return (\n//     <Flex sx={{ alignItems: \"center\", flexDirection: \"column\" }}>\n//       <Card sx={{ width: \"100%\", maxWidth: \"800px\" }} py={4} px={3}>\n//         <Flex\n//           onClick={() => {\n//             setPage(addPage.Borrow);\n//           }}\n//           sx={{ alignItems: \"center\", cursor: \"pointer\" }}\n//           mb={4}\n//         >\n//           <CaretLeft size={28} />\n//           <Text>Back</Text>\n//         </Flex>\n//         <Flex mb={4}>\n//           <Heading as=\"h2\" mr={2}>\n//             Position Breakdown\n//           </Heading>\n//         </Flex>\n//         <Flex sx={{flexDirection: \"column\", gap: \"25px\", mb: 10}}>\n//           <BlockText variant=\"primary\">My position has</BlockText>\n//           <Flex sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\"}}>\n//             {farm.existingBalance && pool.tokens.map((tok, index) => \n//             <Flex\n//             sx={{\n//               alignItems: \"center\",\n//               mr: 4,\n//               padding:2,\n//               borderStyle: \"solid\",\n//               borderRadius: \"10px\",\n//             }}\n//           >\n//               <TokenAmountInfo key={tok.address} token={tok} amount={fromWei(farm.existingBalance![index]!)} />       \n//             </Flex>\n//           )}\n//           </Flex>\n//         </Flex>\n//         <Flex sx={{flexDirection: \"column\", gap: \"25px\", mb: 10}}>\n//           <BlockText variant=\"primary\">I'm Supplying</BlockText>\n//           <Flex sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\"}}>\n//             {farm.tokenSupply && pool.tokens.map((tok, index) => \n//             <Flex\n//             sx={{\n//               alignItems: \"center\",\n//               mr: 4,\n//               padding:2,\n//               borderStyle: \"solid\",\n//               borderRadius: \"10px\",\n//             }}\n//           >\n//               <TokenAmountInfo key={tok.address} token={tok} amount={fromWei(farm.tokenSupply![index]!)} />       \n//             </Flex>\n//           )}\n//             <Flex\n//             sx={{\n//               alignItems: \"center\",\n//               mr: 4,\n//               padding:2,\n//               borderStyle: \"solid\",\n//               borderRadius: \"10px\",\n//             }}\n//             >\n//               {farm.lpSupply && <TokenAmountInfo key={lpTok.address} token={lpTok} amount={fromWei(farm.lpSupply!)} /> }     \n//             </Flex>\n//           </Flex>\n//         </Flex>\n//         <Flex sx={{flexDirection: \"column\", gap: \"25px\", mb: 10}}>\n//           <BlockText variant=\"primary\">I'm Borrowing</BlockText>\n//           <Flex sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\"}}>\n//             {farm.tokenBorrow && pool.tokens.map((tok, index) => \n//             <Flex\n//             sx={{\n//               alignItems: \"center\",\n//               mr: 4,\n//               padding:2,\n//               borderStyle: \"solid\",\n//               borderRadius: \"10px\",\n//             }}\n//           >\n//               <TokenAmountInfo key={tok.address} token={tok} amount={fromWei(farm.tokenBorrow![index]!)} />       \n//             </Flex>\n//           )}\n//           </Flex>\n//         </Flex>\n//         <Flex sx={{flexDirection: \"column\", gap: \"25px\", mb: 10}}>\n//           <BlockText variant=\"primary\">Position Statistics</BlockText>\n//           <Flex sx={{ justifyContent: \"left\", gap: \"8px\", flexDirection: \"column\"}}>\n//             <BlockText>{\"Est. Debt Ratio: \".concat(humanFriendlyNumber(farm.debtRatio!)).concat(\"/100\")}</BlockText>\n//               <BlockText>{\"Leverage: \".concat(humanFriendlyNumber(farm.lever!)).concat(\"X\")}</BlockText>\n//               {/* change this to usd value */}\n//               <BlockText>{\"Supply Value: \".concat(\" \").concat(humanFriendlyNumber(farm.supplyValue!))}</BlockText>\n//               <BlockText>{\"Borrow Value: \".concat(\" \").concat(humanFriendlyNumber(farm.borrowValue!))}</BlockText>\n//               <BlockText>{\"Position Value: \".concat(\" \").concat(humanFriendlyNumber(farm.supplyValue! + farm.borrowValue!))}</BlockText>\n//               <BlockText>Farming APY: </BlockText>\n//               <BlockText>Trading Fee APY: </BlockText>\n//               <BlockText>Borrow APY: </BlockText>\n//               <BlockText>Total APY: </BlockText>\n//               <BlockText>Slippage Tolerance: </BlockText>\n//               <BlockText>Price Impact: </BlockText>\n//           </Flex>\n//         </Flex>\n//         <Flex sx={{ justifyContent: \"center\", mt: 6 }}>\n//             {loading ? (\n//               <Spinner />\n//             ) : (\n//               <Flex sx={{ justifyContent: \"center\", gap: \"6px\"}} >\n//                 {button[0]}\n//               </Flex>                \n//             )}\n//         </Flex>\n//       </Card>\n//     </Flex>\n//   );\n// };\nexport {};","map":{"version":3,"sources":["/Users/kylescott/src/nomspace-interface/src/pages/Position/Add/confirm.tsx"],"names":[],"mappingssourcesContent":["// import React from \"react\";\n// import {\n//   Button,\n//   Card,\n//   Flex,\n//   Heading,\n//   Text,\n//   Spinner,\n// } from \"theme-ui\";\n// import { COLLATERAL_TOKENS, DEFAULT_GAS_PRICE, safeBoxMap } from \"src/config\";\n// import { BatteryMedium, CaretLeft } from \"phosphor-react\";\n// import { useContractKit } from \"@celo-tools/use-contractkit\";\n// import { useERC } from \"src/hooks/useERC\";\n// import { useERCmulti } from \"src/hooks/useERCmulti\";\n// import { TokenInputForm } from \"src/components/TokenInputForm\";\n// import {  RecoilRoot,  atom,  selector,  useSetRecoilState, useRecoilState, useRecoilValue } from 'recoil';\n// import { BlockText } from \"src/components/BlockText\";\n// import { Token } from \"src/utils/token\";\n// import { lpToken, Bank } from \"src/config\";\n// import { TokenAmountInfo } from \"src/components/TokenAmountInfo\";\n// import { fromWei, toWei, toBN, AbiItem } from \"web3-utils\";\n// import { toastTx } from \"src/utils/toastTx\";\n// import { toast } from \"react-toastify\";\n// import BANK_ABI from \"src/abis/dahlia_contracts/HomoraBank.json\";\n// import UNI_SPELL from \"src/abis/dahlia_contracts/UniswapV2SpellV1.json\";\n// import { HomoraBank } from \"src/generated/HomoraBank\";\n// import { UniswapV2SpellV1 } from \"src/generated/UniswapV2SpellV1\";\n// import { getAddress } from \"ethers/lib/utils\";\n// import { MaxUint256 } from \"@ethersproject/constants\";\n// import ERC20_ABI from \"src/abis/fountain_of_youth/ERC20.json\";\n// import { ERC20 } from \"src/generated/ERC20\";\n// import { humanFriendlyNumber } from \"src/utils/number\";\n// import { addFarmState, addPageState, addPage } from \"src/pages/Position/Add/add\";\n// import { poolState } from \"src/pages/Farm/newFarm/NewFarm\";\n\n\n// export const Confirm: React.FC = () => {\n//   const { getConnectedKit, network } = useContractKit();\n//   const [approveLoading, setApproveLoading] = React.useState(false);\n//   const [confirmLoading, setConfirmLoading] = React.useState(false);\n//   const [buttonLoading, setButtonLoading] = React.useState(true); \n//   const [pool] = useRecoilState(poolState);\n//   const setPage = useSetRecoilState(addPageState)\n//   const [farm] = useRecoilState(addFarmState);\n//   const scale = toBN(2).pow(toBN(112)); \n\n//   const lpTok: Token = new Token({\n//     ...lpToken,\n//     address: pool.lp,\n//   });\n  \n//   const [tokenStates, refetchTokenStates] = useERCmulti(pool.tokens)\n//   const [erc, refetchERC] = useERC(lpTok.address, Bank[network.chainId]);\n\n//   const approveButton = (token: Token): any => {\n//     return (\n//     <Button\n//       onClick={async () => {\n//         const kit = await getConnectedKit();\n//         // kit is connected to a wallet\n//         try {\n//           setApproveLoading(true);\n//           const ERCToken = (new kit.web3.eth.Contract(\n//             ERC20_ABI as AbiItem[],\n//             token.address!,\n//           ) as unknown) as ERC20; \n//           const tx = await ERCToken.methods\n//             .approve(Bank[network.chainId], MaxUint256.toString())\n//             .send({\n//               from: kit.defaultAccount,\n//               gasPrice: DEFAULT_GAS_PRICE,\n//             });\n//           toastTx(tx.transactionHash);\n//           refetchERC();\n//           refetchTokenStates();\n//         } catch (e) {\n//           toast(e.message);\n//         } finally {\n//           setApproveLoading(false);\n//         }\n//       }}\n//     >\n//       {\"Approve \".concat(token.symbol)}\n//     </Button>\n//   )};\n\n//   const confirmButton = (\n//     <Button\n//       onClick={async () => {\n//         const kit = await getConnectedKit();\n//         // kit is connected to a wallet\n//         try {\n//           setConfirmLoading(true);\n//           const bank = (new kit.web3.eth.Contract(\n//             BANK_ABI.abi as AbiItem[],\n//             getAddress(Bank[network.chainId])\n//             ) as unknown) as HomoraBank;\n//           const spell = (new kit.web3.eth.Contract(\n//             UNI_SPELL.abi as AbiItem[],\n//             getAddress(pool.spell),\n//           ) as unknown) as UniswapV2SpellV1;\n//           const bytes = spell.methods.addLiquidityWERC20(\n//             pool.tokens[0]!.address, \n//             pool.tokens[1]!.address, \n//             [\n//               farm.tokenSupply![0]!.toString(),\n//               farm.tokenSupply![0]!.toString(), \n//               farm.lpSupply!.toString(), \n//               farm.tokenBorrow![0]!.toString(), \n//               farm.tokenBorrow![1]!.toString(), \n//               0, \n//               0, \n//               0\n//             ],\n//           ).encodeABI()\n//           const tx = await bank.methods\n//             .execute(\n//                 farm.positionId!,\n//                 pool.spell,\n//                 bytes,\n//             ).send({\n//               from: kit.defaultAccount,\n//               gasPrice: DEFAULT_GAS_PRICE,\n//               gas: 10000000,\n//             });\n//           toastTx(tx.transactionHash);\n//           refetchERC();\n//         } catch (e) {\n//           toast(e.message);\n//         } finally {\n//           setConfirmLoading(false);\n//         }\n//       }}\n//     >\n//       Confirm\n//     </Button>\n//   );\n  \n//   const loading = approveLoading || confirmLoading || buttonLoading;\n//   const button = React.useMemo(() => {\n//     let b: any[] = []\n//     if (tokenStates) {\n//       for (let i = 0; i < tokenStates.length; i += 1) {\n//         if (tokenStates[i] ){\n//           const amountBN = farm.tokenSupply![i]!\n//           if (amountBN.gt(tokenStates[i]?.allowance!)) {\n//             b.push(approveButton(pool.tokens![i]!));\n//             if (buttonLoading) setButtonLoading(false);\n//           }\n//         }\n//       }\n//       if (b.length === 0) {\n//         // eslint-disable-next-line react-hooks/exhaustive-deps\n//         b = [confirmButton]; \n//         if (buttonLoading) setButtonLoading(false);\n//       }\n//     }\n//     if (erc) {\n//       const amountBN = farm.lpSupply!;\n//       if (amountBN.gt(erc.allowance)) {\n//         b.push(approveButton(lpTok))\n//       }\n//       if (buttonLoading) setButtonLoading(false)\n//     }\n//     return b; \n//   }, [tokenStates, farm.tokenSupply, pool.tokens, erc, farm.lpSupply])\n\n//   if (!farm!) return null;\n//   if (!farm.tokenBorrow! || !farm.tokenSupply! || !farm.existingBalance! || !farm.debtRatio! || !farm.lever! || !farm.supplyValue! || !farm.borrowValue!) return null;\n\n//   return (\n//     <Flex sx={{ alignItems: \"center\", flexDirection: \"column\" }}>\n//       <Card sx={{ width: \"100%\", maxWidth: \"800px\" }} py={4} px={3}>\n//         <Flex\n//           onClick={() => {\n//             setPage(addPage.Borrow);\n//           }}\n//           sx={{ alignItems: \"center\", cursor: \"pointer\" }}\n//           mb={4}\n//         >\n//           <CaretLeft size={28} />\n//           <Text>Back</Text>\n//         </Flex>\n//         <Flex mb={4}>\n//           <Heading as=\"h2\" mr={2}>\n//             Position Breakdown\n//           </Heading>\n//         </Flex>\n//         <Flex sx={{flexDirection: \"column\", gap: \"25px\", mb: 10}}>\n//           <BlockText variant=\"primary\">My position has</BlockText>\n//           <Flex sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\"}}>\n//             {farm.existingBalance && pool.tokens.map((tok, index) => \n//             <Flex\n//             sx={{\n//               alignItems: \"center\",\n//               mr: 4,\n//               padding:2,\n//               borderStyle: \"solid\",\n//               borderRadius: \"10px\",\n//             }}\n//           >\n//               <TokenAmountInfo key={tok.address} token={tok} amount={fromWei(farm.existingBalance![index]!)} />       \n//             </Flex>\n//           )}\n//           </Flex>\n//         </Flex>\n//         <Flex sx={{flexDirection: \"column\", gap: \"25px\", mb: 10}}>\n//           <BlockText variant=\"primary\">I'm Supplying</BlockText>\n//           <Flex sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\"}}>\n//             {farm.tokenSupply && pool.tokens.map((tok, index) => \n//             <Flex\n//             sx={{\n//               alignItems: \"center\",\n//               mr: 4,\n//               padding:2,\n//               borderStyle: \"solid\",\n//               borderRadius: \"10px\",\n//             }}\n//           >\n//               <TokenAmountInfo key={tok.address} token={tok} amount={fromWei(farm.tokenSupply![index]!)} />       \n//             </Flex>\n//           )}\n//             <Flex\n//             sx={{\n//               alignItems: \"center\",\n//               mr: 4,\n//               padding:2,\n//               borderStyle: \"solid\",\n//               borderRadius: \"10px\",\n//             }}\n//             >\n//               {farm.lpSupply && <TokenAmountInfo key={lpTok.address} token={lpTok} amount={fromWei(farm.lpSupply!)} /> }     \n//             </Flex>\n//           </Flex>\n//         </Flex>\n//         <Flex sx={{flexDirection: \"column\", gap: \"25px\", mb: 10}}>\n//           <BlockText variant=\"primary\">I'm Borrowing</BlockText>\n//           <Flex sx={{ justifyContent: \"left\", gap: \"8px\", alignItems: \"center\"}}>\n//             {farm.tokenBorrow && pool.tokens.map((tok, index) => \n//             <Flex\n//             sx={{\n//               alignItems: \"center\",\n//               mr: 4,\n//               padding:2,\n//               borderStyle: \"solid\",\n//               borderRadius: \"10px\",\n//             }}\n//           >\n//               <TokenAmountInfo key={tok.address} token={tok} amount={fromWei(farm.tokenBorrow![index]!)} />       \n//             </Flex>\n//           )}\n//           </Flex>\n//         </Flex>\n//         <Flex sx={{flexDirection: \"column\", gap: \"25px\", mb: 10}}>\n//           <BlockText variant=\"primary\">Position Statistics</BlockText>\n//           <Flex sx={{ justifyContent: \"left\", gap: \"8px\", flexDirection: \"column\"}}>\n//             <BlockText>{\"Est. Debt Ratio: \".concat(humanFriendlyNumber(farm.debtRatio!)).concat(\"/100\")}</BlockText>\n//               <BlockText>{\"Leverage: \".concat(humanFriendlyNumber(farm.lever!)).concat(\"X\")}</BlockText>\n//               {/* change this to usd value */}\n//               <BlockText>{\"Supply Value: \".concat(\" \").concat(humanFriendlyNumber(farm.supplyValue!))}</BlockText>\n//               <BlockText>{\"Borrow Value: \".concat(\" \").concat(humanFriendlyNumber(farm.borrowValue!))}</BlockText>\n//               <BlockText>{\"Position Value: \".concat(\" \").concat(humanFriendlyNumber(farm.supplyValue! + farm.borrowValue!))}</BlockText>\n//               <BlockText>Farming APY: </BlockText>\n//               <BlockText>Trading Fee APY: </BlockText>\n//               <BlockText>Borrow APY: </BlockText>\n//               <BlockText>Total APY: </BlockText>\n//               <BlockText>Slippage Tolerance: </BlockText>\n//               <BlockText>Price Impact: </BlockText>\n//           </Flex>\n//         </Flex>\n//         <Flex sx={{ justifyContent: \"center\", mt: 6 }}>\n//             {loading ? (\n//               <Spinner />\n//             ) : (\n//               <Flex sx={{ justifyContent: \"center\", gap: \"6px\"}} >\n//                 {button[0]}\n//               </Flex>                \n//             )}\n//         </Flex>\n//       </Card>\n//     </Flex>\n//   );\n// };\nexport {}"]},"metadata":{},"sourceType":"module"}