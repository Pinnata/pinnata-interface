{"ast":null,"code":"import { jsx } from '@theme-ui/core';\nimport { css, get } from '@theme-ui/css';\nimport { useEffect, createElement } from 'react';\nimport styled from '@emotion/styled';\nimport { useMDXComponents, MDXProvider as MDXProvider$1 } from '@mdx-js/react'; // mdx components\n\nconst tags = ['p', 'b', 'i', 'a', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'img', 'pre', 'code', 'ol', 'ul', 'li', 'blockquote', 'hr', 'em', 'table', 'tr', 'th', 'td', 'em', 'strong', 'del', // mdx\n'inlineCode', 'thematicBreak', // other\n'div', // theme-ui\n'root'];\nconst aliases = {\n  inlineCode: 'code',\n  thematicBreak: 'hr',\n  root: 'div'\n};\n\nconst isAlias = x => x in aliases;\n\nconst alias = n => isAlias(n) ? aliases[n] : n;\n\nconst propOverrides = {\n  th: {\n    align: 'textAlign'\n  },\n  td: {\n    align: 'textAlign'\n  }\n};\n\nconst themed = key => ({\n  theme,\n  ...rest\n}) => {\n  const propsStyle = propOverrides[key];\n  const extraStyles = propsStyle ? Object.keys(rest).filter(prop => propsStyle[prop] !== undefined).reduce((acc, prop) => ({ ...acc,\n    [propsStyle[prop]]: rest[prop]\n  }), {}) : undefined;\n  return css({ ...get(theme, `styles.${key}`),\n    ...extraStyles\n  })(theme);\n}; // opt out of typechecking whenever `as` prop is used\n\n\nconst Themed = styled('div')(themed('div'));\n/**\n * @deprecated since 0.6.0.\n *\n * `Styled` was renamed to `Themed` to avoid confusion with styled components.\n */\n\nconst Styled = styled('div')(themed('div'));\n\nconst warnStyled = tag => props => {\n  useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn('[theme-ui] The Styled component from \"@theme-ui/mdx\" is deprecated and will be removed in a future version. It has been renamed to Themed with the same API.');\n    }\n  }, []);\n  return /*#__PURE__*/createElement(alias(tag), props);\n};\n\nconst components = {};\ntags.forEach(tag => {\n  // fixme?\n  components[tag] = styled(alias(tag))(themed(tag));\n  Themed[tag] = components[tag];\n  Styled[tag] = styled(warnStyled(tag))(themed(tag));\n});\n\nconst createComponents = comps => {\n  const next = { ...components\n  };\n  const componentKeys = Object.keys(comps);\n  componentKeys.forEach(key => {\n    next[key] = styled(comps[key])(themed(key));\n  });\n  return next;\n};\n\nconst MDXProvider = ({\n  components,\n  children\n}) => {\n  const outer = useMDXComponents();\n  return jsx(MDXProvider$1, {\n    components: createComponents({ ...outer,\n      ...components\n    }),\n    children\n  });\n};\n\nexport { MDXProvider, Styled, Themed, components, themed };","map":{"version":3,"sources":["/Users/kylescott/src/dahlia-interface/node_modules/@theme-ui/mdx/dist/theme-ui-mdx.esm.js"],"names":["jsx","css","get","useEffect","createElement","styled","useMDXComponents","MDXProvider","MDXProvider$1","tags","aliases","inlineCode","thematicBreak","root","isAlias","x","alias","n","propOverrides","th","align","td","themed","key","theme","rest","propsStyle","extraStyles","Object","keys","filter","prop","undefined","reduce","acc","Themed","Styled","warnStyled","tag","props","process","env","NODE_ENV","console","warn","components","forEach","createComponents","comps","next","componentKeys","children","outer"],"mappings":"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","sourcesContent":["import { jsx } from '@theme-ui/core';\nimport { css, get } from '@theme-ui/css';\nimport { useEffect, createElement } from 'react';\nimport styled from '@emotion/styled';\nimport { useMDXComponents, MDXProvider as MDXProvider$1 } from '@mdx-js/react';\n\n// mdx components\nconst tags = ['p', 'b', 'i', 'a', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'img', 'pre', 'code', 'ol', 'ul', 'li', 'blockquote', 'hr', 'em', 'table', 'tr', 'th', 'td', 'em', 'strong', 'del', // mdx\n'inlineCode', 'thematicBreak', // other\n'div', // theme-ui\n'root'];\nconst aliases = {\n  inlineCode: 'code',\n  thematicBreak: 'hr',\n  root: 'div'\n};\n\nconst isAlias = x => x in aliases;\n\nconst alias = n => isAlias(n) ? aliases[n] : n;\n\nconst propOverrides = {\n  th: {\n    align: 'textAlign'\n  },\n  td: {\n    align: 'textAlign'\n  }\n};\nconst themed = key => ({\n  theme,\n  ...rest\n}) => {\n  const propsStyle = propOverrides[key];\n  const extraStyles = propsStyle ? Object.keys(rest).filter(prop => propsStyle[prop] !== undefined).reduce((acc, prop) => ({ ...acc,\n    [propsStyle[prop]]: rest[prop]\n  }), {}) : undefined;\n  return css({ ...get(theme, `styles.${key}`),\n    ...extraStyles\n  })(theme);\n}; // opt out of typechecking whenever `as` prop is used\n\nconst Themed = styled('div')(themed('div'));\n/**\n * @deprecated since 0.6.0.\n *\n * `Styled` was renamed to `Themed` to avoid confusion with styled components.\n */\n\nconst Styled = styled('div')(themed('div'));\n\nconst warnStyled = tag => props => {\n  useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn('[theme-ui] The Styled component from \"@theme-ui/mdx\" is deprecated and will be removed in a future version. It has been renamed to Themed with the same API.');\n    }\n  }, []);\n  return /*#__PURE__*/createElement(alias(tag), props);\n};\n\nconst components = {};\ntags.forEach(tag => {\n  // fixme?\n  components[tag] = styled(alias(tag))(themed(tag));\n  Themed[tag] = components[tag];\n  Styled[tag] = styled(warnStyled(tag))(themed(tag));\n});\n\nconst createComponents = comps => {\n  const next = { ...components\n  };\n  const componentKeys = Object.keys(comps);\n  componentKeys.forEach(key => {\n    next[key] = styled(comps[key])(themed(key));\n  });\n  return next;\n};\n\nconst MDXProvider = ({\n  components,\n  children\n}) => {\n  const outer = useMDXComponents();\n  return jsx(MDXProvider$1, {\n    components: createComponents({ ...outer,\n      ...components\n    }),\n    children\n  });\n};\n\nexport { MDXProvider, Styled, Themed, components, themed };\n"]},"metadata":{},"sourceType":"module"}