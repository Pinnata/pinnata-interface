{"ast":null,"code":"import { DECIMAL_PRECISION } from \"src/config\";\nexport const humanFriendlyNumber = v => {\n  const num = Number(v);\n\n  if (num === 0) {\n    return \"0\";\n  }\n\n  const smallest = Math.pow(10, -DECIMAL_PRECISION);\n\n  if (num < smallest) {\n    return `<${smallest.toFixed(DECIMAL_PRECISION)}`;\n  }\n\n  const formatted = num.toLocaleString(undefined, {\n    minimumFractionDigits: 20\n  });\n  const decimalIdx = formatted.indexOf(\".\");\n\n  if (decimalIdx === -1) {\n    return formatted;\n  }\n\n  return formatted.slice(0, decimalIdx + 1 + DECIMAL_PRECISION);\n};","map":{"version":3,"sources":["/Users/kylescott/src/dahlia-interface/src/utils/number.ts"],"names":["DECIMAL_PRECISION","humanFriendlyNumber","v","num","Number","smallest","Math","pow","toFixed","formatted","toLocaleString","undefined","minimumFractionDigits","decimalIdx","indexOf","slice"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,YAAlC;AAEA,OAAO,MAAMC,mBAAmB,GAAIC,CAAD,IAAwB;AACzD,QAAMC,GAAG,GAAGC,MAAM,CAACF,CAAD,CAAlB;;AACA,MAAIC,GAAG,KAAK,CAAZ,EAAe;AACb,WAAO,GAAP;AACD;;AACD,QAAME,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,CAACP,iBAAd,CAAjB;;AACA,MAAIG,GAAG,GAAGE,QAAV,EAAoB;AAClB,WAAQ,IAAGA,QAAQ,CAACG,OAAT,CAAiBR,iBAAjB,CAAoC,EAA/C;AACD;;AAED,QAAMS,SAAS,GAAGN,GAAG,CAACO,cAAJ,CAAmBC,SAAnB,EAA8B;AAC9CC,IAAAA,qBAAqB,EAAE;AADuB,GAA9B,CAAlB;AAGA,QAAMC,UAAU,GAAGJ,SAAS,CAACK,OAAV,CAAkB,GAAlB,CAAnB;;AACA,MAAID,UAAU,KAAK,CAAC,CAApB,EAAuB;AACrB,WAAOJ,SAAP;AACD;;AACD,SAAOA,SAAS,CAACM,KAAV,CAAgB,CAAhB,EAAmBF,UAAU,GAAG,CAAb,GAAiBb,iBAApC,CAAP;AACD,CAlBM","sourcesContent":["import { DECIMAL_PRECISION } from \"src/config\";\n\nexport const humanFriendlyNumber = (v: number | string) => {\n  const num = Number(v);\n  if (num === 0) {\n    return \"0\";\n  }\n  const smallest = Math.pow(10, -DECIMAL_PRECISION);\n  if (num < smallest) {\n    return `<${smallest.toFixed(DECIMAL_PRECISION)}`;\n  }\n\n  const formatted = num.toLocaleString(undefined, {\n    minimumFractionDigits: 20,\n  });\n  const decimalIdx = formatted.indexOf(\".\");\n  if (decimalIdx === -1) {\n    return formatted;\n  }\n  return formatted.slice(0, decimalIdx + 1 + DECIMAL_PRECISION);\n};"]},"metadata":{},"sourceType":"module"}