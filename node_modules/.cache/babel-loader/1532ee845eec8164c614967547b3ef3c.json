{"ast":null,"code":"import { useThemeUI, jsx, ThemeProvider as ThemeProvider$1 } from '@theme-ui/core';\nimport { css } from '@theme-ui/css';\nimport { ColorModeProvider } from '@theme-ui/color-modes';\nimport { MDXProvider } from '@theme-ui/mdx';\nimport { Global } from '@emotion/react';\n\nconst RootStyles = () => jsx(Global, {\n  styles: emotionTheme => {\n    var _theme$config;\n\n    const theme = emotionTheme;\n    const {\n      useRootStyles\n    } = theme.config || theme;\n\n    if (useRootStyles === false || theme.styles && !theme.styles.root) {\n      return null;\n    }\n\n    const boxSizing = ((_theme$config = theme.config) == null ? void 0 : _theme$config.useBorderBox) === false ? undefined : 'border-box';\n    return css({\n      '*': {\n        boxSizing\n      },\n      html: {\n        variant: 'styles.root'\n      },\n      body: {\n        margin: 0\n      }\n    })(theme);\n  }\n});\n\nconst ThemeProvider = ({\n  theme,\n  components,\n  children\n}) => {\n  const outer = useThemeUI();\n\n  if (typeof outer.setColorMode === 'function') {\n    return jsx(ThemeProvider$1, {\n      theme\n    }, jsx(MDXProvider, {\n      components,\n      children\n    }));\n  }\n\n  return jsx(ThemeProvider$1, {\n    theme\n  }, jsx(ColorModeProvider, null, jsx(RootStyles), jsx(MDXProvider, {\n    components,\n    children\n  })));\n};\n\nexport { ThemeProvider };","map":{"version":3,"sources":["/Users/kylescott/src/nomspace-interface/node_modules/@theme-ui/theme-provider/dist/theme-ui-theme-provider.esm.js"],"names":["useThemeUI","jsx","ThemeProvider","ThemeProvider$1","css","ColorModeProvider","MDXProvider","Global","RootStyles","styles","emotionTheme","_theme$config","theme","useRootStyles","config","root","boxSizing","useBorderBox","undefined","html","variant","body","margin","components","children","outer","setColorMode"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,aAAa,IAAIC,eAA3C,QAAkE,gBAAlE;AACA,SAASC,GAAT,QAAoB,eAApB;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,MAAT,QAAuB,gBAAvB;;AAEA,MAAMC,UAAU,GAAG,MAAMP,GAAG,CAACM,MAAD,EAAS;AACnCE,EAAAA,MAAM,EAAEC,YAAY,IAAI;AACtB,QAAIC,aAAJ;;AAEA,UAAMC,KAAK,GAAGF,YAAd;AACA,UAAM;AACJG,MAAAA;AADI,QAEFD,KAAK,CAACE,MAAN,IAAgBF,KAFpB;;AAIA,QAAIC,aAAa,KAAK,KAAlB,IAA2BD,KAAK,CAACH,MAAN,IAAgB,CAACG,KAAK,CAACH,MAAN,CAAaM,IAA7D,EAAmE;AACjE,aAAO,IAAP;AACD;;AAED,UAAMC,SAAS,GAAG,CAAC,CAACL,aAAa,GAAGC,KAAK,CAACE,MAAvB,KAAkC,IAAlC,GAAyC,KAAK,CAA9C,GAAkDH,aAAa,CAACM,YAAjE,MAAmF,KAAnF,GAA2FC,SAA3F,GAAuG,YAAzH;AACA,WAAOd,GAAG,CAAC;AACT,WAAK;AACHY,QAAAA;AADG,OADI;AAITG,MAAAA,IAAI,EAAE;AACJC,QAAAA,OAAO,EAAE;AADL,OAJG;AAOTC,MAAAA,IAAI,EAAE;AACJC,QAAAA,MAAM,EAAE;AADJ;AAPG,KAAD,CAAH,CAUJV,KAVI,CAAP;AAWD;AAzBkC,CAAT,CAA5B;;AA4BA,MAAMV,aAAa,GAAG,CAAC;AACrBU,EAAAA,KADqB;AAErBW,EAAAA,UAFqB;AAGrBC,EAAAA;AAHqB,CAAD,KAIhB;AACJ,QAAMC,KAAK,GAAGzB,UAAU,EAAxB;;AAEA,MAAI,OAAOyB,KAAK,CAACC,YAAb,KAA8B,UAAlC,EAA8C;AAC5C,WAAOzB,GAAG,CAACE,eAAD,EAAkB;AAC1BS,MAAAA;AAD0B,KAAlB,EAEPX,GAAG,CAACK,WAAD,EAAc;AAClBiB,MAAAA,UADkB;AAElBC,MAAAA;AAFkB,KAAd,CAFI,CAAV;AAMD;;AAED,SAAOvB,GAAG,CAACE,eAAD,EAAkB;AAC1BS,IAAAA;AAD0B,GAAlB,EAEPX,GAAG,CAACI,iBAAD,EAAoB,IAApB,EAA0BJ,GAAG,CAACO,UAAD,CAA7B,EAA2CP,GAAG,CAACK,WAAD,EAAc;AAChEiB,IAAAA,UADgE;AAEhEC,IAAAA;AAFgE,GAAd,CAA9C,CAFI,CAAV;AAMD,CAtBD;;AAwBA,SAAStB,aAAT","sourcesContent":["import { useThemeUI, jsx, ThemeProvider as ThemeProvider$1 } from '@theme-ui/core';\nimport { css } from '@theme-ui/css';\nimport { ColorModeProvider } from '@theme-ui/color-modes';\nimport { MDXProvider } from '@theme-ui/mdx';\nimport { Global } from '@emotion/react';\n\nconst RootStyles = () => jsx(Global, {\n  styles: emotionTheme => {\n    var _theme$config;\n\n    const theme = emotionTheme;\n    const {\n      useRootStyles\n    } = theme.config || theme;\n\n    if (useRootStyles === false || theme.styles && !theme.styles.root) {\n      return null;\n    }\n\n    const boxSizing = ((_theme$config = theme.config) == null ? void 0 : _theme$config.useBorderBox) === false ? undefined : 'border-box';\n    return css({\n      '*': {\n        boxSizing\n      },\n      html: {\n        variant: 'styles.root'\n      },\n      body: {\n        margin: 0\n      }\n    })(theme);\n  }\n});\n\nconst ThemeProvider = ({\n  theme,\n  components,\n  children\n}) => {\n  const outer = useThemeUI();\n\n  if (typeof outer.setColorMode === 'function') {\n    return jsx(ThemeProvider$1, {\n      theme\n    }, jsx(MDXProvider, {\n      components,\n      children\n    }));\n  }\n\n  return jsx(ThemeProvider$1, {\n    theme\n  }, jsx(ColorModeProvider, null, jsx(RootStyles), jsx(MDXProvider, {\n    components,\n    children\n  })));\n};\n\nexport { ThemeProvider };\n"]},"metadata":{},"sourceType":"module"}