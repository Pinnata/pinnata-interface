{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport IERC20_ABI from \"src/abis/dahlia_contracts/IERC20.json\";\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\nimport { isAddress } from \"web3-utils\";\nimport { safeBoxMap } from \"src/config\";\nexport const useERC = tokenAddress => {\n  _s();\n\n  const {\n    kit,\n    address\n  } = useContractKit();\n  const call = React.useCallback(async () => {\n    if (!tokenAddress || !isAddress(tokenAddress)) {\n      return [\"0\", \"0\"];\n    }\n\n    const ERCToken = new kit.web3.eth.Contract(IERC20_ABI.abi, tokenAddress);\n    return await Promise.all([ERCToken.methods.balanceOf(address).call(), ERCToken.methods.allowance(address, safeBoxMap.get(tokenAddress)).call()]);\n  }, [kit, address, tokenAddress]);\n  return useAsyncState([\"0\", \"0\"], call);\n};\n\n_s(useERC, \"65oUwvUZD1z9qgK3qj8TClGRkms=\", false, function () {\n  return [useContractKit, useAsyncState];\n});","map":{"version":3,"sources":["/Users/kylescott/src/nomspace-interface/src/hooks/useERC.ts"],"names":["React","useContractKit","IERC20_ABI","useAsyncState","isAddress","safeBoxMap","useERC","tokenAddress","kit","address","call","useCallback","ERCToken","web3","eth","Contract","abi","Promise","all","methods","balanceOf","allowance","get"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,6BAA/B;AAEA,OAAOC,UAAP,MAAuB,uCAAvB;AACA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,SAAT,QAAyC,YAAzC;AAEA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAO,MAAMC,MAAM,GAAIC,YAAD,IAA0B;AAAA;;AAC9C,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAmBR,cAAc,EAAvC;AACA,QAAMS,IAAI,GAAGV,KAAK,CAACW,WAAN,CAAkB,YAAY;AACzC,QAAI,CAACJ,YAAD,IAAiB,CAACH,SAAS,CAACG,YAAD,CAA/B,EAA+C;AAC7C,aAAO,CAAC,GAAD,EAAM,GAAN,CAAP;AACD;;AACD,UAAMK,QAAQ,GAAG,IAAIJ,GAAG,CAACK,IAAJ,CAASC,GAAT,CAAaC,QAAjB,CACfb,UAAU,CAACc,GADI,EAEfT,YAFe,CAAjB;AAIA,WAAO,MAAMU,OAAO,CAACC,GAAR,CAAY,CACvBN,QAAQ,CAACO,OAAT,CAAiBC,SAAjB,CAA2BX,OAA3B,EAAoCC,IAApC,EADuB,EAEvBE,QAAQ,CAACO,OAAT,CACGE,SADH,CACaZ,OADb,EACsBJ,UAAU,CAACiB,GAAX,CAAef,YAAf,CADtB,EAEGG,IAFH,EAFuB,CAAZ,CAAb;AAMD,GAdY,EAcV,CAACF,GAAD,EAAMC,OAAN,EAAeF,YAAf,CAdU,CAAb;AAeA,SAAOJ,aAAa,CAAC,CAAC,GAAD,EAAM,GAAN,CAAD,EAAaO,IAAb,CAApB;AACD,CAlBM;;GAAMJ,M;UACcL,c,EAgBlBE,a","sourcesContent":["import React from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport ERC20_ABI from \"src/abis/fountain_of_youth/ERC20.json\";\nimport IERC20_ABI from \"src/abis/dahlia_contracts/IERC20.json\"\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\nimport { isAddress, toBN, AbiItem } from \"web3-utils\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { safeBoxMap } from \"src/config\";\n\nexport const useERC = (tokenAddress: string) => {\n  const { kit, address } = useContractKit();\n  const call = React.useCallback(async () => {\n    if (!tokenAddress || !isAddress(tokenAddress)) {\n      return [\"0\", \"0\"];\n    }\n    const ERCToken = new kit.web3.eth.Contract(\n      IERC20_ABI.abi as AbiItem[],\n      tokenAddress\n    );    \n    return await Promise.all([\n      ERCToken.methods.balanceOf(address).call(),\n      ERCToken.methods\n        .allowance(address, safeBoxMap.get(tokenAddress))\n        .call(),\n    ]);\n  }, [kit, address, tokenAddress]);\n  return useAsyncState([\"0\", \"0\"], call);\n};\n"]},"metadata":{},"sourceType":"module"}