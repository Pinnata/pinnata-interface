{"ast":null,"code":"import * as qs from \"query-string\";\nimport { getWindowMetadata } from \"@walletconnect/window-metadata\";\nimport { getDocument, getLocation, getNavigator } from \"@walletconnect/window-getters\";\nexport function isNode() {\n  return typeof process !== \"undefined\" && typeof process.versions !== \"undefined\" && typeof process.versions.node !== \"undefined\";\n}\nexport function isReactNative() {\n  return !getDocument() && !!getNavigator() && navigator.product === \"ReactNative\";\n}\nexport function isBrowser() {\n  return !isNode() && !!getNavigator();\n}\nexport function getEnvironment() {\n  if (isReactNative()) return \"react-native\";\n  if (isNode()) return \"node\";\n  if (isBrowser()) return \"browser\";\n  return \"unknown\";\n}\nexport function appendToQueryString(queryString, newQueryParams) {\n  let queryParams = qs.parse(queryString);\n  queryParams = Object.assign(Object.assign({}, queryParams), newQueryParams);\n  queryString = qs.stringify(queryParams);\n  return queryString;\n}\nexport function getAppMetadata() {\n  return getWindowMetadata() || undefined;\n}\nexport function getRelayClientMetadata(protocol, version) {\n  var _a;\n\n  const env = getEnvironment();\n  const metadata = {\n    protocol,\n    version,\n    env\n  };\n\n  if (env === \"browser\") {\n    metadata.host = ((_a = getLocation()) === null || _a === void 0 ? void 0 : _a.host) || \"\";\n  }\n\n  return metadata;\n}\nexport function formatRelayRpcUrl(protocol, version, url) {\n  const splitUrl = url.split(\"?\");\n  const params = getRelayClientMetadata(protocol, version);\n  const queryString = appendToQueryString(splitUrl[1] || \"\", params);\n  return splitUrl[0] + \"?\" + queryString;\n}\nexport function assertType(obj, key, type) {\n  if (!obj[key] || typeof obj[key] !== type) {\n    throw new Error(`Missing or invalid \"${key}\" param`);\n  }\n}\nexport function hasOverlap(a, b) {\n  const matches = a.filter(x => b.includes(x));\n  return matches.length === a.length;\n}\nexport function mapToObj(map) {\n  return Object.fromEntries(map.entries());\n}\nexport function objToMap(obj) {\n  return new Map(Object.entries(obj));\n}\nexport function mapEntries(obj, cb) {\n  const res = {};\n  Object.keys(obj).forEach(key => {\n    res[key] = cb(obj[key]);\n  });\n  return res;\n}\nexport const enumify = x => x;\nexport function capitalizeWord(word) {\n  return word.trim().replace(/^\\w/, c => c.toUpperCase());\n}\nexport function capitalize(str) {\n  return str.split(\" \").map(w => capitalizeWord(w)).join(\" \");\n}","map":{"version":3,"sources":["../../src/misc.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as qs from \"query-string\";\nimport { getWindowMetadata } from \"@walletconnect/window-metadata\";\nimport { getDocument, getLocation, getNavigator } from \"@walletconnect/window-getters\";\nexport function isNode() {\n    return (typeof process !== \"undefined\" &&\n        typeof process.versions !== \"undefined\" &&\n        typeof process.versions.node !== \"undefined\");\n}\nexport function isReactNative() {\n    return !getDocument() && !!getNavigator() && navigator.product === \"ReactNative\";\n}\nexport function isBrowser() {\n    return !isNode() && !!getNavigator();\n}\nexport function getEnvironment() {\n    if (isReactNative())\n        return \"react-native\";\n    if (isNode())\n        return \"node\";\n    if (isBrowser())\n        return \"browser\";\n    return \"unknown\";\n}\nexport function appendToQueryString(queryString, newQueryParams) {\n    let queryParams = qs.parse(queryString);\n    queryParams = Object.assign(Object.assign({}, queryParams), newQueryParams);\n    queryString = qs.stringify(queryParams);\n    return queryString;\n}\nexport function getAppMetadata() {\n    return getWindowMetadata() || undefined;\n}\nexport function getRelayClientMetadata(protocol, version) {\n    var _a;\n    const env = getEnvironment();\n    const metadata = { protocol, version, env };\n    if (env === \"browser\") {\n        metadata.host = ((_a = getLocation()) === null || _a === void 0 ? void 0 : _a.host) || \"\";\n    }\n    return metadata;\n}\nexport function formatRelayRpcUrl(protocol, version, url) {\n    const splitUrl = url.split(\"?\");\n    const params = getRelayClientMetadata(protocol, version);\n    const queryString = appendToQueryString(splitUrl[1] || \"\", params);\n    return splitUrl[0] + \"?\" + queryString;\n}\nexport function assertType(obj, key, type) {\n    if (!obj[key] || typeof obj[key] !== type) {\n        throw new Error(`Missing or invalid \"${key}\" param`);\n    }\n}\nexport function hasOverlap(a, b) {\n    const matches = a.filter(x => b.includes(x));\n    return matches.length === a.length;\n}\nexport function mapToObj(map) {\n    return Object.fromEntries(map.entries());\n}\nexport function objToMap(obj) {\n    return new Map(Object.entries(obj));\n}\nexport function mapEntries(obj, cb) {\n    const res = {};\n    Object.keys(obj).forEach(key => {\n        res[key] = cb(obj[key]);\n    });\n    return res;\n}\nexport const enumify = (x) => x;\nexport function capitalizeWord(word) {\n    return word.trim().replace(/^\\w/, c => c.toUpperCase());\n}\nexport function capitalize(str) {\n    return str\n        .split(\" \")\n        .map(w => capitalizeWord(w))\n        .join(\" \");\n}\n//# sourceMappingURL=misc.js.map"]},"metadata":{},"sourceType":"module"}