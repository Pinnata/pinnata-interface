{"ast":null,"code":"var _jsxFileName = \"/Users/kylescott/src/nomspace-interface/src/pages/Position/PositionEntry.tsx\",\n    _s = $RefreshSig$();\n\nimport { css } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport BANK_ABI from \"src/abis/dahlia_contracts/HomoraBank.json\";\nimport { Bank, DEFAULT_GAS_PRICE } from \"src/config\";\nimport React from \"react\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { FarmInfo } from \"src/components/FarmInfo\";\nimport { Flex, Button } from \"theme-ui\";\nimport UNI_SPELL from \"src/abis/dahlia_contracts/UniswapV2SpellV1.json\";\nimport { MaxUint256 } from \"@ethersproject/constants\";\nimport { toastTx } from \"src/utils/toastTx\";\nimport { toast } from \"react-toastify\";\nimport { useHistory } from \"react-router\";\nimport { Spinner } from \"theme-ui\"; // export interface farmProps {\n//   tokenSupply: BN[] | null;\n//   lpSupply: BN | null;\n//   tokenBorrow: BN[] | null;\n//   lpBorrow: BN | null;\n//   info : any | null; \n//   positionId: number | null;\n//   collateralSize: string | null; \n//   existingBalance: BN[] | null; \n//   remove: BN[] | null; \n//   payback: BN[] | null; \n// }\n// const emptyFarmState : farmProps = {\n//   tokenSupply: null,\n//   lpSupply: null,\n//   tokenBorrow: null,\n//   lpBorrow: null,\n//   info: null,\n//   positionId: null,\n//   collateralSize: null, \n//   existingBalance: null, \n//   remove: null,\n//   payback: null,\n// }\n// export const posFarmState = atom({\n//   key: 'posFarmState',\n//   default: emptyFarmState\n// })\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PositionEntry = props => {\n  _s();\n\n  const {\n    kit,\n    network,\n    getConnectedKit\n  } = useContractKit();\n  const [confirmLoading, setConfirmLoading] = React.useState(false);\n  const history = useHistory(); //   const bank = React.useMemo(() => (new kit.web3.eth.Contract(\n  //     BANK_ABI.abi as AbiItem[],\n  //     getAddress(Bank[network.chainId])\n  //   ) as unknown) as HomoraBank, [kit, network]); \n  //   const call = React.useCallback(async () => {\n  //     try {\n  //         const borrows = [];\n  //         const factors = [];\n  //         const oracle = await bank.methods.oracle().call();\n  //         const proxyOracle = (new kit.web3.eth.Contract(\n  //           PROXYORACLE_ABI.abi as AbiItem[],\n  //           oracle,\n  //         ) as unknown) as ProxyOracle;\n  //         for (let i: number = 0; i < pool.tokens.length; i += 1) {\n  //           const bankInfo =  await bank.methods.getBankInfo(pool?.tokens[i]!.address).call();\n  //           const factor = await proxyOracle.methods.tokenFactors(pool?.tokens[i]!.address).call();\n  //           factors.push(factor);\n  //           const cToken = (new kit.web3.eth.Contract(\n  //             CERC20_ABI as AbiItem[],\n  //             bankInfo.cToken,\n  //           ) as unknown) as CErc20Immutable;\n  //           const totalSupply = await cToken.methods.totalSupply().call();\n  //           const totalBorrows = await cToken.methods.totalBorrows().call();\n  //           const totalReserves = await cToken.methods.totalReserves().call();\n  //           const interestRateModel = await cToken.methods.interestRateModel().call();\n  //           const jumpRate = (new kit.web3.eth.Contract(\n  //             JUMPRATE_ABI as AbiItem[],\n  //             interestRateModel,\n  //           ) as unknown) as JumpRateModelV2;\n  //           const borrowRate = await jumpRate.methods.getBorrowRate(totalSupply, totalBorrows, totalReserves).call();\n  //           borrows.push(toBN(borrowRate));\n  //         }\n  //         return {\n  //           borrowRate: borrows,\n  //           tokenFactor: factors,\n  //         };\n  //     } catch (error) {\n  //         console.log(error)\n  //     }\n  // }, [bank, pool.tokens, kit])\n  //   const [info] = useAsyncState(null, call);\n  //   const lever = (factor: {borrowFactor: string, collateralFactor: string}) => {\n  //     return 1 + (Number(factor.collateralFactor) / (Number(factor.borrowFactor) - Number(factor.collateralFactor)))\n  //   }\n  //   const maxLever = info ? Math.max(...(info?.tokenFactor.map((x) => lever({borrowFactor: x.borrowFactor, collateralFactor: x.collateralFactor})))!) : 0;\n  //   const { tokens } = poolprops;\n\n  const closeButton = /*#__PURE__*/_jsxDEV(Button, {\n    onClick: async () => {\n      const kit = await getConnectedKit(); // kit is connected to a wallet\n\n      try {\n        setConfirmLoading(true);\n        const bank = new kit.web3.eth.Contract(BANK_ABI.abi, getAddress(Bank[network.chainId]));\n        const spell = new kit.web3.eth.Contract(UNI_SPELL.abi, getAddress(props.pool.spell));\n        const bytes = spell.methods.removeLiquidityWStakingRewards(props.pool.tokens[0].address, props.pool.tokens[1].address, [MaxUint256.toString(), 0, MaxUint256.toString(), MaxUint256.toString(), 0, 0, 0]).encodeABI();\n        const tx = await bank.methods.execute(props.positionId, props.pool.spell, bytes).send({\n          from: kit.defaultAccount,\n          gasPrice: DEFAULT_GAS_PRICE,\n          gas: 10000000\n        });\n        toastTx(tx.transactionHash);\n      } catch (e) {\n        toast(e.message);\n      } finally {\n        setConfirmLoading(false);\n      }\n    },\n    children: \"Close\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n\n  const harvestButton = /*#__PURE__*/_jsxDEV(Button, {\n    onClick: async () => {\n      const kit = await getConnectedKit(); // kit is connected to a wallet\n\n      try {\n        setConfirmLoading(true);\n        const bank = new kit.web3.eth.Contract(BANK_ABI.abi, getAddress(Bank[network.chainId]));\n        const spell = new kit.web3.eth.Contract(UNI_SPELL.abi, getAddress(props.pool.spell));\n        console.log(props.pool.tokens[0].address, props.pool.tokens[1].address, props.positionId);\n        const bytes = spell.methods.removeLiquidityWERC20(props.pool.tokens[0].address, props.pool.tokens[1].address, [MaxUint256.toString(), 0, MaxUint256.toString(), MaxUint256.toString(), 0, 0, 0]).encodeABI();\n        const tx = await bank.methods.execute(props.positionId, props.pool.spell, bytes).send({\n          from: kit.defaultAccount,\n          gasPrice: DEFAULT_GAS_PRICE,\n          gas: 10000000\n        });\n        toastTx(tx.transactionHash);\n      } catch (e) {\n        toast(e.message);\n      } finally {\n        setConfirmLoading(false);\n      }\n    },\n    children: \"Harvest\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 26\n  }, this);\n\n  const urlext = props.positionId + \"/\" + props.collateralSize + \"/\" + props.pool.name + \"/\" + props.pool.wrapper + \"/\" + props.pool.spell + \"/\" + props.pool.lp + \"/\" + props.pool.tokens.map(tok => tok.address);\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: /*#__PURE__*/_jsxDEV(FarmInfo, {\n        props: props.pool\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: \"A lot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: \"A lot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: \"High\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: \"High\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      css: css`\n          text-align: right;\n        `,\n      children: confirmLoading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 30\n      }, this) : /*#__PURE__*/_jsxDEV(Flex, {\n        sx: {\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          flexDirection: \"column\",\n          gap: \"6px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          sx: {\n            justifyContent: \"center\",\n            alighnItems: \"center\",\n            gap: \"6px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              history.push(`positions/add/${urlext}`);\n            },\n            children: \"Add\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              history.push(`positions/remove/${urlext}`);\n            },\n            children: \"Remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          sx: {\n            justifyContent: \"center\",\n            alighnItems: \"center\",\n            gap: \"6px\"\n          },\n          children: [closeButton, harvestButton]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PositionEntry, \"hDvYcCASbJVDhaB5vMQHhjR5lS4=\", false, function () {\n  return [useContractKit, useHistory];\n});\n\n_c = PositionEntry;\nconst Row = styled.tr`\n  height: 72px;\n`;\n_c2 = Row;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PositionEntry\");\n$RefreshReg$(_c2, \"Row\");","map":{"version":3,"sources":["/Users/kylescott/src/nomspace-interface/src/pages/Position/PositionEntry.tsx"],"names":["css","styled","useContractKit","BANK_ABI","Bank","DEFAULT_GAS_PRICE","React","getAddress","FarmInfo","Flex","Button","UNI_SPELL","MaxUint256","toastTx","toast","useHistory","Spinner","PositionEntry","props","kit","network","getConnectedKit","confirmLoading","setConfirmLoading","useState","history","closeButton","bank","web3","eth","Contract","abi","chainId","spell","pool","bytes","methods","removeLiquidityWStakingRewards","tokens","address","toString","encodeABI","tx","execute","positionId","send","from","defaultAccount","gasPrice","gas","transactionHash","e","message","harvestButton","console","log","removeLiquidityWERC20","urlext","collateralSize","name","wrapper","lp","map","tok","justifyContent","alignItems","flexDirection","gap","alighnItems","push","Row","tr"],"mappings":"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","sourcesContent":["import { css } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { TokenInfo } from \"src/components/TokenInfo\";\nimport { Token } from \"src/utils/token\";\nimport { AbiItem, toBN } from \"web3-utils\";\nimport BANK_ABI from \"src/abis/dahlia_contracts/HomoraBank.json\";\nimport CERC20_ABI from \"src/abis/fountain_of_youth/CErc20Immutable.json\";\nimport JUMPRATE_ABI from \"src/abis/fountain_of_youth/JumpRateModelV2.json\"; \nimport PROXYORACLE_ABI from \"src/abis/dahlia_contracts/ProxyOracle.json\";\nimport { HomoraBank } from \"src/generated/HomoraBank\";\nimport { ProxyOracle } from \"src/generated/ProxyOracle\";\nimport { CErc20Immutable } from \"src/generated/CErc20Immutable\";\nimport { JumpRateModelV2 } from \"src/generated/JumpRateModelV2\";\nimport { Bank, DEFAULT_GAS_PRICE} from \"src/config\";\nimport React from \"react\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { humanFriendlyWei } from \"src/utils/eth\";\nimport { PoolIcon } from \"src/components/PoolIcon\";\nimport { FarmInfo } from \"src/components/FarmInfo\";\nimport { Flex, Button } from \"theme-ui\";\nimport { TokenBorrowInfo } from \"src/components/TokenBorrowInfo\";\nimport {  RecoilRoot,  atom,  useRecoilState,  useSetRecoilState } from 'recoil';\nimport { poolProps } from \"src/pages/Farm/newFarm/NewFarm\";\nimport UNI_SPELL from \"src/abis/dahlia_contracts/UniswapV2SpellV1.json\";\nimport { UniswapV2SpellV1 } from \"src/generated/UniswapV2SpellV1\";\nimport { MaxUint256 } from \"@ethersproject/constants\";\nimport { toastTx } from \"src/utils/toastTx\";\nimport { toast } from \"react-toastify\";\nimport { useHistory } from \"react-router\";\nimport { Spinner } from \"theme-ui\"\n\n\n// export interface farmProps {\n//   tokenSupply: BN[] | null;\n//   lpSupply: BN | null;\n//   tokenBorrow: BN[] | null;\n//   lpBorrow: BN | null;\n//   info : any | null; \n//   positionId: number | null;\n//   collateralSize: string | null; \n//   existingBalance: BN[] | null; \n//   remove: BN[] | null; \n//   payback: BN[] | null; \n// }\n\n// const emptyFarmState : farmProps = {\n//   tokenSupply: null,\n//   lpSupply: null,\n//   tokenBorrow: null,\n//   lpBorrow: null,\n//   info: null,\n//   positionId: null,\n//   collateralSize: null, \n//   existingBalance: null, \n//   remove: null,\n//   payback: null,\n// }\n\n// export const posFarmState = atom({\n//   key: 'posFarmState',\n//   default: emptyFarmState\n// })\n\ninterface Props {\n  pool: poolProps,\n  positionId: number,\n  collateralSize: string, \n  collId: string,\n}\n\nexport const PositionEntry: React.FC<Props> = (props: Props) => {\n  const { kit, network, getConnectedKit } = useContractKit();\n  const [confirmLoading, setConfirmLoading] = React.useState(false);\n  const history = useHistory();\n\n//   const bank = React.useMemo(() => (new kit.web3.eth.Contract(\n//     BANK_ABI.abi as AbiItem[],\n//     getAddress(Bank[network.chainId])\n//   ) as unknown) as HomoraBank, [kit, network]); \n\n//   const call = React.useCallback(async () => {\n//     try {\n//         const borrows = [];\n//         const factors = [];\n//         const oracle = await bank.methods.oracle().call();\n//         const proxyOracle = (new kit.web3.eth.Contract(\n//           PROXYORACLE_ABI.abi as AbiItem[],\n//           oracle,\n//         ) as unknown) as ProxyOracle;\n//         for (let i: number = 0; i < pool.tokens.length; i += 1) {\n//           const bankInfo =  await bank.methods.getBankInfo(pool?.tokens[i]!.address).call();\n//           const factor = await proxyOracle.methods.tokenFactors(pool?.tokens[i]!.address).call();\n//           factors.push(factor);\n//           const cToken = (new kit.web3.eth.Contract(\n//             CERC20_ABI as AbiItem[],\n//             bankInfo.cToken,\n//           ) as unknown) as CErc20Immutable;\n//           const totalSupply = await cToken.methods.totalSupply().call();\n//           const totalBorrows = await cToken.methods.totalBorrows().call();\n//           const totalReserves = await cToken.methods.totalReserves().call();\n//           const interestRateModel = await cToken.methods.interestRateModel().call();\n//           const jumpRate = (new kit.web3.eth.Contract(\n//             JUMPRATE_ABI as AbiItem[],\n//             interestRateModel,\n//           ) as unknown) as JumpRateModelV2;\n//           const borrowRate = await jumpRate.methods.getBorrowRate(totalSupply, totalBorrows, totalReserves).call();\n//           borrows.push(toBN(borrowRate));\n//         }\n//         return {\n//           borrowRate: borrows,\n//           tokenFactor: factors,\n//         };\n//     } catch (error) {\n//         console.log(error)\n//     }\n    \n// }, [bank, pool.tokens, kit])\n\n//   const [info] = useAsyncState(null, call);\n\n//   const lever = (factor: {borrowFactor: string, collateralFactor: string}) => {\n//     return 1 + (Number(factor.collateralFactor) / (Number(factor.borrowFactor) - Number(factor.collateralFactor)))\n//   }\n\n//   const maxLever = info ? Math.max(...(info?.tokenFactor.map((x) => lever({borrowFactor: x.borrowFactor, collateralFactor: x.collateralFactor})))!) : 0;\n\n\n//   const { tokens } = poolprops;\n\n  const closeButton = (\n    <Button\n      onClick={async () => {\n        const kit = await getConnectedKit();\n        // kit is connected to a wallet\n        try {\n          setConfirmLoading(true);\n          const bank = (new kit.web3.eth.Contract(\n            BANK_ABI.abi as AbiItem[],\n            getAddress(Bank[network.chainId])\n            ) as unknown) as HomoraBank;\n          const spell = (new kit.web3.eth.Contract(\n            UNI_SPELL.abi as AbiItem[],\n            getAddress(props.pool.spell),\n          ) as unknown) as UniswapV2SpellV1;\n          const bytes = spell.methods.removeLiquidityWStakingRewards(\n            props.pool.tokens[0]!.address, \n            props.pool.tokens[1]!.address, \n            [\n              MaxUint256.toString(),\n              0, \n              MaxUint256.toString(), \n              MaxUint256.toString(), \n              0, \n              0, \n              0\n            ],\n          ).encodeABI()\n          const tx = await bank.methods\n            .execute(\n                props.positionId,\n                props.pool.spell,\n                bytes,\n            ).send({\n              from: kit.defaultAccount,\n              gasPrice: DEFAULT_GAS_PRICE,\n              gas: 10000000,\n            });\n          toastTx(tx.transactionHash);\n        } catch (e) {\n          toast(e.message);\n        } finally {\n          setConfirmLoading(false);\n        }\n      }}\n    >\n      Close\n    </Button>\n  );\n\n  const harvestButton = (<Button\n  onClick={async () => {\n    const kit = await getConnectedKit();\n    // kit is connected to a wallet\n    try {\n      setConfirmLoading(true);\n      const bank = (new kit.web3.eth.Contract(\n        BANK_ABI.abi as AbiItem[],\n        getAddress(Bank[network.chainId])\n        ) as unknown) as HomoraBank;\n      const spell = (new kit.web3.eth.Contract(\n        UNI_SPELL.abi as AbiItem[],\n        getAddress(props.pool.spell),\n      ) as unknown) as UniswapV2SpellV1;\n      console.log(props.pool.tokens[0]!.address, \n        props.pool.tokens[1]!.address, props.positionId);\n      const bytes = spell.methods.removeLiquidityWERC20(\n        props.pool.tokens[0]!.address, \n        props.pool.tokens[1]!.address, \n        [\n          MaxUint256.toString(),\n          0, \n          MaxUint256.toString(), \n          MaxUint256.toString(), \n          0, \n          0, \n          0\n        ],\n      ).encodeABI()\n      const tx = await bank.methods\n        .execute(\n            props.positionId,\n            props.pool.spell,\n            bytes,\n        ).send({\n          from: kit.defaultAccount,\n          gasPrice: DEFAULT_GAS_PRICE,\n          gas: 10000000,\n        });\n      toastTx(tx.transactionHash);\n    } catch (e) {\n      toast(e.message);\n    } finally {\n      setConfirmLoading(false);\n    }\n  }}\n>\n  Harvest\n</Button>\n);\n\n  const urlext = props.positionId + \"/\" + props.collateralSize + \"/\" + props.pool.name + \"/\" + props.pool.wrapper + \"/\" + props.pool.spell + \"/\" + props.pool.lp + \"/\"\n    + props.pool.tokens.map((tok) => tok.address)\n\n  return (\n    <Row>\n      <td>\n      <FarmInfo props={props.pool} />\n      </td>\n      <td>A lot</td>\n      <td>A lot</td>\n      <td>High</td>\n      <td>High</td>\n      <td\n        css={css`\n          text-align: right;\n        `}\n      >\n          { confirmLoading ? <Spinner /> : (\n        <Flex sx={{justifyContent: \"center\", alignItems: \"center\", flexDirection: \"column\", gap: \"6px\"}}>\n\n          <Flex sx={{justifyContent: \"center\", alighnItems: \"center\", gap: \"6px\"}}>\n            <Button onClick={() => {\n             history.push(`positions/add/${urlext}`)}\n            }>\n              Add\n            </Button>\n            <Button onClick={() => {\n             history.push(`positions/remove/${urlext}`)}\n            }>\n              Remove\n            </Button>\n          </Flex>\n          <Flex sx={{justifyContent: \"center\", alighnItems: \"center\", gap: \"6px\"}}>\n            {closeButton}\n            {harvestButton}\n          </Flex>\n          </Flex>\n          )}\n        \n      </td>\n    </Row>\n  );\n};\n\nconst Row = styled.tr`\n  height: 72px;\n`;"]},"metadata":{},"sourceType":"module"}