{"ast":null,"code":"var _jsxFileName = \"/Users/kylescott/src/nomspace-interface/src/pages/Farm/newFarm/NewFarm.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { atom, useSetRecoilState, useRecoilState } from 'recoil';\nimport { getToken } from \"src/utils/token\";\nimport { useParams } from \"react-router-dom\";\nimport { Supply } from \"src/pages/Farm/newFarm/supply\";\nimport { Borrow } from \"src/pages/Farm/newFarm/borrow\";\nimport { Confirm } from \"src/pages/Farm/newFarm/confirm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport let farmPage;\n\n(function (farmPage) {\n  farmPage[farmPage[\"Supply\"] = 0] = \"Supply\";\n  farmPage[farmPage[\"Borrow\"] = 1] = \"Borrow\";\n  farmPage[farmPage[\"Confirm\"] = 2] = \"Confirm\";\n})(farmPage || (farmPage = {}));\n\nexport const pageState = atom({\n  key: 'pageState',\n  default: farmPage.Supply\n});\nconst emptyPoolState = {\n  name: \"\",\n  wrapper: \"\",\n  spell: \"\",\n  lp: \"\",\n  tokens: []\n};\nexport const poolState = atom({\n  key: 'poolState',\n  default: emptyPoolState\n});\nexport const NewFarm = () => {\n  _s();\n\n  const {\n    name,\n    wrapper,\n    spell,\n    lp,\n    tokens\n  } = useParams();\n  const setPool = useSetRecoilState(poolState);\n  const set = {\n    name: name,\n    wrapper: wrapper,\n    spell: spell,\n    lp: lp,\n    tokens: tokens.split(',').map(x => getToken(x))\n  };\n  setPool(set);\n  const [page] = useRecoilState(pageState);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: page === farmPage.Supply ? /*#__PURE__*/_jsxDEV(Supply, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this) : page === farmPage.Borrow ? /*#__PURE__*/_jsxDEV(Borrow, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(Confirm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewFarm, \"OMfUZWyTNZyK4Z3ZwDKVQ8qe2Kc=\", false, function () {\n  return [useParams, useSetRecoilState, useRecoilState];\n});\n\n_c = NewFarm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewFarm\");","map":{"version":3,"sources":["/Users/kylescott/src/nomspace-interface/src/pages/Farm/newFarm/NewFarm.tsx"],"names":["React","atom","useSetRecoilState","useRecoilState","getToken","useParams","Supply","Borrow","Confirm","farmPage","pageState","key","default","emptyPoolState","name","wrapper","spell","lp","tokens","poolState","NewFarm","setPool","set","split","map","x","page"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,iBAAf,EAAkCC,cAAlC,QAAwD,QAAxD;AACA,SAASC,QAAT,QAAgC,iBAAhC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,MAAT,QAAuB,+BAAvB;AACA,SAASC,MAAT,QAAuB,+BAAvB;AACA,SAASC,OAAT,QAAwB,gCAAxB;;AAEA,WAAYC,QAAZ;;WAAYA,Q;AAAAA,EAAAA,Q,CAAAA,Q;AAAAA,EAAAA,Q,CAAAA,Q;AAAAA,EAAAA,Q,CAAAA,Q;GAAAA,Q,KAAAA,Q;;AAMZ,OAAO,MAAMC,SAAS,GAAGT,IAAI,CAAC;AAC5BU,EAAAA,GAAG,EAAE,WADuB;AAE5BC,EAAAA,OAAO,EAAEH,QAAQ,CAACH;AAFU,CAAD,CAAtB;AAaP,MAAMO,cAA0B,GAAG;AAC/BC,EAAAA,IAAI,EAAE,EADyB;AAE/BC,EAAAA,OAAO,EAAE,EAFsB;AAG/BC,EAAAA,KAAK,EAAE,EAHwB;AAI/BC,EAAAA,EAAE,EAAE,EAJ2B;AAK/BC,EAAAA,MAAM,EAAE;AALuB,CAAnC;AAQA,OAAO,MAAMC,SAAS,GAAGlB,IAAI,CAAC;AAC5BU,EAAAA,GAAG,EAAE,WADuB;AAE5BC,EAAAA,OAAO,EAAEC;AAFmB,CAAD,CAAtB;AAKP,OAAO,MAAMO,OAAiB,GAAG,MAAM;AAAA;;AACrC,QAAM;AAAEN,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA,EAAxB;AAA4BC,IAAAA;AAA5B,MAAuCb,SAAS,EAAtD;AACA,QAAMgB,OAAO,GAAGnB,iBAAiB,CAACiB,SAAD,CAAjC;AACA,QAAMG,GAAc,GAAI;AACpBR,IAAAA,IAAI,EAAEA,IADc;AAEpBC,IAAAA,OAAO,EAAEA,OAFW;AAGpBC,IAAAA,KAAK,EAAEA,KAHa;AAIpBC,IAAAA,EAAE,EAAEA,EAJgB;AAKpBC,IAAAA,MAAM,EAAGA,MAAM,CAACK,KAAP,CAAa,GAAb,EAAkBC,GAAlB,CAAuBC,CAAD,IAAOrB,QAAQ,CAACqB,CAAD,CAArC;AALW,GAAxB;AAOAJ,EAAAA,OAAO,CAACC,GAAD,CAAP;AAEA,QAAM,CAACI,IAAD,IAASvB,cAAc,CAACO,SAAD,CAA7B;AAEA,sBACE;AAAA,cAEIgB,IAAI,KAAKjB,QAAQ,CAACH,MAAlB,gBACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADJ,GAGIoB,IAAI,KAAKjB,QAAQ,CAACF,MAAlB,gBACA,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADA,gBAGA,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AARR;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CA5BM;;GAAMa,O;UACkCf,S,EAC7BH,iB,EAUDC,c;;;KAZJiB,O","sourcesContent":["import React from \"react\";\nimport { atom, useSetRecoilState, useRecoilState } from 'recoil';\nimport { getToken, Token } from \"src/utils/token\";\nimport { useParams } from \"react-router-dom\";\nimport { Supply } from \"src/pages/Farm/newFarm/supply\";\nimport { Borrow } from \"src/pages/Farm/newFarm/borrow\";\nimport { Confirm } from \"src/pages/Farm/newFarm/confirm\";\n\nexport enum farmPage {\n  Supply, \n  Borrow, \n  Confirm,\n}\n\nexport const pageState = atom({\n  key: 'pageState',\n  default: farmPage.Supply\n})\n\nexport interface poolProps {\n    name: string;\n    wrapper: string;\n    spell: string;\n    lp: string;\n    tokens: Token[];\n}\n\nconst emptyPoolState : poolProps = {\n    name: \"\",\n    wrapper: \"\",\n    spell: \"\",\n    lp: \"\",\n    tokens: [],\n}\n\nexport const poolState = atom({\n  key: 'poolState',\n  default: emptyPoolState\n})\n\nexport const NewFarm: React.FC = () => {\n  const { name, wrapper, spell, lp, tokens } = useParams<{ name: string, wrapper: string, spell: string, lp:string, tokens:string}>();\n  const setPool = useSetRecoilState(poolState); \n  const set: poolProps  = {\n      name: name,\n      wrapper: wrapper,\n      spell: spell,\n      lp: lp,\n      tokens: (tokens.split(',').map((x) => getToken(x)!)),\n  }\n  setPool(set);  \n\n  const [page] = useRecoilState(pageState);\n\n  return (\n    <div>\n      {\n        page === farmPage.Supply ? (\n            <Supply />\n          ) : (\n            page === farmPage.Borrow ? (\n            <Borrow />\n          ) : (\n            <Confirm />\n          ))}\n    </div>\n    \n  );\n};"]},"metadata":{},"sourceType":"module"}