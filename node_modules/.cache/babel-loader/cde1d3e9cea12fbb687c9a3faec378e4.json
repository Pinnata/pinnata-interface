{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport ERC20_ABI from \"src/abis/fountain_of_youth/ERC20.json\";\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\nimport { isAddress } from \"web3-utils\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { safeBoxMap } from \"src/config\";\nexport const useERC = tokenAddress => {\n  _s();\n\n  const {\n    kit,\n    address\n  } = useContractKit();\n  const call = React.useCallback(async () => {\n    if (!tokenAddress || !isAddress(tokenAddress)) {\n      return [\"0\", \"0\"];\n    }\n\n    const ERCToken = new kit.web3.eth.Contract(ERC20_ABI, getAddress(tokenAddress));\n    return await Promise.all([ERCToken.methods.balanceOf(address).call(), ERCToken.methods.allowance(address, safeBoxMap.get(tokenAddress)).call()]);\n  }, [kit, address, tokenAddress]);\n  return useAsyncState(null, call);\n};\n\n_s(useERC, \"65oUwvUZD1z9qgK3qj8TClGRkms=\", false, function () {\n  return [useContractKit, useAsyncState];\n});","map":{"version":3,"sources":["/Users/kylescott/src/nomspace-interface/src/hooks/useERC.ts"],"names":["React","useContractKit","ERC20_ABI","useAsyncState","isAddress","getAddress","safeBoxMap","useERC","tokenAddress","kit","address","call","useCallback","ERCToken","web3","eth","Contract","Promise","all","methods","balanceOf","allowance","get"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,OAAOC,SAAP,MAAsB,uCAAtB;AAEA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,SAAT,QAAyC,YAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAO,MAAMC,MAAM,GAAIC,YAAD,IAA0B;AAAA;;AAC9C,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAmBT,cAAc,EAAvC;AACA,QAAMU,IAAI,GAAGX,KAAK,CAACY,WAAN,CAAkB,YAAY;AACzC,QAAI,CAACJ,YAAD,IAAiB,CAACJ,SAAS,CAACI,YAAD,CAA/B,EAA+C;AAC7C,aAAO,CAAC,GAAD,EAAM,GAAN,CAAP;AACD;;AACD,UAAMK,QAAQ,GAAG,IAAIJ,GAAG,CAACK,IAAJ,CAASC,GAAT,CAAaC,QAAjB,CACfd,SADe,EAEfG,UAAU,CAACG,YAAD,CAFK,CAAjB;AAIA,WAAO,MAAMS,OAAO,CAACC,GAAR,CAAY,CACvBL,QAAQ,CAACM,OAAT,CAAiBC,SAAjB,CAA2BV,OAA3B,EAAoCC,IAApC,EADuB,EAEvBE,QAAQ,CAACM,OAAT,CACGE,SADH,CACaX,OADb,EACsBJ,UAAU,CAACgB,GAAX,CAAed,YAAf,CADtB,EAEGG,IAFH,EAFuB,CAAZ,CAAb;AAMD,GAdY,EAcV,CAACF,GAAD,EAAMC,OAAN,EAAeF,YAAf,CAdU,CAAb;AAeA,SAAOL,aAAa,CAAC,IAAD,EAAOQ,IAAP,CAApB;AACD,CAlBM;;GAAMJ,M;UACcN,c,EAgBlBE,a","sourcesContent":["import React from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport ERC20_ABI from \"src/abis/fountain_of_youth/ERC20.json\";\nimport IERC20_ABI from \"src/abis/dahlia_contracts/IERC20.json\"\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\nimport { isAddress, toBN, AbiItem } from \"web3-utils\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { safeBoxMap } from \"src/config\";\n\nexport const useERC = (tokenAddress: string) => {\n  const { kit, address } = useContractKit();\n  const call = React.useCallback(async () => {\n    if (!tokenAddress || !isAddress(tokenAddress)) {\n      return [\"0\", \"0\"];\n    }\n    const ERCToken = new kit.web3.eth.Contract(\n      ERC20_ABI as AbiItem[],\n      getAddress(tokenAddress)\n    );    \n    return await Promise.all([\n      ERCToken.methods.balanceOf(address).call(),\n      ERCToken.methods\n        .allowance(address, safeBoxMap.get(tokenAddress))\n        .call(),\n    ]);\n  }, [kit, address, tokenAddress]);\n  return useAsyncState(null, call);\n};\n"]},"metadata":{},"sourceType":"module"}