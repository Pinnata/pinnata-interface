{"ast":null,"code":"var _jsxFileName = \"/Users/kylescott/src/nomspace-interface/src/pages/Position/PosTable.tsx\",\n    _s = $RefreshSig$();\n\nimport { css } from \"@emotion/react\";\nimport { FARMS } from \"src/config\";\nimport { SimpleTable } from \"src/components/SimpleTable\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport React from \"react\";\nimport { toBN } from \"web3-utils\";\nimport BANK_ABI from \"src/abis/dahlia_contracts/HomoraBank.json\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { Bank } from \"src/config\";\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PosTable = () => {\n  _s();\n\n  const {\n    kit,\n    address,\n    network\n  } = useContractKit();\n  const bank = React.useMemo(() => new kit.web3.eth.Contract(BANK_ABI.abi, getAddress(Bank[network.chainId])), [kit, network]);\n  const call = React.useCallback(async () => {\n    try {\n      let posInfo = [];\n      const nextPositionId = await bank.methods.nextPositionId().call();\n\n      for (let i = 1; i < Number(nextPositionId); i += 1) {\n        posInfo.push(await bank.methods.getPositionInfo(i).call());\n      }\n\n      return posInfo;\n    } catch (error) {\n      console.log(error);\n    }\n  }, [bank]);\n  const [info] = useAsyncState(null, call);\n\n  if (info) {\n    console.log(info.filter(pos => pos.owner === address).flatMap(pos => FARMS.filter(farm => getAddress(farm.lp) === getAddress(toBN(pos.collId).toString(16)))));\n  }\n\n  return /*#__PURE__*/_jsxDEV(SimpleTable, {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          css: css`\n            text-align: left !important;\n          `,\n          children: \"Pool\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Borrow Value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Total Value\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Debt Ratio \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"APY\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PosTable, \"BFwgJgcq/nYLGU9LOjumjDOZslE=\", false, function () {\n  return [useContractKit, useAsyncState];\n});\n\n_c = PosTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"PosTable\");","map":{"version":3,"sources":["/Users/kylescott/src/nomspace-interface/src/pages/Position/PosTable.tsx"],"names":["css","FARMS","SimpleTable","useContractKit","React","toBN","BANK_ABI","getAddress","Bank","useAsyncState","PosTable","kit","address","network","bank","useMemo","web3","eth","Contract","abi","chainId","call","useCallback","posInfo","nextPositionId","methods","i","Number","push","getPositionInfo","error","console","log","info","filter","pos","owner","flatMap","farm","lp","collId","toString"],"mappings":"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","sourcesContent":["import { css } from \"@emotion/react\";\nimport { FarmPool } from \"src/pages/Farm/FarmPool\";\nimport { FARMS } from \"src/config\";\nimport {\n  Spinner,\n} from \"theme-ui\";\nimport { SimpleTable } from \"src/components/SimpleTable\"\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport React from \"react\";\nimport { AbiItem, toBN } from \"web3-utils\";\nimport { HomoraBank } from \"src/generated/HomoraBank\";\nimport BANK_ABI from \"src/abis/dahlia_contracts/HomoraBank.json\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { Bank } from \"src/config\";\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\n\n\nexport const PosTable: React.FC = () => {\n\n  const { kit, address, network } = useContractKit();\n\n  const bank = React.useMemo(() => (new kit.web3.eth.Contract(\n    BANK_ABI.abi as AbiItem[],\n    getAddress(Bank[network.chainId])\n  ) as unknown) as HomoraBank, [kit, network]); \n\n  const call = React.useCallback(async () => {\n    try {\n      let posInfo = []\n      const nextPositionId = await bank.methods.nextPositionId().call(); \n      for (let i = 1; i < Number(nextPositionId); i += 1) {\n        posInfo.push(await bank.methods.getPositionInfo(i).call())\n      }\n      return posInfo;  \n    } catch (error) {\n        console.log(error)\n    }  \n}, [bank])\n\n  const [info] = useAsyncState(null, call);\n  if (info) {\n    console.log(info.filter((pos) => pos.owner === address)\n    .flatMap((pos) => FARMS\n    .filter((farm) => getAddress(farm.lp) === \n    getAddress(toBN(pos.collId).toString(16)))))\n  }\n\n  return (\n    <SimpleTable>\n    <thead>\n      <tr>\n        <th\n          css={css`\n            text-align: left !important;\n          `}\n        >\n          Pool\n        </th>\n        <th>Borrow Value</th>\n        <th>Total Value</th>\n        <th>Debt Ratio </th>\n        <th>APY</th>\n        <th />\n      </tr>\n    </thead>\n    <tbody>\n      {/* {info ? \n      info.filter((pos) => pos.owner === address).flatMap((pos) => FARMS.filter((farm) => getAddress(farm.lp) === getAddress(toBN(pos.collId).toString(16)))) : <Spinner />\n    }\n      {/* // FARMS.filter((farm) => ( getAddress(farm.lp) === \n      //   <FarmPool key={farm.name} werc20={farm.werc20} name={farm.name} wstaking={farm.wstaking} spell={farm.spell} tokens={farm.tokens} lp={farm.lp} />\n      // ))} */}\n    </tbody>\n  </SimpleTable>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}