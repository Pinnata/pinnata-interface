{"ast":null,"code":"var _jsxFileName = \"/Users/kylescott/src/nomspace-interface/src/pages/Position/Position.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { toBN } from \"web3-utils\";\nimport BANK_ABI from \"src/abis/dahlia_contracts/HomoraBank.json\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { Bank } from \"src/config\";\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\nimport { FARMS } from \"src/config\";\nimport { Spinner } from \"theme-ui\";\nimport { PositionEntry } from \"src/pages/Position/PositionEntry\";\nimport { Container, Title, Description, Wrapper, Background, CardContainer, InfoContainer, Header } from \"src/components/MainPages\";\nimport Image from 'src/images/background.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Position = () => {\n  _s();\n\n  const {\n    kit,\n    address,\n    network\n  } = useContractKit();\n  const bank = React.useMemo(() => new kit.web3.eth.Contract(BANK_ABI.abi, getAddress(Bank[network.chainId])), [kit, network]);\n  const call = React.useCallback(async () => {\n    try {\n      let posInfo = [];\n      const nextPositionId = await bank.methods.nextPositionId().call();\n\n      for (let i = 1; i < Number(nextPositionId); i += 1) {\n        posInfo.push({ ...(await bank.methods.getPositionInfo(i).call()),\n          positonId: i\n        });\n      }\n\n      return posInfo;\n    } catch (error) {\n      console.log(error);\n    }\n  }, [bank]);\n  const [info] = useAsyncState(null, call);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: \"Positions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Description, {\n        children: \"Manage your positions with ease.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardContainer, {\n      children: /*#__PURE__*/_jsxDEV(InfoContainer, {\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Pool\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"center\",\n            children: \"Borrow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"center\",\n            children: \"Current Value\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"center\",\n            children: \"Debt Ratio\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"center\",\n            children: \"Apy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), info ? info.filter(pos => pos.owner === address).flatMap(pos => {\n          const active = FARMS.filter(farm => getAddress(farm.lp) === getAddress(toBN(pos.collId).toString(16)));\n          return {\n            pos,\n            active\n          };\n        }).map(info => /*#__PURE__*/_jsxDEV(PositionEntry, {\n          collateralSize: info.pos.collateralSize,\n          positionId: info.pos.positonId,\n          pool: info.active[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 14\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Background, {\n      src: Image,\n      alt: \"Background Logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Position, \"BFwgJgcq/nYLGU9LOjumjDOZslE=\", false, function () {\n  return [useContractKit, useAsyncState];\n});\n\n_c = Position;\nexport default Position;\n\nvar _c;\n\n$RefreshReg$(_c, \"Position\");","map":{"version":3,"sources":["/Users/kylescott/src/nomspace-interface/src/pages/Position/Position.tsx"],"names":["React","useContractKit","toBN","BANK_ABI","getAddress","Bank","useAsyncState","FARMS","Spinner","PositionEntry","Container","Title","Description","Wrapper","Background","CardContainer","InfoContainer","Header","Image","Position","kit","address","network","bank","useMemo","web3","eth","Contract","abi","chainId","call","useCallback","posInfo","nextPositionId","methods","i","Number","push","getPositionInfo","positonId","error","console","log","info","filter","pos","owner","flatMap","active","farm","lp","collId","toString","map","collateralSize"],"mappings":"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","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\nimport BackgroundImage from '../../images/background.png';\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport { AbiItem, toBN } from \"web3-utils\";\nimport { HomoraBank } from \"src/generated/HomoraBank\";\nimport BANK_ABI from \"src/abis/dahlia_contracts/HomoraBank.json\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { Bank } from \"src/config\";\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\nimport { FARMS } from \"src/config\";\nimport { Spinner } from \"theme-ui\";\nimport { PositionEntry } from \"src/pages/Position/PositionEntry\"\nimport {\n    Container, \n    Title, \n    Description,\n    Wrapper,\n    Background,\n    CardContainer,\n    InfoContainer,\n    Header,\n  } from \"src/components/MainPages\";\nimport Image from 'src/images/background.png';\n\n\nconst Position = () => {\n\n  const { kit, address, network } = useContractKit();\n\n  const bank = React.useMemo(() => (new kit.web3.eth.Contract(\n    BANK_ABI.abi as AbiItem[],\n    getAddress(Bank[network.chainId])\n  ) as unknown) as HomoraBank, [kit, network]); \n\n  const call = React.useCallback(async () => {\n    try {\n      let posInfo = []\n      const nextPositionId = await bank.methods.nextPositionId().call(); \n      for (let i = 1; i < Number(nextPositionId); i += 1) {\n        posInfo.push({...await bank.methods.getPositionInfo(i).call(), positonId: i})\n      }\n      return posInfo;  \n    } catch (error) {\n        console.log(error)\n    }  \n}, [bank])\n\n  const [info] = useAsyncState(null, call);\n  return (\n    <Wrapper>\n      <Container>\n        <Title>Positions</Title>\n        <Description>Manage your positions with ease.</Description>\n      </Container>\n      <CardContainer>\n        <InfoContainer>\n            <Header>\n                <h2>Pool</h2>\n                <h2 className='center'>Borrow</h2>\n                <h2 className='center'>Current Value</h2>\n                <h2 className='center'>Debt Ratio</h2>\n                <h2 className='center'>Apy</h2>\n                <div></div>\n                </Header>\n                { info ? \n                info.filter((pos) => pos.owner === address)\n                .flatMap((pos) => {\n                const active = FARMS\n                .filter((farm) => getAddress(farm.lp) === \n                getAddress(toBN(pos.collId).toString(16)))\n                return {pos, active}\n            }).map((info) => (\n                <PositionEntry collateralSize={info.pos.collateralSize} positionId={info.pos.positonId} pool={info.active[0]!} />\n            )) : \n            (<Spinner />)\n            }\n        </InfoContainer>\n      </CardContainer>\n      <Background src={Image} alt='Background Logo' />\n    </Wrapper>\n  );\n};\n\nexport default Position;\n"]},"metadata":{},"sourceType":"module"}