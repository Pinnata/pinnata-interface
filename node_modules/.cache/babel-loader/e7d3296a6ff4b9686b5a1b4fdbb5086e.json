{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar _a, _b;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DEFAULT_NETWORKS = exports.getProviderForWallet = exports.WalletTypes = exports.Mainnet = exports.Baklava = exports.Alfajores = exports.NetworkNames = exports.images = exports.PROVIDERS = exports.SupportedProviders = exports.localStorageKeys = void 0;\n\nvar react_1 = __importDefault(require(\"react\"));\n\nvar react_device_detect_1 = require(\"react-device-detect\");\n\nvar types_1 = require(\"./types\");\n\nvar walletIcons_1 = require(\"./walletIcons\");\n\nexports.localStorageKeys = {\n  lastUsedAddress: 'use-contractkit/last-used-address',\n  lastUsedNetwork: 'use-contractkit/last-used-network',\n  lastUsedWalletType: 'use-contractkit/last-used-wallet',\n  lastUsedWalletArguments: 'use-contractkit/last-used-wallet-arguments'\n};\nvar SupportedProviders;\n\n(function (SupportedProviders) {\n  SupportedProviders[\"CeloExtensionWallet\"] = \"Celo Extension Wallet\";\n  SupportedProviders[\"CeloTerminal\"] = \"Celo Terminal\";\n  SupportedProviders[\"CeloWallet\"] = \"Celo Wallet\";\n  SupportedProviders[\"Injected\"] = \"Injected\";\n  SupportedProviders[\"Ledger\"] = \"Ledger\";\n  SupportedProviders[\"MetaMask\"] = \"MetaMask\";\n  SupportedProviders[\"PrivateKey\"] = \"Private key\";\n  SupportedProviders[\"Valora\"] = \"Valora\";\n  SupportedProviders[\"WalletConnect\"] = \"WalletConnect\";\n})(SupportedProviders = exports.SupportedProviders || (exports.SupportedProviders = {}));\n\nexports.PROVIDERS = (_a = {}, _a[SupportedProviders.Valora] = {\n  name: 'Valora',\n  description: 'Connect to Valora, a mobile payments app that works worldwide',\n  icon: walletIcons_1.VALORA,\n  canConnect: function () {\n    return true;\n  },\n  showInList: function () {\n    return true;\n  },\n  listPriority: function () {\n    return 0;\n  },\n  installURL: 'https://valoraapp.com/'\n}, _a[SupportedProviders.WalletConnect] = {\n  name: 'WalletConnect',\n  description: 'Scan a QR code to connect your wallet',\n  icon: walletIcons_1.WALLETCONNECT,\n  canConnect: function () {\n    return true;\n  },\n  showInList: function () {\n    return true;\n  },\n  listPriority: function () {\n    return 0;\n  }\n}, _a[SupportedProviders.Ledger] = {\n  name: 'Ledger',\n  description: 'Sync with your Ledger hardware wallet',\n  icon: walletIcons_1.LEDGER,\n  canConnect: function () {\n    return true;\n  },\n  showInList: function () {\n    return !react_device_detect_1.isMobile;\n  },\n  listPriority: function () {\n    return 0;\n  }\n}, _a[SupportedProviders.CeloWallet] = {\n  name: 'Celo Wallet',\n  description: 'Connect to Celo Wallet for web or deskop',\n  icon: walletIcons_1.CELO,\n  canConnect: function () {\n    return true;\n  },\n  showInList: function () {\n    return true;\n  },\n  listPriority: function () {\n    return !react_device_detect_1.isMobile ? 0 : 1;\n  }\n}, _a[SupportedProviders.CeloTerminal] = {\n  name: 'Celo Terminal',\n  description: 'Connect to the Celo Terminal desktop app',\n  // TODO get SVG icon\n  icon: 'https://raw.githubusercontent.com/zviadm/celoterminal/main/static/icon.png',\n  canConnect: function () {\n    return true;\n  },\n  showInList: function () {\n    return !react_device_detect_1.isMobile;\n  },\n  listPriority: function () {\n    return 1;\n  }\n}, _a[SupportedProviders.MetaMask] = {\n  name: 'MetaMask',\n  description: react_1.default.createElement(react_1.default.Fragment, null, \"Use the Metamask browser extension. Celo support is limited.\", ' ', react_1.default.createElement(\"a\", {\n    href: \"https://docs.celo.org/getting-started/wallets/using-metamask-with-celo\",\n    target: \"_blank\",\n    onClick: function (e) {\n      e.stopPropagation();\n      e.nativeEvent.stopPropagation();\n    },\n    className: \"tw-underline tw-text-gray-900 dark:tw-text-gray-200 tw-font-medium\",\n    rel: \"noopener noreferrer\"\n  }, \"Learn more\")),\n  icon: walletIcons_1.METAMASK,\n  canConnect: function () {\n    var _a;\n\n    return !!((_a = window.ethereum) === null || _a === void 0 ? void 0 : _a.isMetaMask);\n  },\n  showInList: function () {\n    return !react_device_detect_1.isMobile;\n  },\n  listPriority: function () {\n    return 0;\n  },\n  installURL: 'https://metamask.app.link/'\n}, _a[SupportedProviders.CeloExtensionWallet] = {\n  name: 'Celo Extension Wallet',\n  description: 'Use a wallet from the the Celo chrome extension',\n  icon: walletIcons_1.CHROME_EXTENSION_STORE,\n  canConnect: function () {\n    return !!window.celo;\n  },\n  showInList: function () {\n    return !react_device_detect_1.isMobile;\n  },\n  listPriority: function () {\n    return 1;\n  },\n  installURL: 'https://chrome.google.com/webstore/detail/celoextensionwallet/kkilomkmpmkbdnfelcpgckmpcaemjcdh/related'\n}, _a[SupportedProviders.Injected] = {\n  name: 'Ethereum Web3',\n  description: 'Connect any Ethereum wallet to Celo',\n  icon: walletIcons_1.ETHEREUM,\n  canConnect: function () {\n    return !!window.ethereum;\n  },\n  showInList: function () {\n    return !!window.ethereum && !window.ethereum.isMetaMask;\n  },\n  listPriority: function () {\n    return 1;\n  }\n}, _a[SupportedProviders.PrivateKey] = {\n  name: 'Private Key',\n  description: 'Enter a plaintext private key to load your account (testing only)',\n  icon: walletIcons_1.PRIVATE_KEY,\n  canConnect: function () {\n    return true;\n  },\n  showInList: function () {\n    return process.env.NODE_ENV !== 'production';\n  },\n  listPriority: function () {\n    return 1;\n  }\n}, _a);\nexports.images = (_b = {}, _b[SupportedProviders.Valora] = walletIcons_1.VALORA, _b[SupportedProviders.MetaMask] = walletIcons_1.METAMASK, _b[SupportedProviders.WalletConnect] = walletIcons_1.WALLETCONNECT, _b[SupportedProviders.Ledger] = walletIcons_1.LEDGER, _b[SupportedProviders.CeloWallet] = walletIcons_1.CELO, _b[SupportedProviders.CeloTerminal] = walletIcons_1.CELO, _b[SupportedProviders.CeloExtensionWallet] = walletIcons_1.CHROME_EXTENSION_STORE, _b[SupportedProviders.PrivateKey] = walletIcons_1.PRIVATE_KEY, _b);\nvar NetworkNames;\n\n(function (NetworkNames) {\n  NetworkNames[\"Alfajores\"] = \"Alfajores\";\n  NetworkNames[\"Baklava\"] = \"Baklava\";\n  NetworkNames[\"Mainnet\"] = \"Mainnet\";\n})(NetworkNames = exports.NetworkNames || (exports.NetworkNames = {}));\n\nexports.Alfajores = {\n  name: NetworkNames.Alfajores,\n  rpcUrl: 'https://alfajores-forno.celo-testnet.org',\n  graphQl: 'https://alfajores-blockscout.celo-testnet.org/graphiql',\n  explorer: 'https://alfajores-blockscout.celo-testnet.org',\n  chainId: types_1.ChainId.Alfajores\n};\nexports.Baklava = {\n  name: NetworkNames.Baklava,\n  rpcUrl: 'https://baklava-forno.celo-testnet.org',\n  graphQl: 'https://baklava-blockscout.celo-testnet.org/graphiql',\n  explorer: 'https://baklava-blockscout.celo-testnet.org',\n  chainId: types_1.ChainId.Baklava\n};\nexports.Mainnet = {\n  name: NetworkNames.Mainnet,\n  rpcUrl: 'https://forno.celo.org',\n  graphQl: 'https://explorer.celo.org/graphiql',\n  explorer: 'https://explorer.celo.org',\n  chainId: types_1.ChainId.Mainnet\n};\nvar WalletTypes;\n\n(function (WalletTypes) {\n  WalletTypes[\"Valora\"] = \"Valora\";\n  WalletTypes[\"MetaMask\"] = \"MetaMask\";\n  WalletTypes[\"WalletConnect\"] = \"WalletConnect\";\n  WalletTypes[\"CeloWallet\"] = \"CeloWallet\";\n  WalletTypes[\"CeloTerminal\"] = \"CeloTerminal\";\n  WalletTypes[\"CeloExtensionWallet\"] = \"CeloExtensionWallet\";\n  WalletTypes[\"Ledger\"] = \"Ledger\";\n  WalletTypes[\"Injected\"] = \"Injected\";\n  WalletTypes[\"PrivateKey\"] = \"PrivateKey\";\n  WalletTypes[\"Unauthenticated\"] = \"Unauthenticated\";\n})(WalletTypes = exports.WalletTypes || (exports.WalletTypes = {}));\n/**\n * Gets the provider associated with a wallet type.\n * @param wallet\n * @returns\n */\n\n\nvar getProviderForWallet = function (wallet) {\n  return wallet === WalletTypes.Unauthenticated ? null : SupportedProviders[wallet];\n};\n\nexports.getProviderForWallet = getProviderForWallet;\n/**\n * Default networks to connect to.\n */\n\nexports.DEFAULT_NETWORKS = [exports.Mainnet, exports.Alfajores];","map":{"version":3,"sources":["../src/constants.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _a, _b;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_NETWORKS = exports.getProviderForWallet = exports.WalletTypes = exports.Mainnet = exports.Baklava = exports.Alfajores = exports.NetworkNames = exports.images = exports.PROVIDERS = exports.SupportedProviders = exports.localStorageKeys = void 0;\nvar react_1 = __importDefault(require(\"react\"));\nvar react_device_detect_1 = require(\"react-device-detect\");\nvar types_1 = require(\"./types\");\nvar walletIcons_1 = require(\"./walletIcons\");\nexports.localStorageKeys = {\n    lastUsedAddress: 'use-contractkit/last-used-address',\n    lastUsedNetwork: 'use-contractkit/last-used-network',\n    lastUsedWalletType: 'use-contractkit/last-used-wallet',\n    lastUsedWalletArguments: 'use-contractkit/last-used-wallet-arguments',\n};\nvar SupportedProviders;\n(function (SupportedProviders) {\n    SupportedProviders[\"CeloExtensionWallet\"] = \"Celo Extension Wallet\";\n    SupportedProviders[\"CeloTerminal\"] = \"Celo Terminal\";\n    SupportedProviders[\"CeloWallet\"] = \"Celo Wallet\";\n    SupportedProviders[\"Injected\"] = \"Injected\";\n    SupportedProviders[\"Ledger\"] = \"Ledger\";\n    SupportedProviders[\"MetaMask\"] = \"MetaMask\";\n    SupportedProviders[\"PrivateKey\"] = \"Private key\";\n    SupportedProviders[\"Valora\"] = \"Valora\";\n    SupportedProviders[\"WalletConnect\"] = \"WalletConnect\";\n})(SupportedProviders = exports.SupportedProviders || (exports.SupportedProviders = {}));\nexports.PROVIDERS = (_a = {},\n    _a[SupportedProviders.Valora] = {\n        name: 'Valora',\n        description: 'Connect to Valora, a mobile payments app that works worldwide',\n        icon: walletIcons_1.VALORA,\n        canConnect: function () { return true; },\n        showInList: function () { return true; },\n        listPriority: function () { return 0; },\n        installURL: 'https://valoraapp.com/',\n    },\n    _a[SupportedProviders.WalletConnect] = {\n        name: 'WalletConnect',\n        description: 'Scan a QR code to connect your wallet',\n        icon: walletIcons_1.WALLETCONNECT,\n        canConnect: function () { return true; },\n        showInList: function () { return true; },\n        listPriority: function () { return 0; },\n    },\n    _a[SupportedProviders.Ledger] = {\n        name: 'Ledger',\n        description: 'Sync with your Ledger hardware wallet',\n        icon: walletIcons_1.LEDGER,\n        canConnect: function () { return true; },\n        showInList: function () { return !react_device_detect_1.isMobile; },\n        listPriority: function () { return 0; },\n    },\n    _a[SupportedProviders.CeloWallet] = {\n        name: 'Celo Wallet',\n        description: 'Connect to Celo Wallet for web or deskop',\n        icon: walletIcons_1.CELO,\n        canConnect: function () { return true; },\n        showInList: function () { return true; },\n        listPriority: function () { return (!react_device_detect_1.isMobile ? 0 : 1); },\n    },\n    _a[SupportedProviders.CeloTerminal] = {\n        name: 'Celo Terminal',\n        description: 'Connect to the Celo Terminal desktop app',\n        // TODO get SVG icon\n        icon: 'https://raw.githubusercontent.com/zviadm/celoterminal/main/static/icon.png',\n        canConnect: function () { return true; },\n        showInList: function () { return !react_device_detect_1.isMobile; },\n        listPriority: function () { return 1; },\n    },\n    _a[SupportedProviders.MetaMask] = {\n        name: 'MetaMask',\n        description: (react_1.default.createElement(react_1.default.Fragment, null,\n            \"Use the Metamask browser extension. Celo support is limited.\",\n            ' ',\n            react_1.default.createElement(\"a\", { href: \"https://docs.celo.org/getting-started/wallets/using-metamask-with-celo\", target: \"_blank\", onClick: function (e) {\n                    e.stopPropagation();\n                    e.nativeEvent.stopPropagation();\n                }, className: \"tw-underline tw-text-gray-900 dark:tw-text-gray-200 tw-font-medium\", rel: \"noopener noreferrer\" }, \"Learn more\"))),\n        icon: walletIcons_1.METAMASK,\n        canConnect: function () { var _a; return !!((_a = window.ethereum) === null || _a === void 0 ? void 0 : _a.isMetaMask); },\n        showInList: function () { return !react_device_detect_1.isMobile; },\n        listPriority: function () { return 0; },\n        installURL: 'https://metamask.app.link/',\n    },\n    _a[SupportedProviders.CeloExtensionWallet] = {\n        name: 'Celo Extension Wallet',\n        description: 'Use a wallet from the the Celo chrome extension',\n        icon: walletIcons_1.CHROME_EXTENSION_STORE,\n        canConnect: function () { return !!window.celo; },\n        showInList: function () { return !react_device_detect_1.isMobile; },\n        listPriority: function () { return 1; },\n        installURL: 'https://chrome.google.com/webstore/detail/celoextensionwallet/kkilomkmpmkbdnfelcpgckmpcaemjcdh/related',\n    },\n    _a[SupportedProviders.Injected] = {\n        name: 'Ethereum Web3',\n        description: 'Connect any Ethereum wallet to Celo',\n        icon: walletIcons_1.ETHEREUM,\n        canConnect: function () { return !!window.ethereum; },\n        showInList: function () { return !!window.ethereum && !window.ethereum.isMetaMask; },\n        listPriority: function () { return 1; },\n    },\n    _a[SupportedProviders.PrivateKey] = {\n        name: 'Private Key',\n        description: 'Enter a plaintext private key to load your account (testing only)',\n        icon: walletIcons_1.PRIVATE_KEY,\n        canConnect: function () { return true; },\n        showInList: function () { return process.env.NODE_ENV !== 'production'; },\n        listPriority: function () { return 1; },\n    },\n    _a);\nexports.images = (_b = {},\n    _b[SupportedProviders.Valora] = walletIcons_1.VALORA,\n    _b[SupportedProviders.MetaMask] = walletIcons_1.METAMASK,\n    _b[SupportedProviders.WalletConnect] = walletIcons_1.WALLETCONNECT,\n    _b[SupportedProviders.Ledger] = walletIcons_1.LEDGER,\n    _b[SupportedProviders.CeloWallet] = walletIcons_1.CELO,\n    _b[SupportedProviders.CeloTerminal] = walletIcons_1.CELO,\n    _b[SupportedProviders.CeloExtensionWallet] = walletIcons_1.CHROME_EXTENSION_STORE,\n    _b[SupportedProviders.PrivateKey] = walletIcons_1.PRIVATE_KEY,\n    _b);\nvar NetworkNames;\n(function (NetworkNames) {\n    NetworkNames[\"Alfajores\"] = \"Alfajores\";\n    NetworkNames[\"Baklava\"] = \"Baklava\";\n    NetworkNames[\"Mainnet\"] = \"Mainnet\";\n})(NetworkNames = exports.NetworkNames || (exports.NetworkNames = {}));\nexports.Alfajores = {\n    name: NetworkNames.Alfajores,\n    rpcUrl: 'https://alfajores-forno.celo-testnet.org',\n    graphQl: 'https://alfajores-blockscout.celo-testnet.org/graphiql',\n    explorer: 'https://alfajores-blockscout.celo-testnet.org',\n    chainId: types_1.ChainId.Alfajores,\n};\nexports.Baklava = {\n    name: NetworkNames.Baklava,\n    rpcUrl: 'https://baklava-forno.celo-testnet.org',\n    graphQl: 'https://baklava-blockscout.celo-testnet.org/graphiql',\n    explorer: 'https://baklava-blockscout.celo-testnet.org',\n    chainId: types_1.ChainId.Baklava,\n};\nexports.Mainnet = {\n    name: NetworkNames.Mainnet,\n    rpcUrl: 'https://forno.celo.org',\n    graphQl: 'https://explorer.celo.org/graphiql',\n    explorer: 'https://explorer.celo.org',\n    chainId: types_1.ChainId.Mainnet,\n};\nvar WalletTypes;\n(function (WalletTypes) {\n    WalletTypes[\"Valora\"] = \"Valora\";\n    WalletTypes[\"MetaMask\"] = \"MetaMask\";\n    WalletTypes[\"WalletConnect\"] = \"WalletConnect\";\n    WalletTypes[\"CeloWallet\"] = \"CeloWallet\";\n    WalletTypes[\"CeloTerminal\"] = \"CeloTerminal\";\n    WalletTypes[\"CeloExtensionWallet\"] = \"CeloExtensionWallet\";\n    WalletTypes[\"Ledger\"] = \"Ledger\";\n    WalletTypes[\"Injected\"] = \"Injected\";\n    WalletTypes[\"PrivateKey\"] = \"PrivateKey\";\n    WalletTypes[\"Unauthenticated\"] = \"Unauthenticated\";\n})(WalletTypes = exports.WalletTypes || (exports.WalletTypes = {}));\n/**\n * Gets the provider associated with a wallet type.\n * @param wallet\n * @returns\n */\nvar getProviderForWallet = function (wallet) {\n    return wallet === WalletTypes.Unauthenticated ? null : SupportedProviders[wallet];\n};\nexports.getProviderForWallet = getProviderForWallet;\n/**\n * Default networks to connect to.\n */\nexports.DEFAULT_NETWORKS = [exports.Mainnet, exports.Alfajores];\n//# sourceMappingURL=constants.js.map"]},"metadata":{},"sourceType":"script"}