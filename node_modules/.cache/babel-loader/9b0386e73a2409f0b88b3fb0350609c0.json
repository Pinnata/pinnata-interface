{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport IERC20_ABI from \"src/abis/dahlia_contracts/IERC20.json\";\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\nimport { isAddress, toBN } from \"web3-utils\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { safeBoxMap } from \"src/config\";\nexport const useERC = ({\n  tokenAddress,\n  allowAddress\n}) => {\n  _s();\n\n  const {\n    kit,\n    address\n  } = useContractKit();\n  const call = React.useCallback(async () => {\n    if (!tokenAddress || !isAddress(tokenAddress) || !address) {\n      return null;\n    }\n\n    console.log(tokenAddress);\n    const ERCToken = new kit.web3.eth.Contract(IERC20_ABI.abi, getAddress(tokenAddress));\n    console.log('here');\n    console.log(address);\n    console.log(safeBoxMap.get(getAddress(tokenAddress)));\n    const allowance = toBN(await ERCToken.methods.allowance(address, safeBoxMap.get(getAddress(tokenAddress))).call());\n    console.log('here1');\n    const balance = toBN(await ERCToken.methods.balanceOf(address).call());\n    return {\n      allowance,\n      balance\n    };\n  }, [kit, address, tokenAddress]);\n  return useAsyncState(null, call);\n};\n\n_s(useERC, \"65oUwvUZD1z9qgK3qj8TClGRkms=\", false, function () {\n  return [useContractKit, useAsyncState];\n});","map":{"version":3,"sources":["/Users/kylescott/src/nomspace-interface/src/hooks/useERC.ts"],"names":["React","useContractKit","IERC20_ABI","useAsyncState","isAddress","toBN","getAddress","safeBoxMap","useERC","tokenAddress","allowAddress","kit","address","call","useCallback","console","log","ERCToken","web3","eth","Contract","abi","get","allowance","methods","balance","balanceOf"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,OAAOC,UAAP,MAAuB,uCAAvB;AAEA,SAASC,aAAT,QAA8B,yBAA9B;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAyC,YAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,UAAT,QAA2B,YAA3B;AAOA,OAAO,MAAMC,MAAM,GAAG,CAAC;AAACC,EAAAA,YAAD;AAAeC,EAAAA;AAAf,CAAD,KAA0C;AAAA;;AAC9D,QAAM;AAAEC,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAmBX,cAAc,EAAvC;AACA,QAAMY,IAAI,GAAGb,KAAK,CAACc,WAAN,CAAkB,YAAY;AACzC,QAAI,CAACL,YAAD,IAAiB,CAACL,SAAS,CAACK,YAAD,CAA3B,IAA6C,CAACG,OAAlD,EAA2D;AACzD,aAAO,IAAP;AACD;;AACDG,IAAAA,OAAO,CAACC,GAAR,CAAYP,YAAZ;AACA,UAAMQ,QAAQ,GAAI,IAAIN,GAAG,CAACO,IAAJ,CAASC,GAAT,CAAaC,QAAjB,CAChBlB,UAAU,CAACmB,GADK,EAEhBf,UAAU,CAACG,YAAD,CAFM,CAAlB;AAIAM,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYT,UAAU,CAACe,GAAX,CAAehB,UAAU,CAACG,YAAD,CAAzB,CAAZ;AACA,UAAMc,SAAS,GAAGlB,IAAI,CACpB,MAAMY,QAAQ,CAACO,OAAT,CAAiBD,SAAjB,CAA2BX,OAA3B,EAAoCL,UAAU,CAACe,GAAX,CAAehB,UAAU,CAACG,YAAD,CAAzB,CAApC,EAA+EI,IAA/E,EADc,CAAtB;AAGAE,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,UAAMS,OAAO,GAAGpB,IAAI,CAAC,MAAMY,QAAQ,CAACO,OAAT,CAAiBE,SAAjB,CAA2Bd,OAA3B,EAAoCC,IAApC,EAAP,CAApB;AACA,WAAO;AAAEU,MAAAA,SAAF;AAAaE,MAAAA;AAAb,KAAP;AACD,GAlBY,EAkBV,CAACd,GAAD,EAAMC,OAAN,EAAeH,YAAf,CAlBU,CAAb;AAmBA,SAAON,aAAa,CAAC,IAAD,EAAOU,IAAP,CAApB;AACD,CAtBM;;GAAML,M;UACcP,c,EAoBlBE,a","sourcesContent":["import React from \"react\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\nimport IERC20_ABI from \"src/abis/dahlia_contracts/IERC20.json\"\nimport { IERC20 } from \"src/generated/IERC20\";\nimport { useAsyncState } from \"src/hooks/useAsyncState\";\nimport { isAddress, toBN, AbiItem } from \"web3-utils\";\nimport { getAddress } from \"ethers/lib/utils\";\nimport { safeBoxMap } from \"src/config\";\n\ninterface Props {\n  tokenAddress: string;\n  allowAddress?: string;\n}\n\nexport const useERC = ({tokenAddress, allowAddress }: Props) => {\n  const { kit, address } = useContractKit();\n  const call = React.useCallback(async () => {\n    if (!tokenAddress || !isAddress(tokenAddress) || !address) {\n      return null;\n    }\n    console.log(tokenAddress); \n    const ERCToken = (new kit.web3.eth.Contract(\n      IERC20_ABI.abi as AbiItem[],\n      getAddress(tokenAddress),\n    ) as unknown) as IERC20;\n    console.log('here')\n    console.log(address); \n    console.log(safeBoxMap.get(getAddress(tokenAddress))!)\n    const allowance = toBN(\n      await ERCToken.methods.allowance(address, safeBoxMap.get(getAddress(tokenAddress))!).call()\n    );\n    console.log('here1')\n    const balance = toBN(await ERCToken.methods.balanceOf(address).call());\n    return { allowance, balance };\n  }, [kit, address, tokenAddress]);\n  return useAsyncState(null, call);\n};\n"]},"metadata":{},"sourceType":"module"}