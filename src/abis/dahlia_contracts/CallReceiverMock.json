{
  "abi": [
    {
      "anonymous": false,
      "inputs": [],
      "name": "MockFunctionCalled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "mockFunction",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mockFunctionNonPayable",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mockFunctionOutOfGas",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mockFunctionRevertsNoReason",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mockFunctionRevertsReason",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mockFunctionThrows",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mockFunctionWritesStorage",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mockStaticFunction",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharedAnswer",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "59": "contracts/openzeppelin/mocks/CallReceiverMock.sol"
  },
  "ast": {
    "absolutePath": "contracts/openzeppelin/mocks/CallReceiverMock.sol",
    "exportedSymbols": {
      "CallReceiverMock": [
        12995
      ]
    },
    "id": 12996,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 12903,
        "literals": [
          "solidity",
          ">=",
          "0.6",
          ".0",
          "<",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:31:59"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 12995,
        "linearizedBaseContracts": [
          12995
        ],
        "name": "CallReceiverMock",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "fc40cf73",
            "id": 12905,
            "mutability": "mutable",
            "name": "sharedAnswer",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 12995,
            "src": "98:26:59",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 12904,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "98:6:59",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "anonymous": false,
            "documentation": null,
            "id": 12907,
            "name": "MockFunctionCalled",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 12906,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "155:2:59"
            },
            "src": "131:27:59"
          },
          {
            "constant": false,
            "id": 12910,
            "mutability": "mutable",
            "name": "_array",
            "nodeType": "VariableDeclaration",
            "overrides": null,
            "scope": 12995,
            "src": "164:24:59",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
              "typeString": "uint256[]"
            },
            "typeName": {
              "baseType": {
                "id": 12908,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "164:7:59",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 12909,
              "length": null,
              "nodeType": "ArrayTypeName",
              "src": "164:9:59",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                "typeString": "uint256[]"
              }
            },
            "value": null,
            "visibility": "private"
          },
          {
            "body": {
              "id": 12920,
              "nodeType": "Block",
              "src": "258:68:59",
              "statements": [
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 12915,
                      "name": "MockFunctionCalled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 12907,
                      "src": "273:18:59",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 12916,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "273:20:59",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 12917,
                  "nodeType": "EmitStatement",
                  "src": "268:25:59"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "307831323334",
                    "id": 12918,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "311:8:59",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_1ac7d1b81b7ba1025b36ccb86723da6ee5a87259f1c2fd5abe69d3200b512ec8",
                      "typeString": "literal_string \"0x1234\""
                    },
                    "value": "0x1234"
                  },
                  "functionReturnParameters": 12914,
                  "id": 12919,
                  "nodeType": "Return",
                  "src": "304:15:59"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "3e6fec04",
            "id": 12921,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mockFunction",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 12911,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "216:2:59"
            },
            "returnParameters": {
              "id": 12914,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12913,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 12921,
                  "src": "243:13:59",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 12912,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "243:6:59",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "242:15:59"
            },
            "scope": 12995,
            "src": "195:131:59",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 12931,
              "nodeType": "Block",
              "src": "397:68:59",
              "statements": [
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 12926,
                      "name": "MockFunctionCalled",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 12907,
                      "src": "412:18:59",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 12927,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "412:20:59",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 12928,
                  "nodeType": "EmitStatement",
                  "src": "407:25:59"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "307831323334",
                    "id": 12929,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "450:8:59",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_1ac7d1b81b7ba1025b36ccb86723da6ee5a87259f1c2fd5abe69d3200b512ec8",
                      "typeString": "literal_string \"0x1234\""
                    },
                    "value": "0x1234"
                  },
                  "functionReturnParameters": 12925,
                  "id": 12930,
                  "nodeType": "Return",
                  "src": "443:15:59"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "0f63e42c",
            "id": 12932,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mockFunctionNonPayable",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 12922,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "363:2:59"
            },
            "returnParameters": {
              "id": 12925,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12924,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 12932,
                  "src": "382:13:59",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 12923,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "382:6:59",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "381:15:59"
            },
            "scope": 12995,
            "src": "332:133:59",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 12939,
              "nodeType": "Block",
              "src": "537:32:59",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "307831323334",
                    "id": 12937,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "554:8:59",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_1ac7d1b81b7ba1025b36ccb86723da6ee5a87259f1c2fd5abe69d3200b512ec8",
                      "typeString": "literal_string \"0x1234\""
                    },
                    "value": "0x1234"
                  },
                  "functionReturnParameters": 12936,
                  "id": 12938,
                  "nodeType": "Return",
                  "src": "547:15:59"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "c8fc7696",
            "id": 12940,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mockStaticFunction",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 12933,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "498:2:59"
            },
            "returnParameters": {
              "id": 12936,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12935,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 12940,
                  "src": "522:13:59",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 12934,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "522:6:59",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "521:15:59"
            },
            "scope": 12995,
            "src": "471:98:59",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 12946,
              "nodeType": "Block",
              "src": "629:25:59",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 12943,
                      "name": "revert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -19,
                        -19
                      ],
                      "referencedDeclaration": -19,
                      "src": "639:6:59",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 12944,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "639:8:59",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 12945,
                  "nodeType": "ExpressionStatement",
                  "src": "639:8:59"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "2c81d638",
            "id": 12947,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mockFunctionRevertsNoReason",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 12941,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "611:2:59"
            },
            "returnParameters": {
              "id": 12942,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "629:0:59"
            },
            "scope": 12995,
            "src": "575:79:59",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 12954,
              "nodeType": "Block",
              "src": "712:54:59",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "43616c6c52656365697665724d6f636b3a20726576657274696e67",
                        "id": 12951,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "729:29:59",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_1fa67ffa712c128062681134b4f6fcc189b02b2cec4822b38d0f01b87c9ef80f",
                          "typeString": "literal_string \"CallReceiverMock: reverting\""
                        },
                        "value": "CallReceiverMock: reverting"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_stringliteral_1fa67ffa712c128062681134b4f6fcc189b02b2cec4822b38d0f01b87c9ef80f",
                          "typeString": "literal_string \"CallReceiverMock: reverting\""
                        }
                      ],
                      "id": 12950,
                      "name": "revert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -19,
                        -19
                      ],
                      "referencedDeclaration": -19,
                      "src": "722:6:59",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (string memory) pure"
                      }
                    },
                    "id": 12952,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "722:37:59",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 12953,
                  "nodeType": "ExpressionStatement",
                  "src": "722:37:59"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "0c034968",
            "id": 12955,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mockFunctionRevertsReason",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 12948,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "694:2:59"
            },
            "returnParameters": {
              "id": 12949,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "712:0:59"
            },
            "scope": 12995,
            "src": "660:106:59",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 12962,
              "nodeType": "Block",
              "src": "817:30:59",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "66616c7365",
                        "id": 12959,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "834:5:59",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 12958,
                      "name": "assert",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -3,
                      "src": "827:6:59",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 12960,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "827:13:59",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 12961,
                  "nodeType": "ExpressionStatement",
                  "src": "827:13:59"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "3bcfaa14",
            "id": 12963,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mockFunctionThrows",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 12956,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "799:2:59"
            },
            "returnParameters": {
              "id": 12957,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "817:0:59"
            },
            "scope": 12995,
            "src": "772:75:59",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 12981,
              "nodeType": "Block",
              "src": "900:82:59",
              "statements": [
                {
                  "body": {
                    "id": 12979,
                    "nodeType": "Block",
                    "src": "937:39:59",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 12976,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 12967,
                              "src": "963:1:59",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 12973,
                              "name": "_array",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 12910,
                              "src": "951:6:59",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                "typeString": "uint256[] storage ref"
                              }
                            },
                            "id": 12975,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "951:11:59",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 12977,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "951:14:59",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 12978,
                        "nodeType": "ExpressionStatement",
                        "src": "951:14:59"
                      }
                    ]
                  },
                  "condition": null,
                  "id": 12980,
                  "initializationExpression": {
                    "assignments": [
                      12967
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 12967,
                        "mutability": "mutable",
                        "name": "i",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 12980,
                        "src": "915:9:59",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 12966,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "915:7:59",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "id": 12969,
                    "initialValue": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 12968,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "927:1:59",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "915:13:59"
                  },
                  "loopExpression": {
                    "expression": {
                      "argumentTypes": null,
                      "id": 12971,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": true,
                      "src": "932:3:59",
                      "subExpression": {
                        "argumentTypes": null,
                        "id": 12970,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 12967,
                        "src": "934:1:59",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 12972,
                    "nodeType": "ExpressionStatement",
                    "src": "932:3:59"
                  },
                  "nodeType": "ForStatement",
                  "src": "910:66:59"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "a793ab47",
            "id": 12982,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mockFunctionOutOfGas",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 12964,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "882:2:59"
            },
            "returnParameters": {
              "id": 12965,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "900:0:59"
            },
            "scope": 12995,
            "src": "853:129:59",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 12993,
              "nodeType": "Block",
              "src": "1056:61:59",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 12989,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 12987,
                      "name": "sharedAnswer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 12905,
                      "src": "1066:12:59",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "3432",
                      "id": 12988,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "string",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1081:4:59",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_stringliteral_ccb1f717aa77602faf03a594761a36956b1c4cf44c6b336d1db57da799b331b8",
                        "typeString": "literal_string \"42\""
                      },
                      "value": "42"
                    },
                    "src": "1066:19:59",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 12990,
                  "nodeType": "ExpressionStatement",
                  "src": "1066:19:59"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "hexValue": "307831323334",
                    "id": 12991,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1102:8:59",
                    "subdenomination": null,
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_1ac7d1b81b7ba1025b36ccb86723da6ee5a87259f1c2fd5abe69d3200b512ec8",
                      "typeString": "literal_string \"0x1234\""
                    },
                    "value": "0x1234"
                  },
                  "functionReturnParameters": 12986,
                  "id": 12992,
                  "nodeType": "Return",
                  "src": "1095:15:59"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "aa04f77e",
            "id": 12994,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "mockFunctionWritesStorage",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 12983,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1022:2:59"
            },
            "returnParameters": {
              "id": 12986,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 12985,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 12994,
                  "src": "1041:13:59",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 12984,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1041:6:59",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1040:15:59"
            },
            "scope": 12995,
            "src": "988:129:59",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 12996,
        "src": "66:1053:59"
      }
    ],
    "src": "33:1087:59"
  },
  "bytecode": "608060405234801561001057600080fd5b5061041c806100206000396000f3fe6080604052600436106100865760003560e01c80633e6fec04116100595780633e6fec041461012f578063a793ab4714610137578063aa04f77e1461013f578063c8fc769614610154578063fc40cf731461016957610086565b80630c0349681461008b5780630f63e42c146100955780632c81d6381461011f5780633bcfaa1414610127575b600080fd5b61009361017e565b005b3480156100a157600080fd5b506100aa6101cb565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100e45781810151838201526020016100cc565b50505050905090810190601f1680156101115780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610093610086565b610093610218565b6100aa6101cb565b61009361021a565b34801561014b57600080fd5b506100aa610256565b34801561016057600080fd5b506100aa6102a5565b34801561017557600080fd5b506100aa6102c5565b6040805162461bcd60e51b815260206004820152601b60248201527f43616c6c52656365697665724d6f636b3a20726576657274696e670000000000604482015290519081900360640190fd5b6040516060907f52c66ed6ec9ca819cba26fe2b2650059270d8981b295af300187a964f54a8c2390600090a1506040805180820190915260068152650c1e0c4c8ccd60d21b602082015290565bfe5b60005b60018054808201825560008290527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018290550161021d565b604080518082019091526002808252611a1960f11b60209092019182526060916102839160009190610353565b50506040805180820190915260068152650c1e0c4c8ccd60d21b602082015290565b6040805180820190915260068152650c1e0c4c8ccd60d21b602082015290565b6000805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561034b5780601f106103205761010080835404028352916020019161034b565b820191906000526020600020905b81548152906001019060200180831161032e57829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061039457805160ff19168380011785556103c1565b828001600101855582156103c1579182015b828111156103c15782518255916020019190600101906103a6565b506103cd9291506103d1565b5090565b5b808211156103cd57600081556001016103d256fea2646970667358221220bd47cc7f3f3d7cb9b66a1dd59c1e76bc3c82302d25ec59128cd2698bc1c91ac864736f6c634300060c0033",
  "bytecodeSha1": "8d6d9c2303bfc09e465b8fc1fa6039f25bae6ddc",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.6.12+commit.27d51765"
  },
  "contractName": "CallReceiverMock",
  "coverageMap": {
    "branches": {
      "59": {}
    },
    "statements": {
      "59": {
        "CallReceiverMock.mockFunctionNonPayable": {
          "1": [
            407,
            432
          ],
          "2": [
            443,
            458
          ]
        },
        "CallReceiverMock.mockFunctionOutOfGas": {
          "4": [
            951,
            965
          ],
          "5": [
            932,
            935
          ]
        },
        "CallReceiverMock.mockFunctionRevertsReason": {
          "0": [
            722,
            759
          ]
        },
        "CallReceiverMock.mockFunctionThrows": {
          "3": [
            827,
            840
          ]
        },
        "CallReceiverMock.mockFunctionWritesStorage": {
          "6": [
            1066,
            1085
          ],
          "7": [
            1095,
            1110
          ]
        },
        "CallReceiverMock.mockStaticFunction": {
          "8": [
            547,
            562
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "6080604052600436106100865760003560e01c80633e6fec04116100595780633e6fec041461012f578063a793ab4714610137578063aa04f77e1461013f578063c8fc769614610154578063fc40cf731461016957610086565b80630c0349681461008b5780630f63e42c146100955780632c81d6381461011f5780633bcfaa1414610127575b600080fd5b61009361017e565b005b3480156100a157600080fd5b506100aa6101cb565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100e45781810151838201526020016100cc565b50505050905090810190601f1680156101115780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610093610086565b610093610218565b6100aa6101cb565b61009361021a565b34801561014b57600080fd5b506100aa610256565b34801561016057600080fd5b506100aa6102a5565b34801561017557600080fd5b506100aa6102c5565b6040805162461bcd60e51b815260206004820152601b60248201527f43616c6c52656365697665724d6f636b3a20726576657274696e670000000000604482015290519081900360640190fd5b6040516060907f52c66ed6ec9ca819cba26fe2b2650059270d8981b295af300187a964f54a8c2390600090a1506040805180820190915260068152650c1e0c4c8ccd60d21b602082015290565bfe5b60005b60018054808201825560008290527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6018290550161021d565b604080518082019091526002808252611a1960f11b60209092019182526060916102839160009190610353565b50506040805180820190915260068152650c1e0c4c8ccd60d21b602082015290565b6040805180820190915260068152650c1e0c4c8ccd60d21b602082015290565b6000805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561034b5780601f106103205761010080835404028352916020019161034b565b820191906000526020600020905b81548152906001019060200180831161032e57829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061039457805160ff19168380011785556103c1565b828001600101855582156103c1579182015b828111156103c15782518255916020019190600101906103a6565b506103cd9291506103d1565b5090565b5b808211156103cd57600081556001016103d256fea2646970667358221220bd47cc7f3f3d7cb9b66a1dd59c1e76bc3c82302d25ec59128cd2698bc1c91ac864736f6c634300060c0033",
  "deployedSourceMap": "66:1053:59:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;660:106;;;:::i;:::-;;332:133;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;575:79;;;:::i;772:75::-;;;:::i;195:131::-;;;:::i;853:129::-;;;:::i;988:::-;;;;;;;;;;;;;:::i;471:98::-;;;;;;;;;;;;;:::i;98:26::-;;;;;;;;;;;;;:::i;660:106::-;722:37;;;-1:-1:-1;;;722:37:59;;;;;;;;;;;;;;;;;;;;;;;;;;;332:133;412:20;;382:13;;412:20;;;;;-1:-1:-1;443:15:59;;;;;;;;;;;;-1:-1:-1;;;443:15:59;;;;332:133;:::o;772:75::-;827:13;853:129;915:9;910:66;951:6;:14;;;;;;;-1:-1:-1;951:14:59;;;;;;;;932:3;910:66;;988:129;1066:19;;;;;;;;;;;;;-1:-1:-1;;;1066:19:59;;;;;;;1041:13;;1066:19;;-1:-1:-1;;1066:19:59;;:::i;:::-;-1:-1:-1;;1095:15:59;;;;;;;;;;;;-1:-1:-1;;;1095:15:59;;;;988:129;:::o;471:98::-;547:15;;;;;;;;;;;;-1:-1:-1;;;547:15:59;;;;471:98;:::o;98:26::-;;;;;;;;;;;;;;;-1:-1:-1;;98:26:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    66,
    1119
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x86 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x3E6FEC04 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0x3E6FEC04 EQ PUSH2 0x12F JUMPI DUP1 PUSH4 0xA793AB47 EQ PUSH2 0x137 JUMPI DUP1 PUSH4 0xAA04F77E EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0xC8FC7696 EQ PUSH2 0x154 JUMPI DUP1 PUSH4 0xFC40CF73 EQ PUSH2 0x169 JUMPI PUSH2 0x86 JUMP JUMPDEST DUP1 PUSH4 0xC034968 EQ PUSH2 0x8B JUMPI DUP1 PUSH4 0xF63E42C EQ PUSH2 0x95 JUMPI DUP1 PUSH4 0x2C81D638 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x3BCFAA14 EQ PUSH2 0x127 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x93 PUSH2 0x17E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAA PUSH2 0x1CB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xE4 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xCC JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x111 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x93 PUSH2 0x86 JUMP JUMPDEST PUSH2 0x93 PUSH2 0x218 JUMP JUMPDEST PUSH2 0xAA PUSH2 0x1CB JUMP JUMPDEST PUSH2 0x93 PUSH2 0x21A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAA PUSH2 0x256 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x160 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAA PUSH2 0x2A5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x175 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xAA PUSH2 0x2C5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616C6C52656365697665724D6F636B3A20726576657274696E670000000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x60 SWAP1 PUSH32 0x52C66ED6EC9CA819CBA26FE2B2650059270D8981B295AF300187A964F54A8C23 SWAP1 PUSH1 0x0 SWAP1 LOG1 POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x6 DUP2 MSTORE PUSH6 0xC1E0C4C8CCD PUSH1 0xD2 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST INVALID JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP1 SLOAD DUP1 DUP3 ADD DUP3 SSTORE PUSH1 0x0 DUP3 SWAP1 MSTORE PUSH32 0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6 ADD DUP3 SWAP1 SSTORE ADD PUSH2 0x21D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x2 DUP1 DUP3 MSTORE PUSH2 0x1A19 PUSH1 0xF1 SHL PUSH1 0x20 SWAP1 SWAP3 ADD SWAP2 DUP3 MSTORE PUSH1 0x60 SWAP2 PUSH2 0x283 SWAP2 PUSH1 0x0 SWAP2 SWAP1 PUSH2 0x353 JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x6 DUP2 MSTORE PUSH6 0xC1E0C4C8CCD PUSH1 0xD2 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x6 DUP2 MSTORE PUSH6 0xC1E0C4C8CCD PUSH1 0xD2 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x2 PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x34B JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x320 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x34B JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x32E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x394 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x3C1 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x3C1 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x3C1 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x3A6 JUMP JUMPDEST POP PUSH2 0x3CD SWAP3 SWAP2 POP PUSH2 0x3D1 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x3CD JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3D2 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBD SELFBALANCE 0xCC PUSH32 0x3F3D7CB9B66A1DD59C1E76BC3C82302D25EC59128CD2698BC1C91AC864736F6C PUSH4 0x4300060C STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        66,
        1119
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "5": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "CALLDATASIZE",
      "path": "59"
    },
    "8": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "LT",
      "path": "59"
    },
    "9": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x86"
    },
    "12": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "13": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "CALLDATALOAD",
      "path": "59"
    },
    "16": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "SHR",
      "path": "59"
    },
    "19": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "DUP1",
      "path": "59"
    },
    "20": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH4",
      "path": "59",
      "value": "0x3E6FEC04"
    },
    "25": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "GT",
      "path": "59"
    },
    "26": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x59"
    },
    "29": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "30": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "DUP1",
      "path": "59"
    },
    "31": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH4",
      "path": "59",
      "value": "0x3E6FEC04"
    },
    "36": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "EQ",
      "path": "59"
    },
    "37": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x12F"
    },
    "40": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "41": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "DUP1",
      "path": "59"
    },
    "42": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH4",
      "path": "59",
      "value": "0xA793AB47"
    },
    "47": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "EQ",
      "path": "59"
    },
    "48": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x137"
    },
    "51": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "52": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "DUP1",
      "path": "59"
    },
    "53": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH4",
      "path": "59",
      "value": "0xAA04F77E"
    },
    "58": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "EQ",
      "path": "59"
    },
    "59": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x13F"
    },
    "62": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "63": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "DUP1",
      "path": "59"
    },
    "64": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH4",
      "path": "59",
      "value": "0xC8FC7696"
    },
    "69": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "EQ",
      "path": "59"
    },
    "70": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x154"
    },
    "73": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "74": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "DUP1",
      "path": "59"
    },
    "75": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH4",
      "path": "59",
      "value": "0xFC40CF73"
    },
    "80": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "EQ",
      "path": "59"
    },
    "81": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x169"
    },
    "84": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "85": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x86"
    },
    "88": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "JUMP",
      "path": "59"
    },
    "89": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "90": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "DUP1",
      "path": "59"
    },
    "91": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH4",
      "path": "59",
      "value": "0xC034968"
    },
    "96": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "EQ",
      "path": "59"
    },
    "97": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x8B"
    },
    "100": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "101": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "DUP1",
      "path": "59"
    },
    "102": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH4",
      "path": "59",
      "value": "0xF63E42C"
    },
    "107": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "EQ",
      "path": "59"
    },
    "108": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x95"
    },
    "111": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "112": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "DUP1",
      "path": "59"
    },
    "113": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH4",
      "path": "59",
      "value": "0x2C81D638"
    },
    "118": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "EQ",
      "path": "59"
    },
    "119": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x11F"
    },
    "122": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "123": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "DUP1",
      "path": "59"
    },
    "124": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH4",
      "path": "59",
      "value": "0x3BCFAA14"
    },
    "129": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "EQ",
      "path": "59"
    },
    "130": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x127"
    },
    "133": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "134": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "135": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x0"
    },
    "137": {
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "DUP1",
      "path": "59"
    },
    "138": {
      "first_revert": true,
      "fn": null,
      "offset": [
        66,
        1119
      ],
      "op": "REVERT",
      "path": "59"
    },
    "139": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        660,
        766
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "140": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        660,
        766
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x93"
    },
    "143": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        660,
        766
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x17E"
    },
    "146": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "jump": "i",
      "offset": [
        660,
        766
      ],
      "op": "JUMP",
      "path": "59"
    },
    "147": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        660,
        766
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "148": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        660,
        766
      ],
      "op": "STOP",
      "path": "59"
    },
    "149": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "150": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "CALLVALUE",
      "path": "59"
    },
    "151": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP1",
      "path": "59"
    },
    "152": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "ISZERO",
      "path": "59"
    },
    "153": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0xA1"
    },
    "156": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "157": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x0"
    },
    "159": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP1",
      "path": "59"
    },
    "160": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "REVERT",
      "path": "59"
    },
    "161": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "162": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "POP",
      "path": "59"
    },
    "163": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0xAA"
    },
    "166": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x1CB"
    },
    "169": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "jump": "i",
      "offset": [
        332,
        465
      ],
      "op": "JUMP",
      "path": "59"
    },
    "170": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "171": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x40"
    },
    "173": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP1",
      "path": "59"
    },
    "174": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "MLOAD",
      "path": "59"
    },
    "175": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x20"
    },
    "177": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP1",
      "path": "59"
    },
    "178": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP3",
      "path": "59"
    },
    "179": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "180": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP4",
      "path": "59"
    },
    "181": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "MLOAD",
      "path": "59"
    },
    "182": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP2",
      "path": "59"
    },
    "183": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP4",
      "path": "59"
    },
    "184": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "ADD",
      "path": "59"
    },
    "185": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "186": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP4",
      "path": "59"
    },
    "187": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "MLOAD",
      "path": "59"
    },
    "188": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "SWAP2",
      "path": "59"
    },
    "189": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "SWAP3",
      "path": "59"
    },
    "190": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP4",
      "path": "59"
    },
    "191": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "SWAP3",
      "path": "59"
    },
    "192": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "193": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP4",
      "path": "59"
    },
    "194": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "ADD",
      "path": "59"
    },
    "195": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "SWAP2",
      "path": "59"
    },
    "196": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP6",
      "path": "59"
    },
    "197": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "ADD",
      "path": "59"
    },
    "198": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "199": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP1",
      "path": "59"
    },
    "200": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP4",
      "path": "59"
    },
    "201": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP4",
      "path": "59"
    },
    "202": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x0"
    },
    "204": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "205": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP4",
      "path": "59"
    },
    "206": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP2",
      "path": "59"
    },
    "207": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "LT",
      "path": "59"
    },
    "208": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "ISZERO",
      "path": "59"
    },
    "209": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0xE4"
    },
    "212": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "213": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP2",
      "path": "59"
    },
    "214": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP2",
      "path": "59"
    },
    "215": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "ADD",
      "path": "59"
    },
    "216": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "MLOAD",
      "path": "59"
    },
    "217": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP4",
      "path": "59"
    },
    "218": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP3",
      "path": "59"
    },
    "219": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "ADD",
      "path": "59"
    },
    "220": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "221": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x20"
    },
    "223": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "ADD",
      "path": "59"
    },
    "224": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0xCC"
    },
    "227": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "JUMP",
      "path": "59"
    },
    "228": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "229": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "POP",
      "path": "59"
    },
    "230": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "POP",
      "path": "59"
    },
    "231": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "POP",
      "path": "59"
    },
    "232": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "POP",
      "path": "59"
    },
    "233": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "234": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "POP",
      "path": "59"
    },
    "235": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "236": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP2",
      "path": "59"
    },
    "237": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "ADD",
      "path": "59"
    },
    "238": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "239": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x1F"
    },
    "241": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "AND",
      "path": "59"
    },
    "242": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP1",
      "path": "59"
    },
    "243": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "ISZERO",
      "path": "59"
    },
    "244": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x111"
    },
    "247": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "248": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP1",
      "path": "59"
    },
    "249": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP3",
      "path": "59"
    },
    "250": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "SUB",
      "path": "59"
    },
    "251": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP1",
      "path": "59"
    },
    "252": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "MLOAD",
      "path": "59"
    },
    "253": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x1"
    },
    "255": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP4",
      "path": "59"
    },
    "256": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x20"
    },
    "258": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "SUB",
      "path": "59"
    },
    "259": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x100"
    },
    "262": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "EXP",
      "path": "59"
    },
    "263": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "SUB",
      "path": "59"
    },
    "264": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "NOT",
      "path": "59"
    },
    "265": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "AND",
      "path": "59"
    },
    "266": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP2",
      "path": "59"
    },
    "267": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "268": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x20"
    },
    "270": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "ADD",
      "path": "59"
    },
    "271": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "SWAP2",
      "path": "59"
    },
    "272": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "POP",
      "path": "59"
    },
    "273": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "274": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "POP",
      "path": "59"
    },
    "275": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "SWAP3",
      "path": "59"
    },
    "276": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "POP",
      "path": "59"
    },
    "277": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "POP",
      "path": "59"
    },
    "278": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "POP",
      "path": "59"
    },
    "279": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x40"
    },
    "281": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "MLOAD",
      "path": "59"
    },
    "282": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "DUP1",
      "path": "59"
    },
    "283": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "SWAP2",
      "path": "59"
    },
    "284": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "SUB",
      "path": "59"
    },
    "285": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "286": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "RETURN",
      "path": "59"
    },
    "287": {
      "fn": "CallReceiverMock.mockFunctionRevertsNoReason",
      "offset": [
        575,
        654
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "288": {
      "fn": "CallReceiverMock.mockFunctionRevertsNoReason",
      "offset": [
        575,
        654
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x93"
    },
    "291": {
      "fn": "CallReceiverMock.mockFunctionRevertsNoReason",
      "offset": [
        575,
        654
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x86"
    },
    "294": {
      "fn": "CallReceiverMock.mockFunctionRevertsNoReason",
      "jump": "i",
      "jump_revert": true,
      "offset": [
        639,
        647
      ],
      "op": "JUMP",
      "path": "59"
    },
    "295": {
      "fn": "CallReceiverMock.mockFunctionThrows",
      "offset": [
        772,
        847
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "296": {
      "fn": "CallReceiverMock.mockFunctionThrows",
      "offset": [
        772,
        847
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x93"
    },
    "299": {
      "fn": "CallReceiverMock.mockFunctionThrows",
      "offset": [
        772,
        847
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x218"
    },
    "302": {
      "fn": "CallReceiverMock.mockFunctionThrows",
      "jump": "i",
      "offset": [
        772,
        847
      ],
      "op": "JUMP",
      "path": "59"
    },
    "303": {
      "fn": "CallReceiverMock.mockFunction",
      "offset": [
        195,
        326
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "304": {
      "fn": "CallReceiverMock.mockFunction",
      "offset": [
        195,
        326
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0xAA"
    },
    "307": {
      "fn": "CallReceiverMock.mockFunction",
      "offset": [
        195,
        326
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x1CB"
    },
    "310": {
      "fn": "CallReceiverMock.mockFunction",
      "jump": "i",
      "offset": [
        195,
        326
      ],
      "op": "JUMP",
      "path": "59"
    },
    "311": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        853,
        982
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "312": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        853,
        982
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x93"
    },
    "315": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        853,
        982
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x21A"
    },
    "318": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "jump": "i",
      "offset": [
        853,
        982
      ],
      "op": "JUMP",
      "path": "59"
    },
    "319": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        988,
        1117
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "320": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        988,
        1117
      ],
      "op": "CALLVALUE",
      "path": "59"
    },
    "321": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        988,
        1117
      ],
      "op": "DUP1",
      "path": "59"
    },
    "322": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        988,
        1117
      ],
      "op": "ISZERO",
      "path": "59"
    },
    "323": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        988,
        1117
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x14B"
    },
    "326": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        988,
        1117
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "327": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        988,
        1117
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x0"
    },
    "329": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        988,
        1117
      ],
      "op": "DUP1",
      "path": "59"
    },
    "330": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        988,
        1117
      ],
      "op": "REVERT",
      "path": "59"
    },
    "331": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        988,
        1117
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "332": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        988,
        1117
      ],
      "op": "POP",
      "path": "59"
    },
    "333": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        988,
        1117
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0xAA"
    },
    "336": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        988,
        1117
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x256"
    },
    "339": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "jump": "i",
      "offset": [
        988,
        1117
      ],
      "op": "JUMP",
      "path": "59"
    },
    "340": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        471,
        569
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "341": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        471,
        569
      ],
      "op": "CALLVALUE",
      "path": "59"
    },
    "342": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        471,
        569
      ],
      "op": "DUP1",
      "path": "59"
    },
    "343": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        471,
        569
      ],
      "op": "ISZERO",
      "path": "59"
    },
    "344": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        471,
        569
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x160"
    },
    "347": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        471,
        569
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "348": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        471,
        569
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x0"
    },
    "350": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        471,
        569
      ],
      "op": "DUP1",
      "path": "59"
    },
    "351": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        471,
        569
      ],
      "op": "REVERT",
      "path": "59"
    },
    "352": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        471,
        569
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "353": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        471,
        569
      ],
      "op": "POP",
      "path": "59"
    },
    "354": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        471,
        569
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0xAA"
    },
    "357": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        471,
        569
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x2A5"
    },
    "360": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "jump": "i",
      "offset": [
        471,
        569
      ],
      "op": "JUMP",
      "path": "59"
    },
    "361": {
      "offset": [
        98,
        124
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "362": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "CALLVALUE",
      "path": "59"
    },
    "363": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP1",
      "path": "59"
    },
    "364": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "ISZERO",
      "path": "59"
    },
    "365": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x175"
    },
    "368": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "369": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x0"
    },
    "371": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP1",
      "path": "59"
    },
    "372": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "REVERT",
      "path": "59"
    },
    "373": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "374": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "POP",
      "path": "59"
    },
    "375": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0xAA"
    },
    "378": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x2C5"
    },
    "381": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "jump": "i",
      "offset": [
        98,
        124
      ],
      "op": "JUMP",
      "path": "59"
    },
    "382": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        660,
        766
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "383": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "PUSH1",
      "path": "59",
      "statement": 0,
      "value": "0x40"
    },
    "385": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "DUP1",
      "path": "59"
    },
    "386": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "MLOAD",
      "path": "59"
    },
    "387": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "391": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "393": {
      "op": "SHL"
    },
    "394": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "DUP2",
      "path": "59"
    },
    "395": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "396": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x20"
    },
    "398": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x4"
    },
    "400": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "DUP3",
      "path": "59"
    },
    "401": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "ADD",
      "path": "59"
    },
    "402": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "403": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x1B"
    },
    "405": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x24"
    },
    "407": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "DUP3",
      "path": "59"
    },
    "408": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "ADD",
      "path": "59"
    },
    "409": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "410": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "PUSH32",
      "path": "59",
      "value": "0x43616C6C52656365697665724D6F636B3A20726576657274696E670000000000"
    },
    "443": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x44"
    },
    "445": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "DUP3",
      "path": "59"
    },
    "446": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "ADD",
      "path": "59"
    },
    "447": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "448": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "449": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "MLOAD",
      "path": "59"
    },
    "450": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "451": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "DUP2",
      "path": "59"
    },
    "452": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "453": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "SUB",
      "path": "59"
    },
    "454": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x64"
    },
    "456": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "ADD",
      "path": "59"
    },
    "457": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "458": {
      "fn": "CallReceiverMock.mockFunctionRevertsReason",
      "offset": [
        722,
        759
      ],
      "op": "REVERT",
      "path": "59"
    },
    "459": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "460": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        412,
        432
      ],
      "op": "PUSH1",
      "path": "59",
      "statement": 1,
      "value": "0x40"
    },
    "462": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        412,
        432
      ],
      "op": "MLOAD",
      "path": "59"
    },
    "463": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        382,
        395
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x60"
    },
    "465": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        382,
        395
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "466": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        412,
        432
      ],
      "op": "PUSH32",
      "path": "59",
      "value": "0x52C66ED6EC9CA819CBA26FE2B2650059270D8981B295AF300187A964F54A8C23"
    },
    "499": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        412,
        432
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "500": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        412,
        432
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x0"
    },
    "502": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        412,
        432
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "503": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        412,
        432
      ],
      "op": "LOG1",
      "path": "59"
    },
    "504": {
      "op": "POP"
    },
    "505": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        443,
        458
      ],
      "op": "PUSH1",
      "path": "59",
      "statement": 2,
      "value": "0x40"
    },
    "507": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        443,
        458
      ],
      "op": "DUP1",
      "path": "59"
    },
    "508": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        443,
        458
      ],
      "op": "MLOAD",
      "path": "59"
    },
    "509": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        443,
        458
      ],
      "op": "DUP1",
      "path": "59"
    },
    "510": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        443,
        458
      ],
      "op": "DUP3",
      "path": "59"
    },
    "511": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        443,
        458
      ],
      "op": "ADD",
      "path": "59"
    },
    "512": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        443,
        458
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "513": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        443,
        458
      ],
      "op": "SWAP2",
      "path": "59"
    },
    "514": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        443,
        458
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "515": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        443,
        458
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x6"
    },
    "517": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        443,
        458
      ],
      "op": "DUP2",
      "path": "59"
    },
    "518": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        443,
        458
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "519": {
      "op": "PUSH6",
      "value": "0xC1E0C4C8CCD"
    },
    "526": {
      "op": "PUSH1",
      "value": "0xD2"
    },
    "528": {
      "op": "SHL"
    },
    "529": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        443,
        458
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x20"
    },
    "531": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        443,
        458
      ],
      "op": "DUP3",
      "path": "59"
    },
    "532": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        443,
        458
      ],
      "op": "ADD",
      "path": "59"
    },
    "533": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        443,
        458
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "534": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "offset": [
        332,
        465
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "535": {
      "fn": "CallReceiverMock.mockFunctionNonPayable",
      "jump": "o",
      "offset": [
        332,
        465
      ],
      "op": "JUMP",
      "path": "59"
    },
    "536": {
      "fn": "CallReceiverMock.mockFunctionThrows",
      "offset": [
        772,
        847
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "537": {
      "fn": "CallReceiverMock.mockFunctionThrows",
      "offset": [
        827,
        840
      ],
      "op": "INVALID",
      "path": "59",
      "statement": 3
    },
    "538": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        853,
        982
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "539": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        915,
        924
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x0"
    },
    "541": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        910,
        976
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "542": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        951,
        957
      ],
      "op": "PUSH1",
      "path": "59",
      "statement": 4,
      "value": "0x1"
    },
    "544": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        951,
        965
      ],
      "op": "DUP1",
      "path": "59"
    },
    "545": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        951,
        965
      ],
      "op": "SLOAD",
      "path": "59"
    },
    "546": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        951,
        965
      ],
      "op": "DUP1",
      "path": "59"
    },
    "547": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        951,
        965
      ],
      "op": "DUP3",
      "path": "59"
    },
    "548": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        951,
        965
      ],
      "op": "ADD",
      "path": "59"
    },
    "549": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        951,
        965
      ],
      "op": "DUP3",
      "path": "59"
    },
    "550": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        951,
        965
      ],
      "op": "SSTORE",
      "path": "59"
    },
    "551": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "553": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        951,
        965
      ],
      "op": "DUP3",
      "path": "59"
    },
    "554": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        951,
        965
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "555": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        951,
        965
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "556": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        951,
        965
      ],
      "op": "PUSH32",
      "path": "59",
      "value": "0xB10E2D527612073B26EECDFD717E6A320CF44B4AFAC2B0732D9FCBE2B7FA0CF6"
    },
    "589": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        951,
        965
      ],
      "op": "ADD",
      "path": "59"
    },
    "590": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        951,
        965
      ],
      "op": "DUP3",
      "path": "59"
    },
    "591": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        951,
        965
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "592": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        951,
        965
      ],
      "op": "SSTORE",
      "path": "59"
    },
    "593": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        932,
        935
      ],
      "op": "ADD",
      "path": "59",
      "statement": 5
    },
    "594": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        910,
        976
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x21D"
    },
    "597": {
      "fn": "CallReceiverMock.mockFunctionOutOfGas",
      "offset": [
        910,
        976
      ],
      "op": "JUMP",
      "path": "59"
    },
    "598": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        988,
        1117
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "599": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "PUSH1",
      "path": "59",
      "statement": 6,
      "value": "0x40"
    },
    "601": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "DUP1",
      "path": "59"
    },
    "602": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "MLOAD",
      "path": "59"
    },
    "603": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "DUP1",
      "path": "59"
    },
    "604": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "DUP3",
      "path": "59"
    },
    "605": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "ADD",
      "path": "59"
    },
    "606": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "607": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "SWAP2",
      "path": "59"
    },
    "608": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "609": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x2"
    },
    "611": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "DUP1",
      "path": "59"
    },
    "612": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "DUP3",
      "path": "59"
    },
    "613": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "614": {
      "op": "PUSH2",
      "value": "0x1A19"
    },
    "617": {
      "op": "PUSH1",
      "value": "0xF1"
    },
    "619": {
      "op": "SHL"
    },
    "620": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x20"
    },
    "622": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "623": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "SWAP3",
      "path": "59"
    },
    "624": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "ADD",
      "path": "59"
    },
    "625": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "SWAP2",
      "path": "59"
    },
    "626": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "DUP3",
      "path": "59"
    },
    "627": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "628": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1041,
        1054
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x60"
    },
    "630": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1041,
        1054
      ],
      "op": "SWAP2",
      "path": "59"
    },
    "631": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x283"
    },
    "634": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "SWAP2",
      "path": "59"
    },
    "635": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "637": {
      "op": "SWAP2"
    },
    "638": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "639": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x353"
    },
    "642": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "jump": "i",
      "offset": [
        1066,
        1085
      ],
      "op": "JUMP",
      "path": "59"
    },
    "643": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1066,
        1085
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "644": {
      "op": "POP"
    },
    "645": {
      "op": "POP"
    },
    "646": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1095,
        1110
      ],
      "op": "PUSH1",
      "path": "59",
      "statement": 7,
      "value": "0x40"
    },
    "648": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1095,
        1110
      ],
      "op": "DUP1",
      "path": "59"
    },
    "649": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1095,
        1110
      ],
      "op": "MLOAD",
      "path": "59"
    },
    "650": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1095,
        1110
      ],
      "op": "DUP1",
      "path": "59"
    },
    "651": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1095,
        1110
      ],
      "op": "DUP3",
      "path": "59"
    },
    "652": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1095,
        1110
      ],
      "op": "ADD",
      "path": "59"
    },
    "653": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1095,
        1110
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "654": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1095,
        1110
      ],
      "op": "SWAP2",
      "path": "59"
    },
    "655": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1095,
        1110
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "656": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1095,
        1110
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x6"
    },
    "658": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1095,
        1110
      ],
      "op": "DUP2",
      "path": "59"
    },
    "659": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1095,
        1110
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "660": {
      "op": "PUSH6",
      "value": "0xC1E0C4C8CCD"
    },
    "667": {
      "op": "PUSH1",
      "value": "0xD2"
    },
    "669": {
      "op": "SHL"
    },
    "670": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1095,
        1110
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x20"
    },
    "672": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1095,
        1110
      ],
      "op": "DUP3",
      "path": "59"
    },
    "673": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1095,
        1110
      ],
      "op": "ADD",
      "path": "59"
    },
    "674": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        1095,
        1110
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "675": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "offset": [
        988,
        1117
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "676": {
      "fn": "CallReceiverMock.mockFunctionWritesStorage",
      "jump": "o",
      "offset": [
        988,
        1117
      ],
      "op": "JUMP",
      "path": "59"
    },
    "677": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        471,
        569
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "678": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        547,
        562
      ],
      "op": "PUSH1",
      "path": "59",
      "statement": 8,
      "value": "0x40"
    },
    "680": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        547,
        562
      ],
      "op": "DUP1",
      "path": "59"
    },
    "681": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        547,
        562
      ],
      "op": "MLOAD",
      "path": "59"
    },
    "682": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        547,
        562
      ],
      "op": "DUP1",
      "path": "59"
    },
    "683": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        547,
        562
      ],
      "op": "DUP3",
      "path": "59"
    },
    "684": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        547,
        562
      ],
      "op": "ADD",
      "path": "59"
    },
    "685": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        547,
        562
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "686": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        547,
        562
      ],
      "op": "SWAP2",
      "path": "59"
    },
    "687": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        547,
        562
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "688": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        547,
        562
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x6"
    },
    "690": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        547,
        562
      ],
      "op": "DUP2",
      "path": "59"
    },
    "691": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        547,
        562
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "692": {
      "op": "PUSH6",
      "value": "0xC1E0C4C8CCD"
    },
    "699": {
      "op": "PUSH1",
      "value": "0xD2"
    },
    "701": {
      "op": "SHL"
    },
    "702": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        547,
        562
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x20"
    },
    "704": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        547,
        562
      ],
      "op": "DUP3",
      "path": "59"
    },
    "705": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        547,
        562
      ],
      "op": "ADD",
      "path": "59"
    },
    "706": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        547,
        562
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "707": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        471,
        569
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "708": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "jump": "o",
      "offset": [
        471,
        569
      ],
      "op": "JUMP",
      "path": "59"
    },
    "709": {
      "offset": [
        98,
        124
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "710": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x0"
    },
    "712": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP1",
      "path": "59"
    },
    "713": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SLOAD",
      "path": "59"
    },
    "714": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x40"
    },
    "716": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP1",
      "path": "59"
    },
    "717": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "MLOAD",
      "path": "59"
    },
    "718": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x20"
    },
    "720": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x2"
    },
    "722": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x1"
    },
    "724": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP6",
      "path": "59"
    },
    "725": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "AND",
      "path": "59"
    },
    "726": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "ISZERO",
      "path": "59"
    },
    "727": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x100"
    },
    "730": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "MUL",
      "path": "59"
    },
    "731": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "733": {
      "op": "NOT"
    },
    "734": {
      "offset": [
        98,
        124
      ],
      "op": "ADD",
      "path": "59"
    },
    "735": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "736": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SWAP5",
      "path": "59"
    },
    "737": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "AND",
      "path": "59"
    },
    "738": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SWAP4",
      "path": "59"
    },
    "739": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "740": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SWAP4",
      "path": "59"
    },
    "741": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DIV",
      "path": "59"
    },
    "742": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x1F"
    },
    "744": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP2",
      "path": "59"
    },
    "745": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "ADD",
      "path": "59"
    },
    "746": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP5",
      "path": "59"
    },
    "747": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "748": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DIV",
      "path": "59"
    },
    "749": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP5",
      "path": "59"
    },
    "750": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "MUL",
      "path": "59"
    },
    "751": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP3",
      "path": "59"
    },
    "752": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "ADD",
      "path": "59"
    },
    "753": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP5",
      "path": "59"
    },
    "754": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "ADD",
      "path": "59"
    },
    "755": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "756": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SWAP3",
      "path": "59"
    },
    "757": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "758": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP2",
      "path": "59"
    },
    "759": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP2",
      "path": "59"
    },
    "760": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "761": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SWAP3",
      "path": "59"
    },
    "762": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SWAP2",
      "path": "59"
    },
    "763": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP4",
      "path": "59"
    },
    "764": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "ADD",
      "path": "59"
    },
    "765": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP3",
      "path": "59"
    },
    "766": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP3",
      "path": "59"
    },
    "767": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP1",
      "path": "59"
    },
    "768": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "ISZERO",
      "path": "59"
    },
    "769": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x34B"
    },
    "772": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "773": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP1",
      "path": "59"
    },
    "774": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x1F"
    },
    "776": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "LT",
      "path": "59"
    },
    "777": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x320"
    },
    "780": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "781": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x100"
    },
    "784": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP1",
      "path": "59"
    },
    "785": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP4",
      "path": "59"
    },
    "786": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SLOAD",
      "path": "59"
    },
    "787": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DIV",
      "path": "59"
    },
    "788": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "MUL",
      "path": "59"
    },
    "789": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP4",
      "path": "59"
    },
    "790": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "791": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SWAP2",
      "path": "59"
    },
    "792": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x20"
    },
    "794": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "ADD",
      "path": "59"
    },
    "795": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SWAP2",
      "path": "59"
    },
    "796": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x34B"
    },
    "799": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "JUMP",
      "path": "59"
    },
    "800": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "801": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP3",
      "path": "59"
    },
    "802": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "ADD",
      "path": "59"
    },
    "803": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SWAP2",
      "path": "59"
    },
    "804": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "805": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x0"
    },
    "807": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "808": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x20"
    },
    "810": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x0"
    },
    "812": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "KECCAK256",
      "path": "59"
    },
    "813": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "814": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "815": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP2",
      "path": "59"
    },
    "816": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SLOAD",
      "path": "59"
    },
    "817": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP2",
      "path": "59"
    },
    "818": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "MSTORE",
      "path": "59"
    },
    "819": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "820": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x1"
    },
    "822": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "ADD",
      "path": "59"
    },
    "823": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "824": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x20"
    },
    "826": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "ADD",
      "path": "59"
    },
    "827": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP1",
      "path": "59"
    },
    "828": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP4",
      "path": "59"
    },
    "829": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "GT",
      "path": "59"
    },
    "830": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH2",
      "path": "59",
      "value": "0x32E"
    },
    "833": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "JUMPI",
      "path": "59"
    },
    "834": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP3",
      "path": "59"
    },
    "835": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SWAP1",
      "path": "59"
    },
    "836": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SUB",
      "path": "59"
    },
    "837": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "PUSH1",
      "path": "59",
      "value": "0x1F"
    },
    "839": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "AND",
      "path": "59"
    },
    "840": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP3",
      "path": "59"
    },
    "841": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "ADD",
      "path": "59"
    },
    "842": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "SWAP2",
      "path": "59"
    },
    "843": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "JUMPDEST",
      "path": "59"
    },
    "844": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "POP",
      "path": "59"
    },
    "845": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "POP",
      "path": "59"
    },
    "846": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "POP",
      "path": "59"
    },
    "847": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "POP",
      "path": "59"
    },
    "848": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "POP",
      "path": "59"
    },
    "849": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "offset": [
        98,
        124
      ],
      "op": "DUP2",
      "path": "59"
    },
    "850": {
      "fn": "CallReceiverMock.mockStaticFunction",
      "jump": "o",
      "offset": [
        98,
        124
      ],
      "op": "JUMP",
      "path": "59"
    },
    "851": {
      "op": "JUMPDEST"
    },
    "852": {
      "op": "DUP3"
    },
    "853": {
      "op": "DUP1"
    },
    "854": {
      "op": "SLOAD"
    },
    "855": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "857": {
      "op": "DUP2"
    },
    "858": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "860": {
      "op": "AND"
    },
    "861": {
      "op": "ISZERO"
    },
    "862": {
      "op": "PUSH2",
      "value": "0x100"
    },
    "865": {
      "op": "MUL"
    },
    "866": {
      "op": "SUB"
    },
    "867": {
      "op": "AND"
    },
    "868": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "870": {
      "op": "SWAP1"
    },
    "871": {
      "op": "DIV"
    },
    "872": {
      "op": "SWAP1"
    },
    "873": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "875": {
      "op": "MSTORE"
    },
    "876": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "878": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "880": {
      "op": "KECCAK256"
    },
    "881": {
      "op": "SWAP1"
    },
    "882": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "884": {
      "op": "ADD"
    },
    "885": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "887": {
      "op": "SWAP1"
    },
    "888": {
      "op": "DIV"
    },
    "889": {
      "op": "DUP2"
    },
    "890": {
      "op": "ADD"
    },
    "891": {
      "op": "SWAP3"
    },
    "892": {
      "op": "DUP3"
    },
    "893": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "895": {
      "op": "LT"
    },
    "896": {
      "op": "PUSH2",
      "value": "0x394"
    },
    "899": {
      "op": "JUMPI"
    },
    "900": {
      "op": "DUP1"
    },
    "901": {
      "op": "MLOAD"
    },
    "902": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "904": {
      "op": "NOT"
    },
    "905": {
      "op": "AND"
    },
    "906": {
      "op": "DUP4"
    },
    "907": {
      "op": "DUP1"
    },
    "908": {
      "op": "ADD"
    },
    "909": {
      "op": "OR"
    },
    "910": {
      "op": "DUP6"
    },
    "911": {
      "op": "SSTORE"
    },
    "912": {
      "op": "PUSH2",
      "value": "0x3C1"
    },
    "915": {
      "op": "JUMP"
    },
    "916": {
      "op": "JUMPDEST"
    },
    "917": {
      "op": "DUP3"
    },
    "918": {
      "op": "DUP1"
    },
    "919": {
      "op": "ADD"
    },
    "920": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "922": {
      "op": "ADD"
    },
    "923": {
      "op": "DUP6"
    },
    "924": {
      "op": "SSTORE"
    },
    "925": {
      "op": "DUP3"
    },
    "926": {
      "op": "ISZERO"
    },
    "927": {
      "op": "PUSH2",
      "value": "0x3C1"
    },
    "930": {
      "op": "JUMPI"
    },
    "931": {
      "op": "SWAP2"
    },
    "932": {
      "op": "DUP3"
    },
    "933": {
      "op": "ADD"
    },
    "934": {
      "op": "JUMPDEST"
    },
    "935": {
      "op": "DUP3"
    },
    "936": {
      "op": "DUP2"
    },
    "937": {
      "op": "GT"
    },
    "938": {
      "op": "ISZERO"
    },
    "939": {
      "op": "PUSH2",
      "value": "0x3C1"
    },
    "942": {
      "op": "JUMPI"
    },
    "943": {
      "op": "DUP3"
    },
    "944": {
      "op": "MLOAD"
    },
    "945": {
      "op": "DUP3"
    },
    "946": {
      "op": "SSTORE"
    },
    "947": {
      "op": "SWAP2"
    },
    "948": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "950": {
      "op": "ADD"
    },
    "951": {
      "op": "SWAP2"
    },
    "952": {
      "op": "SWAP1"
    },
    "953": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "955": {
      "op": "ADD"
    },
    "956": {
      "op": "SWAP1"
    },
    "957": {
      "op": "PUSH2",
      "value": "0x3A6"
    },
    "960": {
      "op": "JUMP"
    },
    "961": {
      "op": "JUMPDEST"
    },
    "962": {
      "op": "POP"
    },
    "963": {
      "op": "PUSH2",
      "value": "0x3CD"
    },
    "966": {
      "op": "SWAP3"
    },
    "967": {
      "op": "SWAP2"
    },
    "968": {
      "op": "POP"
    },
    "969": {
      "op": "PUSH2",
      "value": "0x3D1"
    },
    "972": {
      "op": "JUMP"
    },
    "973": {
      "op": "JUMPDEST"
    },
    "974": {
      "op": "POP"
    },
    "975": {
      "op": "SWAP1"
    },
    "976": {
      "op": "JUMP"
    },
    "977": {
      "op": "JUMPDEST"
    },
    "978": {
      "op": "JUMPDEST"
    },
    "979": {
      "op": "DUP1"
    },
    "980": {
      "op": "DUP3"
    },
    "981": {
      "op": "GT"
    },
    "982": {
      "op": "ISZERO"
    },
    "983": {
      "op": "PUSH2",
      "value": "0x3CD"
    },
    "986": {
      "op": "JUMPI"
    },
    "987": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "989": {
      "op": "DUP2"
    },
    "990": {
      "op": "SSTORE"
    },
    "991": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "993": {
      "op": "ADD"
    },
    "994": {
      "op": "PUSH2",
      "value": "0x3D2"
    },
    "997": {
      "op": "JUMP"
    }
  },
  "sha1": "8ba559e40b2dde2c7629e35513dd981b218fbe9f",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\ncontract CallReceiverMock {\n    string public sharedAnswer;\n\n    event MockFunctionCalled();\n\n    uint256[] private _array;\n\n    function mockFunction() public payable returns (string memory) {\n        emit MockFunctionCalled();\n\n        return \"0x1234\";\n    }\n\n    function mockFunctionNonPayable() public returns (string memory) {\n        emit MockFunctionCalled();\n\n        return \"0x1234\";\n    }\n\n    function mockStaticFunction() public pure returns (string memory) {\n        return \"0x1234\";\n    }\n\n    function mockFunctionRevertsNoReason() public payable {\n        revert();\n    }\n\n    function mockFunctionRevertsReason() public payable {\n        revert(\"CallReceiverMock: reverting\");\n    }\n\n    function mockFunctionThrows() public payable {\n        assert(false);\n    }\n\n    function mockFunctionOutOfGas() public payable {\n        for (uint256 i = 0; ; ++i) {\n            _array.push(i);\n        }\n    }\n\n    function mockFunctionWritesStorage() public returns (string memory) {\n        sharedAnswer = \"42\";\n        return \"0x1234\";\n    }\n}\n",
  "sourceMap": "66:1053:59:-:0;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/openzeppelin/mocks/CallReceiverMock.sol",
  "type": "contract"
}