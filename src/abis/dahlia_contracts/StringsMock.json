{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "fromUint256",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "128": "contracts/openzeppelin/utils/Strings.sol",
    "79": "contracts/openzeppelin/mocks/StringsMock.sol"
  },
  "ast": {
    "absolutePath": "contracts/openzeppelin/mocks/StringsMock.sol",
    "exportedSymbols": {
      "StringsMock": [
        6810
      ]
    },
    "id": 6811,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 6795,
        "literals": [
          "solidity",
          ">=",
          "0.6",
          ".0",
          "<",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:31:79"
      },
      {
        "absolutePath": "contracts/openzeppelin/utils/Strings.sol",
        "file": "../utils/Strings.sol",
        "id": 6796,
        "nodeType": "ImportDirective",
        "scope": 6811,
        "sourceUnit": 16237,
        "src": "66:30:79",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 6810,
        "linearizedBaseContracts": [
          6810
        ],
        "name": "StringsMock",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 6808,
              "nodeType": "Block",
              "src": "197:47:79",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 6805,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6798,
                        "src": "231:5:79",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 6803,
                        "name": "Strings",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 16236,
                        "src": "214:7:79",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_Strings_$16236_$",
                          "typeString": "type(library Strings)"
                        }
                      },
                      "id": 6804,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "toString",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 16235,
                      "src": "214:16:79",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                        "typeString": "function (uint256) pure returns (string memory)"
                      }
                    },
                    "id": 6806,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "214:23:79",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "functionReturnParameters": 6802,
                  "id": 6807,
                  "nodeType": "Return",
                  "src": "207:30:79"
                }
              ]
            },
            "documentation": null,
            "functionSelector": "a2bd3644",
            "id": 6809,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "fromUint256",
            "nodeType": "FunctionDefinition",
            "overrides": null,
            "parameters": {
              "id": 6799,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6798,
                  "mutability": "mutable",
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 6809,
                  "src": "146:13:79",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 6797,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "146:7:79",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "145:15:79"
            },
            "returnParameters": {
              "id": 6802,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 6801,
                  "mutability": "mutable",
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "overrides": null,
                  "scope": 6809,
                  "src": "182:13:79",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 6800,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "182:6:79",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "181:15:79"
            },
            "scope": 6810,
            "src": "125:119:79",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 6811,
        "src": "98:148:79"
      }
    ],
    "src": "33:214:79"
  },
  "bytecode": "608060405234801561001057600080fd5b506101e6806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a2bd364414610030575b600080fd5b61004d6004803603602081101561004657600080fd5b50356100c2565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561008757818101518382015260200161006f565b50505050905090810190601f1680156100b45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60606100cd826100d5565b90505b919050565b6060816100fa57506040805180820190915260018152600360fc1b60208201526100d0565b8160005b811561011257600101600a820491506100fe565b60608167ffffffffffffffff8111801561012b57600080fd5b506040519080825280601f01601f191660200182016040528015610156576020820181803683370190505b50859350905060001982015b83156101a757600a840660300160f81b8282806001900393508151811061018557fe5b60200101906001600160f81b031916908160001a905350600a84049350610162565b5094935050505056fea26469706673582212203dac11e306ae9373963cff831ed87f72a0dda8318c4c6ca292f6e8fada7a7a3064736f6c634300060c0033",
  "bytecodeSha1": "3ff5277b322549714b09f639e38cb196757df787",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.6.12+commit.27d51765"
  },
  "contractName": "StringsMock",
  "coverageMap": {
    "branches": {
      "128": {
        "Strings.toString": {
          "8": [
            483,
            493,
            false
          ]
        }
      },
      "79": {}
    },
    "statements": {
      "128": {
        "Strings.toString": {
          "1": [
            509,
            519
          ],
          "2": [
            625,
            633
          ],
          "3": [
            647,
            657
          ],
          "4": [
            762,
            774
          ],
          "5": [
            816,
            863
          ],
          "6": [
            877,
            887
          ],
          "7": [
            907,
            928
          ]
        }
      },
      "79": {
        "StringsMock.fromUint256": {
          "0": [
            207,
            237
          ]
        }
      }
    }
  },
  "dependencies": [
    "Strings"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a2bd364414610030575b600080fd5b61004d6004803603602081101561004657600080fd5b50356100c2565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561008757818101518382015260200161006f565b50505050905090810190601f1680156100b45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60606100cd826100d5565b90505b919050565b6060816100fa57506040805180820190915260018152600360fc1b60208201526100d0565b8160005b811561011257600101600a820491506100fe565b60608167ffffffffffffffff8111801561012b57600080fd5b506040519080825280601f01601f191660200182016040528015610156576020820181803683370190505b50859350905060001982015b83156101a757600a840660300160f81b8282806001900393508151811061018557fe5b60200101906001600160f81b031916908160001a905350600a84049350610162565b5094935050505056fea26469706673582212203dac11e306ae9373963cff831ed87f72a0dda8318c4c6ca292f6e8fada7a7a3064736f6c634300060c0033",
  "deployedSourceMap": "98:148:79:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;125:119;;;;;;;;;;;;;;;;-1:-1:-1;125:119:79;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;182:13;214:23;231:5;214:16;:23::i;:::-;207:30;;125:119;;;;:::o;210:725:128:-;266:13;483:10;479:51;;-1:-1:-1;509:10:128;;;;;;;;;;;;-1:-1:-1;;;509:10:128;;;;;;479:51;554:5;539:12;593:75;600:9;;593:75;;625:8;;655:2;647:10;;;;593:75;;;677:19;709:6;699:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;699:17:128;-1:-1:-1;769:5:128;;-1:-1:-1;677:39:128;-1:-1:-1;;;742:10:128;;784:114;791:9;;784:114;;859:2;852:4;:9;847:2;:14;834:29;;816:6;823:7;;;;;;;816:15;;;;;;;;;;;:47;-1:-1:-1;;;;;816:47:128;;;;;;;;-1:-1:-1;885:2:128;877:10;;;;784:114;;;-1:-1:-1;921:6:128;210:725;-1:-1:-1;;;;210:725:128:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    98,
    246
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA2BD3644 EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4D PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x46 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 0xC2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x87 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x6F JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xB4 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH2 0xCD DUP3 PUSH2 0xD5 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH2 0xFA JUMPI POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x1 DUP2 MSTORE PUSH1 0x3 PUSH1 0xFC SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0xD0 JUMP JUMPDEST DUP2 PUSH1 0x0 JUMPDEST DUP2 ISZERO PUSH2 0x112 JUMPI PUSH1 0x1 ADD PUSH1 0xA DUP3 DIV SWAP2 POP PUSH2 0xFE JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP1 ISZERO PUSH2 0x12B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x156 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP DUP6 SWAP4 POP SWAP1 POP PUSH1 0x0 NOT DUP3 ADD JUMPDEST DUP4 ISZERO PUSH2 0x1A7 JUMPI PUSH1 0xA DUP5 MOD PUSH1 0x30 ADD PUSH1 0xF8 SHL DUP3 DUP3 DUP1 PUSH1 0x1 SWAP1 SUB SWAP4 POP DUP2 MLOAD DUP2 LT PUSH2 0x185 JUMPI INVALID JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xA DUP5 DIV SWAP4 POP PUSH2 0x162 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURNDATASIZE 0xAC GT 0xE3 MOD 0xAE SWAP4 PUSH20 0x963CFF831ED87F72A0DDA8318C4C6CA292F6E8FA 0xDA PUSH27 0x7A3064736F6C634300060C00330000000000000000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        98,
        246
      ],
      "op": "PUSH1",
      "path": "79",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "PUSH1",
      "path": "79",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "MSTORE",
      "path": "79"
    },
    "5": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "CALLVALUE",
      "path": "79"
    },
    "6": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "DUP1",
      "path": "79"
    },
    "7": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "ISZERO",
      "path": "79"
    },
    "8": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "PUSH2",
      "path": "79",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "JUMPI",
      "path": "79"
    },
    "12": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "PUSH1",
      "path": "79",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "DUP1",
      "path": "79"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "REVERT",
      "path": "79"
    },
    "16": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "JUMPDEST",
      "path": "79"
    },
    "17": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "POP",
      "path": "79"
    },
    "18": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "PUSH1",
      "path": "79",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "CALLDATASIZE",
      "path": "79"
    },
    "21": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "LT",
      "path": "79"
    },
    "22": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "PUSH2",
      "path": "79",
      "value": "0x2B"
    },
    "25": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "JUMPI",
      "path": "79"
    },
    "26": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "PUSH1",
      "path": "79",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "CALLDATALOAD",
      "path": "79"
    },
    "29": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "PUSH1",
      "path": "79",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "SHR",
      "path": "79"
    },
    "32": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "DUP1",
      "path": "79"
    },
    "33": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "PUSH4",
      "path": "79",
      "value": "0xA2BD3644"
    },
    "38": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "EQ",
      "path": "79"
    },
    "39": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "PUSH2",
      "path": "79",
      "value": "0x30"
    },
    "42": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "JUMPI",
      "path": "79"
    },
    "43": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "JUMPDEST",
      "path": "79"
    },
    "44": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "PUSH1",
      "path": "79",
      "value": "0x0"
    },
    "46": {
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "DUP1",
      "path": "79"
    },
    "47": {
      "first_revert": true,
      "fn": null,
      "offset": [
        98,
        246
      ],
      "op": "REVERT",
      "path": "79"
    },
    "48": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "JUMPDEST",
      "path": "79"
    },
    "49": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "PUSH2",
      "path": "79",
      "value": "0x4D"
    },
    "52": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "PUSH1",
      "path": "79",
      "value": "0x4"
    },
    "54": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP1",
      "path": "79"
    },
    "55": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "CALLDATASIZE",
      "path": "79"
    },
    "56": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "SUB",
      "path": "79"
    },
    "57": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "PUSH1",
      "path": "79",
      "value": "0x20"
    },
    "59": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP2",
      "path": "79"
    },
    "60": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "LT",
      "path": "79"
    },
    "61": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "ISZERO",
      "path": "79"
    },
    "62": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "PUSH2",
      "path": "79",
      "value": "0x46"
    },
    "65": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "JUMPI",
      "path": "79"
    },
    "66": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "PUSH1",
      "path": "79",
      "value": "0x0"
    },
    "68": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP1",
      "path": "79"
    },
    "69": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "REVERT",
      "path": "79"
    },
    "70": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "JUMPDEST",
      "path": "79"
    },
    "71": {
      "op": "POP"
    },
    "72": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "CALLDATALOAD",
      "path": "79"
    },
    "73": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "PUSH2",
      "path": "79",
      "value": "0xC2"
    },
    "76": {
      "fn": "StringsMock.fromUint256",
      "jump": "i",
      "offset": [
        125,
        244
      ],
      "op": "JUMP",
      "path": "79"
    },
    "77": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "JUMPDEST",
      "path": "79"
    },
    "78": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "PUSH1",
      "path": "79",
      "value": "0x40"
    },
    "80": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP1",
      "path": "79"
    },
    "81": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "MLOAD",
      "path": "79"
    },
    "82": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "PUSH1",
      "path": "79",
      "value": "0x20"
    },
    "84": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP1",
      "path": "79"
    },
    "85": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP3",
      "path": "79"
    },
    "86": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "MSTORE",
      "path": "79"
    },
    "87": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP4",
      "path": "79"
    },
    "88": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "MLOAD",
      "path": "79"
    },
    "89": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP2",
      "path": "79"
    },
    "90": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP4",
      "path": "79"
    },
    "91": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "ADD",
      "path": "79"
    },
    "92": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "MSTORE",
      "path": "79"
    },
    "93": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP4",
      "path": "79"
    },
    "94": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "MLOAD",
      "path": "79"
    },
    "95": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "SWAP2",
      "path": "79"
    },
    "96": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "SWAP3",
      "path": "79"
    },
    "97": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP4",
      "path": "79"
    },
    "98": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "SWAP3",
      "path": "79"
    },
    "99": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "SWAP1",
      "path": "79"
    },
    "100": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP4",
      "path": "79"
    },
    "101": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "ADD",
      "path": "79"
    },
    "102": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "SWAP2",
      "path": "79"
    },
    "103": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP6",
      "path": "79"
    },
    "104": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "ADD",
      "path": "79"
    },
    "105": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "SWAP1",
      "path": "79"
    },
    "106": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP1",
      "path": "79"
    },
    "107": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP4",
      "path": "79"
    },
    "108": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP4",
      "path": "79"
    },
    "109": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "PUSH1",
      "path": "79",
      "value": "0x0"
    },
    "111": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "JUMPDEST",
      "path": "79"
    },
    "112": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP4",
      "path": "79"
    },
    "113": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP2",
      "path": "79"
    },
    "114": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "LT",
      "path": "79"
    },
    "115": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "ISZERO",
      "path": "79"
    },
    "116": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "PUSH2",
      "path": "79",
      "value": "0x87"
    },
    "119": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "JUMPI",
      "path": "79"
    },
    "120": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP2",
      "path": "79"
    },
    "121": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP2",
      "path": "79"
    },
    "122": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "ADD",
      "path": "79"
    },
    "123": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "MLOAD",
      "path": "79"
    },
    "124": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP4",
      "path": "79"
    },
    "125": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP3",
      "path": "79"
    },
    "126": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "ADD",
      "path": "79"
    },
    "127": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "MSTORE",
      "path": "79"
    },
    "128": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "PUSH1",
      "path": "79",
      "value": "0x20"
    },
    "130": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "ADD",
      "path": "79"
    },
    "131": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "PUSH2",
      "path": "79",
      "value": "0x6F"
    },
    "134": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "JUMP",
      "path": "79"
    },
    "135": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "JUMPDEST",
      "path": "79"
    },
    "136": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "POP",
      "path": "79"
    },
    "137": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "POP",
      "path": "79"
    },
    "138": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "POP",
      "path": "79"
    },
    "139": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "POP",
      "path": "79"
    },
    "140": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "SWAP1",
      "path": "79"
    },
    "141": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "POP",
      "path": "79"
    },
    "142": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "SWAP1",
      "path": "79"
    },
    "143": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP2",
      "path": "79"
    },
    "144": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "ADD",
      "path": "79"
    },
    "145": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "SWAP1",
      "path": "79"
    },
    "146": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "PUSH1",
      "path": "79",
      "value": "0x1F"
    },
    "148": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "AND",
      "path": "79"
    },
    "149": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP1",
      "path": "79"
    },
    "150": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "ISZERO",
      "path": "79"
    },
    "151": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "PUSH2",
      "path": "79",
      "value": "0xB4"
    },
    "154": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "JUMPI",
      "path": "79"
    },
    "155": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP1",
      "path": "79"
    },
    "156": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP3",
      "path": "79"
    },
    "157": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "SUB",
      "path": "79"
    },
    "158": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP1",
      "path": "79"
    },
    "159": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "MLOAD",
      "path": "79"
    },
    "160": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "PUSH1",
      "path": "79",
      "value": "0x1"
    },
    "162": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP4",
      "path": "79"
    },
    "163": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "PUSH1",
      "path": "79",
      "value": "0x20"
    },
    "165": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "SUB",
      "path": "79"
    },
    "166": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "PUSH2",
      "path": "79",
      "value": "0x100"
    },
    "169": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "EXP",
      "path": "79"
    },
    "170": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "SUB",
      "path": "79"
    },
    "171": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "NOT",
      "path": "79"
    },
    "172": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "AND",
      "path": "79"
    },
    "173": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP2",
      "path": "79"
    },
    "174": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "MSTORE",
      "path": "79"
    },
    "175": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "PUSH1",
      "path": "79",
      "value": "0x20"
    },
    "177": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "ADD",
      "path": "79"
    },
    "178": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "SWAP2",
      "path": "79"
    },
    "179": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "POP",
      "path": "79"
    },
    "180": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "JUMPDEST",
      "path": "79"
    },
    "181": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "POP",
      "path": "79"
    },
    "182": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "SWAP3",
      "path": "79"
    },
    "183": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "POP",
      "path": "79"
    },
    "184": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "POP",
      "path": "79"
    },
    "185": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "POP",
      "path": "79"
    },
    "186": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "PUSH1",
      "path": "79",
      "value": "0x40"
    },
    "188": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "MLOAD",
      "path": "79"
    },
    "189": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "DUP1",
      "path": "79"
    },
    "190": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "SWAP2",
      "path": "79"
    },
    "191": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "SUB",
      "path": "79"
    },
    "192": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "SWAP1",
      "path": "79"
    },
    "193": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "RETURN",
      "path": "79"
    },
    "194": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "JUMPDEST",
      "path": "79"
    },
    "195": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        182,
        195
      ],
      "op": "PUSH1",
      "path": "79",
      "value": "0x60"
    },
    "197": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        214,
        237
      ],
      "op": "PUSH2",
      "path": "79",
      "statement": 0,
      "value": "0xCD"
    },
    "200": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        231,
        236
      ],
      "op": "DUP3",
      "path": "79"
    },
    "201": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        214,
        230
      ],
      "op": "PUSH2",
      "path": "79",
      "value": "0xD5"
    },
    "204": {
      "fn": "StringsMock.fromUint256",
      "jump": "i",
      "offset": [
        214,
        237
      ],
      "op": "JUMP",
      "path": "79"
    },
    "205": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        214,
        237
      ],
      "op": "JUMPDEST",
      "path": "79"
    },
    "206": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        207,
        237
      ],
      "op": "SWAP1",
      "path": "79"
    },
    "207": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        207,
        237
      ],
      "op": "POP",
      "path": "79"
    },
    "208": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "JUMPDEST",
      "path": "79"
    },
    "209": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "SWAP2",
      "path": "79"
    },
    "210": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "SWAP1",
      "path": "79"
    },
    "211": {
      "fn": "StringsMock.fromUint256",
      "offset": [
        125,
        244
      ],
      "op": "POP",
      "path": "79"
    },
    "212": {
      "fn": "StringsMock.fromUint256",
      "jump": "o",
      "offset": [
        125,
        244
      ],
      "op": "JUMP",
      "path": "79"
    },
    "213": {
      "fn": "Strings.toString",
      "offset": [
        210,
        935
      ],
      "op": "JUMPDEST",
      "path": "128"
    },
    "214": {
      "fn": "Strings.toString",
      "offset": [
        266,
        279
      ],
      "op": "PUSH1",
      "path": "128",
      "value": "0x60"
    },
    "216": {
      "branch": 8,
      "fn": "Strings.toString",
      "offset": [
        483,
        493
      ],
      "op": "DUP2",
      "path": "128"
    },
    "217": {
      "fn": "Strings.toString",
      "offset": [
        479,
        530
      ],
      "op": "PUSH2",
      "path": "128",
      "value": "0xFA"
    },
    "220": {
      "branch": 8,
      "fn": "Strings.toString",
      "offset": [
        479,
        530
      ],
      "op": "JUMPI",
      "path": "128"
    },
    "221": {
      "op": "POP"
    },
    "222": {
      "fn": "Strings.toString",
      "offset": [
        509,
        519
      ],
      "op": "PUSH1",
      "path": "128",
      "statement": 1,
      "value": "0x40"
    },
    "224": {
      "fn": "Strings.toString",
      "offset": [
        509,
        519
      ],
      "op": "DUP1",
      "path": "128"
    },
    "225": {
      "fn": "Strings.toString",
      "offset": [
        509,
        519
      ],
      "op": "MLOAD",
      "path": "128"
    },
    "226": {
      "fn": "Strings.toString",
      "offset": [
        509,
        519
      ],
      "op": "DUP1",
      "path": "128"
    },
    "227": {
      "fn": "Strings.toString",
      "offset": [
        509,
        519
      ],
      "op": "DUP3",
      "path": "128"
    },
    "228": {
      "fn": "Strings.toString",
      "offset": [
        509,
        519
      ],
      "op": "ADD",
      "path": "128"
    },
    "229": {
      "fn": "Strings.toString",
      "offset": [
        509,
        519
      ],
      "op": "SWAP1",
      "path": "128"
    },
    "230": {
      "fn": "Strings.toString",
      "offset": [
        509,
        519
      ],
      "op": "SWAP2",
      "path": "128"
    },
    "231": {
      "fn": "Strings.toString",
      "offset": [
        509,
        519
      ],
      "op": "MSTORE",
      "path": "128"
    },
    "232": {
      "fn": "Strings.toString",
      "offset": [
        509,
        519
      ],
      "op": "PUSH1",
      "path": "128",
      "value": "0x1"
    },
    "234": {
      "fn": "Strings.toString",
      "offset": [
        509,
        519
      ],
      "op": "DUP2",
      "path": "128"
    },
    "235": {
      "fn": "Strings.toString",
      "offset": [
        509,
        519
      ],
      "op": "MSTORE",
      "path": "128"
    },
    "236": {
      "op": "PUSH1",
      "value": "0x3"
    },
    "238": {
      "op": "PUSH1",
      "value": "0xFC"
    },
    "240": {
      "op": "SHL"
    },
    "241": {
      "fn": "Strings.toString",
      "offset": [
        509,
        519
      ],
      "op": "PUSH1",
      "path": "128",
      "value": "0x20"
    },
    "243": {
      "fn": "Strings.toString",
      "offset": [
        509,
        519
      ],
      "op": "DUP3",
      "path": "128"
    },
    "244": {
      "fn": "Strings.toString",
      "offset": [
        509,
        519
      ],
      "op": "ADD",
      "path": "128"
    },
    "245": {
      "fn": "Strings.toString",
      "offset": [
        509,
        519
      ],
      "op": "MSTORE",
      "path": "128"
    },
    "246": {
      "fn": "Strings.toString",
      "offset": [
        509,
        519
      ],
      "op": "PUSH2",
      "path": "128",
      "value": "0xD0"
    },
    "249": {
      "fn": "Strings.toString",
      "offset": [
        509,
        519
      ],
      "op": "JUMP",
      "path": "128"
    },
    "250": {
      "fn": "Strings.toString",
      "offset": [
        479,
        530
      ],
      "op": "JUMPDEST",
      "path": "128"
    },
    "251": {
      "fn": "Strings.toString",
      "offset": [
        554,
        559
      ],
      "op": "DUP2",
      "path": "128"
    },
    "252": {
      "fn": "Strings.toString",
      "offset": [
        539,
        551
      ],
      "op": "PUSH1",
      "path": "128",
      "value": "0x0"
    },
    "254": {
      "fn": "Strings.toString",
      "offset": [
        593,
        668
      ],
      "op": "JUMPDEST",
      "path": "128"
    },
    "255": {
      "fn": "Strings.toString",
      "offset": [
        600,
        609
      ],
      "op": "DUP2",
      "path": "128"
    },
    "256": {
      "fn": "Strings.toString",
      "offset": [
        600,
        609
      ],
      "op": "ISZERO",
      "path": "128"
    },
    "257": {
      "fn": "Strings.toString",
      "offset": [
        593,
        668
      ],
      "op": "PUSH2",
      "path": "128",
      "value": "0x112"
    },
    "260": {
      "fn": "Strings.toString",
      "offset": [
        593,
        668
      ],
      "op": "JUMPI",
      "path": "128"
    },
    "261": {
      "fn": "Strings.toString",
      "offset": [
        625,
        633
      ],
      "op": "PUSH1",
      "path": "128",
      "statement": 2,
      "value": "0x1"
    },
    "263": {
      "fn": "Strings.toString",
      "offset": [
        625,
        633
      ],
      "op": "ADD",
      "path": "128"
    },
    "264": {
      "fn": "Strings.toString",
      "offset": [
        655,
        657
      ],
      "op": "PUSH1",
      "path": "128",
      "statement": 3,
      "value": "0xA"
    },
    "266": {
      "fn": "Strings.toString",
      "offset": [
        647,
        657
      ],
      "op": "DUP3",
      "path": "128"
    },
    "267": {
      "fn": "Strings.toString",
      "offset": [
        647,
        657
      ],
      "op": "DIV",
      "path": "128"
    },
    "268": {
      "fn": "Strings.toString",
      "offset": [
        647,
        657
      ],
      "op": "SWAP2",
      "path": "128"
    },
    "269": {
      "fn": "Strings.toString",
      "offset": [
        647,
        657
      ],
      "op": "POP",
      "path": "128"
    },
    "270": {
      "fn": "Strings.toString",
      "offset": [
        593,
        668
      ],
      "op": "PUSH2",
      "path": "128",
      "value": "0xFE"
    },
    "273": {
      "fn": "Strings.toString",
      "offset": [
        593,
        668
      ],
      "op": "JUMP",
      "path": "128"
    },
    "274": {
      "fn": "Strings.toString",
      "offset": [
        593,
        668
      ],
      "op": "JUMPDEST",
      "path": "128"
    },
    "275": {
      "fn": "Strings.toString",
      "offset": [
        677,
        696
      ],
      "op": "PUSH1",
      "path": "128",
      "value": "0x60"
    },
    "277": {
      "fn": "Strings.toString",
      "offset": [
        709,
        715
      ],
      "op": "DUP2",
      "path": "128"
    },
    "278": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "PUSH8",
      "path": "128",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "287": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "DUP2",
      "path": "128"
    },
    "288": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "GT",
      "path": "128"
    },
    "289": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "DUP1",
      "path": "128"
    },
    "290": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "ISZERO",
      "path": "128"
    },
    "291": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "PUSH2",
      "path": "128",
      "value": "0x12B"
    },
    "294": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "JUMPI",
      "path": "128"
    },
    "295": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "PUSH1",
      "path": "128",
      "value": "0x0"
    },
    "297": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "DUP1",
      "path": "128"
    },
    "298": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "REVERT",
      "path": "128"
    },
    "299": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "JUMPDEST",
      "path": "128"
    },
    "300": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "POP",
      "path": "128"
    },
    "301": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "PUSH1",
      "path": "128",
      "value": "0x40"
    },
    "303": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "MLOAD",
      "path": "128"
    },
    "304": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "SWAP1",
      "path": "128"
    },
    "305": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "DUP1",
      "path": "128"
    },
    "306": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "DUP3",
      "path": "128"
    },
    "307": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "MSTORE",
      "path": "128"
    },
    "308": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "DUP1",
      "path": "128"
    },
    "309": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "PUSH1",
      "path": "128",
      "value": "0x1F"
    },
    "311": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "ADD",
      "path": "128"
    },
    "312": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "PUSH1",
      "path": "128",
      "value": "0x1F"
    },
    "314": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "NOT",
      "path": "128"
    },
    "315": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "AND",
      "path": "128"
    },
    "316": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "PUSH1",
      "path": "128",
      "value": "0x20"
    },
    "318": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "ADD",
      "path": "128"
    },
    "319": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "DUP3",
      "path": "128"
    },
    "320": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "ADD",
      "path": "128"
    },
    "321": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "PUSH1",
      "path": "128",
      "value": "0x40"
    },
    "323": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "MSTORE",
      "path": "128"
    },
    "324": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "DUP1",
      "path": "128"
    },
    "325": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "ISZERO",
      "path": "128"
    },
    "326": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "PUSH2",
      "path": "128",
      "value": "0x156"
    },
    "329": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "JUMPI",
      "path": "128"
    },
    "330": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "PUSH1",
      "path": "128",
      "value": "0x20"
    },
    "332": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "DUP3",
      "path": "128"
    },
    "333": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "ADD",
      "path": "128"
    },
    "334": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "DUP2",
      "path": "128"
    },
    "335": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "DUP1",
      "path": "128"
    },
    "336": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "CALLDATASIZE",
      "path": "128"
    },
    "337": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "DUP4",
      "path": "128"
    },
    "338": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "CALLDATACOPY",
      "path": "128"
    },
    "339": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "ADD",
      "path": "128"
    },
    "340": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "SWAP1",
      "path": "128"
    },
    "341": {
      "op": "POP"
    },
    "342": {
      "fn": "Strings.toString",
      "offset": [
        699,
        716
      ],
      "op": "JUMPDEST",
      "path": "128"
    },
    "343": {
      "op": "POP"
    },
    "344": {
      "fn": "Strings.toString",
      "offset": [
        769,
        774
      ],
      "op": "DUP6",
      "path": "128",
      "statement": 4
    },
    "345": {
      "fn": "Strings.toString",
      "offset": [
        769,
        774
      ],
      "op": "SWAP4",
      "path": "128"
    },
    "346": {
      "op": "POP"
    },
    "347": {
      "fn": "Strings.toString",
      "offset": [
        677,
        716
      ],
      "op": "SWAP1",
      "path": "128"
    },
    "348": {
      "op": "POP"
    },
    "349": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "351": {
      "op": "NOT"
    },
    "352": {
      "fn": "Strings.toString",
      "offset": [
        742,
        752
      ],
      "op": "DUP3",
      "path": "128"
    },
    "353": {
      "fn": "Strings.toString",
      "offset": [
        742,
        752
      ],
      "op": "ADD",
      "path": "128"
    },
    "354": {
      "fn": "Strings.toString",
      "offset": [
        784,
        898
      ],
      "op": "JUMPDEST",
      "path": "128"
    },
    "355": {
      "fn": "Strings.toString",
      "offset": [
        791,
        800
      ],
      "op": "DUP4",
      "path": "128"
    },
    "356": {
      "fn": "Strings.toString",
      "offset": [
        791,
        800
      ],
      "op": "ISZERO",
      "path": "128"
    },
    "357": {
      "fn": "Strings.toString",
      "offset": [
        784,
        898
      ],
      "op": "PUSH2",
      "path": "128",
      "value": "0x1A7"
    },
    "360": {
      "fn": "Strings.toString",
      "offset": [
        784,
        898
      ],
      "op": "JUMPI",
      "path": "128"
    },
    "361": {
      "fn": "Strings.toString",
      "offset": [
        859,
        861
      ],
      "op": "PUSH1",
      "path": "128",
      "statement": 5,
      "value": "0xA"
    },
    "363": {
      "fn": "Strings.toString",
      "offset": [
        852,
        856
      ],
      "op": "DUP5",
      "path": "128"
    },
    "364": {
      "fn": "Strings.toString",
      "offset": [
        852,
        861
      ],
      "op": "MOD",
      "path": "128"
    },
    "365": {
      "fn": "Strings.toString",
      "offset": [
        847,
        849
      ],
      "op": "PUSH1",
      "path": "128",
      "value": "0x30"
    },
    "367": {
      "fn": "Strings.toString",
      "offset": [
        847,
        861
      ],
      "op": "ADD",
      "path": "128"
    },
    "368": {
      "fn": "Strings.toString",
      "offset": [
        834,
        863
      ],
      "op": "PUSH1",
      "path": "128",
      "value": "0xF8"
    },
    "370": {
      "fn": "Strings.toString",
      "offset": [
        834,
        863
      ],
      "op": "SHL",
      "path": "128"
    },
    "371": {
      "fn": "Strings.toString",
      "offset": [
        816,
        822
      ],
      "op": "DUP3",
      "path": "128"
    },
    "372": {
      "fn": "Strings.toString",
      "offset": [
        823,
        830
      ],
      "op": "DUP3",
      "path": "128"
    },
    "373": {
      "fn": "Strings.toString",
      "offset": [
        823,
        830
      ],
      "op": "DUP1",
      "path": "128"
    },
    "374": {
      "fn": "Strings.toString",
      "offset": [
        823,
        830
      ],
      "op": "PUSH1",
      "path": "128",
      "value": "0x1"
    },
    "376": {
      "fn": "Strings.toString",
      "offset": [
        823,
        830
      ],
      "op": "SWAP1",
      "path": "128"
    },
    "377": {
      "fn": "Strings.toString",
      "offset": [
        823,
        830
      ],
      "op": "SUB",
      "path": "128"
    },
    "378": {
      "fn": "Strings.toString",
      "offset": [
        823,
        830
      ],
      "op": "SWAP4",
      "path": "128"
    },
    "379": {
      "fn": "Strings.toString",
      "offset": [
        823,
        830
      ],
      "op": "POP",
      "path": "128"
    },
    "380": {
      "fn": "Strings.toString",
      "offset": [
        816,
        831
      ],
      "op": "DUP2",
      "path": "128"
    },
    "381": {
      "fn": "Strings.toString",
      "offset": [
        816,
        831
      ],
      "op": "MLOAD",
      "path": "128"
    },
    "382": {
      "fn": "Strings.toString",
      "offset": [
        816,
        831
      ],
      "op": "DUP2",
      "path": "128"
    },
    "383": {
      "fn": "Strings.toString",
      "offset": [
        816,
        831
      ],
      "op": "LT",
      "path": "128"
    },
    "384": {
      "fn": "Strings.toString",
      "offset": [
        816,
        831
      ],
      "op": "PUSH2",
      "path": "128",
      "value": "0x185"
    },
    "387": {
      "fn": "Strings.toString",
      "offset": [
        816,
        831
      ],
      "op": "JUMPI",
      "path": "128"
    },
    "388": {
      "dev": "Index out of range",
      "fn": "Strings.toString",
      "offset": [
        816,
        831
      ],
      "op": "INVALID",
      "path": "128"
    },
    "389": {
      "fn": "Strings.toString",
      "offset": [
        816,
        831
      ],
      "op": "JUMPDEST",
      "path": "128"
    },
    "390": {
      "fn": "Strings.toString",
      "offset": [
        816,
        831
      ],
      "op": "PUSH1",
      "path": "128",
      "value": "0x20"
    },
    "392": {
      "fn": "Strings.toString",
      "offset": [
        816,
        831
      ],
      "op": "ADD",
      "path": "128"
    },
    "393": {
      "fn": "Strings.toString",
      "offset": [
        816,
        831
      ],
      "op": "ADD",
      "path": "128"
    },
    "394": {
      "fn": "Strings.toString",
      "offset": [
        816,
        863
      ],
      "op": "SWAP1",
      "path": "128"
    },
    "395": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "397": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "399": {
      "op": "PUSH1",
      "value": "0xF8"
    },
    "401": {
      "op": "SHL"
    },
    "402": {
      "op": "SUB"
    },
    "403": {
      "fn": "Strings.toString",
      "offset": [
        816,
        863
      ],
      "op": "NOT",
      "path": "128"
    },
    "404": {
      "fn": "Strings.toString",
      "offset": [
        816,
        863
      ],
      "op": "AND",
      "path": "128"
    },
    "405": {
      "fn": "Strings.toString",
      "offset": [
        816,
        863
      ],
      "op": "SWAP1",
      "path": "128"
    },
    "406": {
      "fn": "Strings.toString",
      "offset": [
        816,
        863
      ],
      "op": "DUP2",
      "path": "128"
    },
    "407": {
      "fn": "Strings.toString",
      "offset": [
        816,
        863
      ],
      "op": "PUSH1",
      "path": "128",
      "value": "0x0"
    },
    "409": {
      "fn": "Strings.toString",
      "offset": [
        816,
        863
      ],
      "op": "BYTE",
      "path": "128"
    },
    "410": {
      "fn": "Strings.toString",
      "offset": [
        816,
        863
      ],
      "op": "SWAP1",
      "path": "128"
    },
    "411": {
      "fn": "Strings.toString",
      "offset": [
        816,
        863
      ],
      "op": "MSTORE8",
      "path": "128"
    },
    "412": {
      "op": "POP"
    },
    "413": {
      "fn": "Strings.toString",
      "offset": [
        885,
        887
      ],
      "op": "PUSH1",
      "path": "128",
      "statement": 6,
      "value": "0xA"
    },
    "415": {
      "fn": "Strings.toString",
      "offset": [
        877,
        887
      ],
      "op": "DUP5",
      "path": "128"
    },
    "416": {
      "fn": "Strings.toString",
      "offset": [
        877,
        887
      ],
      "op": "DIV",
      "path": "128"
    },
    "417": {
      "fn": "Strings.toString",
      "offset": [
        877,
        887
      ],
      "op": "SWAP4",
      "path": "128"
    },
    "418": {
      "fn": "Strings.toString",
      "offset": [
        877,
        887
      ],
      "op": "POP",
      "path": "128"
    },
    "419": {
      "fn": "Strings.toString",
      "offset": [
        784,
        898
      ],
      "op": "PUSH2",
      "path": "128",
      "value": "0x162"
    },
    "422": {
      "fn": "Strings.toString",
      "offset": [
        784,
        898
      ],
      "op": "JUMP",
      "path": "128"
    },
    "423": {
      "fn": "Strings.toString",
      "offset": [
        784,
        898
      ],
      "op": "JUMPDEST",
      "path": "128"
    },
    "424": {
      "op": "POP"
    },
    "425": {
      "fn": "Strings.toString",
      "offset": [
        921,
        927
      ],
      "op": "SWAP5",
      "path": "128",
      "statement": 7
    },
    "426": {
      "fn": "Strings.toString",
      "offset": [
        210,
        935
      ],
      "op": "SWAP4",
      "path": "128"
    },
    "427": {
      "op": "POP"
    },
    "428": {
      "op": "POP"
    },
    "429": {
      "op": "POP"
    },
    "430": {
      "op": "POP"
    },
    "431": {
      "fn": "Strings.toString",
      "jump": "o",
      "offset": [
        210,
        935
      ],
      "op": "JUMP",
      "path": "128"
    }
  },
  "sha1": "bf88c40199f05db09a6484c49c0dbfeaa0c18a98",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Strings.sol\";\n\ncontract StringsMock {\n    function fromUint256(uint256 value) public pure returns (string memory) {\n        return Strings.toString(value);\n    }\n}\n",
  "sourceMap": "98:148:79:-:0;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/openzeppelin/mocks/StringsMock.sol",
  "type": "contract"
}